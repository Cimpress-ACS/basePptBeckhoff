<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.26">
  <POU Name="FB_BCH" Id="{a692388c-4305-475f-ae8e-9d89dea2875c}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_BCH EXTENDS FB_CtrlBase
VAR_INPUT
	In_bolSensorTrigScan: BOOL;
END_VAR
VAR_OUTPUT
	Out_Barcode: ULINT;
	Out_ChangeEvent: UINT;
END_VAR
VAR
	/// Specific interface struct for public access
	SIf: T_Ctrl_SIf_BCH;
	/// Barcode Reader Variable
	p_fbBcc: POINTER TO FB_BCC;
	pBccCIf: POINTER TO T_Ctrl_CIf;
	pBccSIf: POINTER TO T_Ctrl_SIf_BCC;
	/// DataChannel
	m_pDataChannel: POINTER TO FB_DataChannelSenderFifo;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
ToDo: DSC...

History:
Version		Date			Author				Comment
---------------------------------------------------------------------------------------------------
0.00.1		20.05.2014		AVME/DSC			Start history. Insert all basic functionalities.
___________________________________________________________________________________________________*)


SUPER^();]]></ST>
    </Implementation>
    <Method Name="getCtrlSIf" Id="{059bfe4c-1d9f-4b82-85ff-b701bf32ec9d}">
      <Declaration><![CDATA[{attribute 'object_name' := 'getCtrlSIf'}
METHOD getCtrlSIf : POINTER TO T_Ctrl_SIf_BCH
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCtrlSIf := ADR(SIf);]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFFBusy" Id="{066e1867-386b-43b1-86aa-1a62e5b87ca5}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_OFFBusy'}
METHOD PROTECTED sta_OFFBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		pBccCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF (pBccCIf^.Job.intState = BASE_PLC.cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	END_IF

	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCmdState" Id="{106a229c-825d-48ee-b288-b2da97fc5034}">
      <Declaration><![CDATA[{attribute 'object_name' := 'getCmdState'}
METHOD PROTECTED getCmdState : STRING
VAR_INPUT
	intCmdState: INT;
	bolState: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		CASE intCmdState OF
			BCH_CmdState.cCMD_READ: 
				getCmdState := 'READ';
			BCH_CmdState.cCMD_TESTSEQUENCE: 
				getCmdState := 'READ';
		END_CASE;
	ELSE
		// States's
		CASE intCmdState OF
			BCH_CmdState.cSTA_TESTSEQUENCE: 
				getCmdState := 'TESTSEQUENCE';
			BCH_CmdState.cSUB_BARCODEREADstart: 
				getCmdState := 'BARCODEREADstar';
			BCH_CmdState.cSUB_BARCODREREAD: 
				getCmdState := 'BARCODREREAD';
			BCH_CmdState.cSUB_BARCODREREADbusy: 
				getCmdState := 'BARCODREREADbusy';
			BCH_CmdState.cSUB_WAITPAPER: 
				getCmdState := 'WAITPAPER';
			BCH_CmdState.cSUB_WAITPAPERGONE: 
				getCmdState := 'WAITPAPERGONE';
			BCH_CmdState.cSUB_WAITPAPERGONEDELAY: 
				getCmdState := 'WAITPAPERGONEDELAY';
		END_CASE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_TestSequence" Id="{298e2b24-404f-44bf-bd24-f8ef62d0ca59}">
      <Declaration><![CDATA[METHOD PROTECTED sta_TestSequence : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;	

	me.SubStateMachine.intState		:= BCH_CmdState.cSUB_WAITPAPER;
	me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPER;
END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

sub_BarcodeReading(TRUE);

IF me.SubStateMachine.intState = BCH_CmdState.cSUB_WAITPAPER THEN
	IF me.intCmd = cCMD_RUN THEN
		me.StateMachine.intStateNext := cSTA_RUN;
	END_IF
END_IF

IF me.intCmd=Base_PLC.cCMD_OFF THEN
	me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
END_IF


// --------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
	;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="CtrlInit" Id="{532527d0-c678-4587-a80f-56f9e0762432}">
      <Declaration><![CDATA[{attribute 'object_name' := 'CtrlInit'}
METHOD CtrlInit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CtrlInit();

pBccCIf := AddChild(p_fbBcc^);
pBccSIf := p_fbBcc^.getCtrlSIf();




]]></ST>
      </Implementation>
    </Method>
    <Property Name="BarcodeReader" Id="{5331155f-5172-4619-aefd-236a4be06b42}">
      <Declaration><![CDATA[PROPERTY BarcodeReader : POINTER TO FB_BCC
]]></Declaration>
      <Get Name="Get" Id="{19cc6694-3fdd-4eb1-89f5-42d3ac71871b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[BarcodeReader := p_fbBcc;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{627c16b1-1719-4b14-a868-d54b60a0def1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[p_fbBcc := BarcodeReader;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="sta_OFF" Id="{571c222c-8fc7-4b9c-b4f1-594f806c4a0c}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_OFF'}
METHOD PROTECTED sta_OFF : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF me.intCmd=Base_PLC.cCMD_RUN THEN
		me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="DataChannel" Id="{70ea4189-18d2-4bf2-9c05-1e47a31f413a}">
      <Declaration><![CDATA[PROPERTY DataChannel : POINTER TO FB_DataChannelSenderFifo
]]></Declaration>
      <Set Name="Set" Id="{43175ef8-12d8-46d8-acfc-fc74639b9db3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[m_pDataChannel := DataChannel;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FB_init" Id="{7a19cfd8-0df5-4789-9802-e740c4de89fc}">
      <Declaration><![CDATA[{attribute 'object_name' := 'FB_init'}
METHOD FB_init : BOOL
VAR_INPUT
	/// if TRUE, the retain variables are initialized (warm start / cold start)
	bInitRetains: BOOL;
	/// if TRUE, the instance afterwards gets moved into the copy code (online change)
	bInCopyCode: BOOL;
END_VAR
VAR
	iIdx: UINT;
	iLength: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx < iLength) AND (CIf.Job.aCmdList[iIdx].intCmd <> cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx < iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'RUN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
    iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := BCH_CmdState.cCMD_READ;
	CIf.Job.aCmdList[iIdx].strName := 'READ'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
    iIdx := iIdx + 1;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_BCH';
CIf.Info.strFullName := 'Barcode with DataChannel';

// set alarm class
SIf.Alm[E_ALM_BCH.DataChannelMissing].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_BCH.DataChannelMissing].strText := 'DataChannel is missing';
SIf.Alm[E_ALM_BCH.DataChannelBufferFull].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_BCH.DataChannelBufferFull].strText := 'DataChannel Buffer is full';
SIf.Alm[E_ALM_BCH.BarcodeNotReadCorrectly].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_BCH.BarcodeNotReadCorrectly].strText := 'Barcode not detected';

// *******************************************************************************
// initial values
// *******************************************************************************

// software configuration
CIf.SwCfg.bolExist := FALSE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation :=  FALSE;

SIf.Cfg.bolEnableDataChannel := FALSE;
SIf.Cfg.bolNegativeTriggerSignal := FALSE;

SIf.Par.udiPaperGoneDelay_ms := 500;
SIf.Par.udiTestReadCylceTime_ms := 3600;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Always" Id="{8a4ccd7c-9661-4c75-bb2e-e32fdc0f2ee0}">
      <Declaration><![CDATA[{attribute 'object_name' := 'Always'}
METHOD PROTECTED Always : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// not inherite from base !!!  special behaviour for this controller
// SUPER^.Always();

// Conditions Always
IF (me.bolChangeBackToAUTO=TRUE) THEN // switch mode to automatic switch off controller
	//me.StateMachine.intStateNext := cSTA_OFFBusy;
	me.bolChangeBackToAUTO := FALSE;
END_IF

IF (CIf.SwCfg.bolExist=FALSE) THEN // hardware of controller does not exist
	me.StateMachine.intStateNext := cSTA_SINGLE_ANSWER;
ELSE
	// Handle command PON
	IF (me.intCmd=cCMD_PON) 
		AND (me.StateMachine.intState<>cSTA_PONBusy) AND (me.StateMachine.intState<>cSTA_PON)
		AND (me.StateMachine.intState<>cSTA_ERROR) AND (me.StateMachine.intState<>cSTA_ERRORQuit) 
		AND (me.StateMachine.intState<>cSTA_EOFF) AND (me.StateMachine.intState<>cSTA_EOFFBusy) THEN
		me.StateMachine.intStateNext := cSTA_PONBusy;
	END_IF
END_IF
		
// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState<>cSTA_SINGLE_ANSWER) THEN
	;
END_IF

// ----------------------------------------------------------------------------------
// Always change actions in Base Library
// ----------------------------------------------------------------------------------
// overrule error always from base -> no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF

// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF))
		 AND (me.StateMachine.intState<>cSTA_ERROR) AND (me.StateMachine.intState<>cSTA_ERRORQuit) AND
		(me.StateMachine.intState<>cSTA_OFF) AND (me.StateMachine.intState<>cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="CtrlSIf" Id="{96aea3a2-a2b1-4983-a565-a3260914589b}">
      <Declaration><![CDATA[PROPERTY CtrlSIf : POINTER TO T_Ctrl_SIf_BCH
]]></Declaration>
      <Get Name="Get" Id="{d8e6eee2-e4f9-4f33-9aa5-4bf5fee03bc5}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CtrlSIf := ADR(SIf);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StateMachine" Id="{987d2d63-fa5c-4fac-9ed3-6e19abb4e578}">
      <Declaration><![CDATA[{attribute 'object_name' := 'StateMachine'}
METHOD PROTECTED StateMachine : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
	cSTA_RUN: 
        THIS^.sta_RUN();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUN" Id="{afcf114c-08eb-48a0-8413-11ccb8967cf5}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_RUN'}
METHOD PROTECTED sta_RUN : BOOL
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;	

	me.SubStateMachine.intState		:= BCH_CmdState.cSUB_WAITPAPER;
	me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPER;
END_IF


// --------------------------------------------------------------------------------------
// Cyclic action
sub_BarcodeReading(FALSE);

IF me.SubStateMachine.intState = BCH_CmdState.cSUB_WAITPAPER THEN
	IF me.intCmd = cCMD_TESTSEQUENCE THEN
		me.StateMachine.intStateNext := cSTA_TESTSEQUENCE;
	END_IF
END_IF

IF me.intCmd=Base_PLC.cCMD_OFF THEN
	me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
END_IF


// --------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
	;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERROR" Id="{dae2e508-4fbf-467c-aaaf-bc0034a3438a}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_ERROR'}
METHOD PROTECTED sta_ERROR : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -> possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action

	// State Change Condition
	IF (CIf.Job.bolAlmReset = TRUE) THEN
		me.StateMachine.intStateNext := cSTA_ERRORQuit;
	END_IF

	
//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERRORQuit" Id="{e01dbd7b-2b28-4435-9a3a-97cb1f6d2ac0}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_ERRORQuit'}
METHOD PROTECTED sta_ERRORQuit : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	
	// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
	IF (CIf.Job.bolAlmReset = TRUE) THEN
		CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
		CIf.Job.bolAlmReset := FALSE;
		
		IF (me.StateMachine.intStateHistory=cSTA_RUN) OR (me.StateMachine.intStateHistory=cSTA_RUNBusy) THEN
			me.StateMachine.intStateNext := cSTA_RUNBusy;
		ELSE
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
		
	END_IF

	
//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sub_BarcodeReading" Id="{e7906fc3-ca38-4b54-a38a-29d8239d4989}">
      <Declaration><![CDATA[METHOD PROTECTED sub_BarcodeReading : BOOL
VAR_INPUT
	bolTestSequence				: BOOL;
END_VAR
VAR
	uliBarcode: ULINT;
	pItem: POINTER TO T_IdBase_DCH;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE me.SubStateMachine.intState OF
	// Wait for the paper
	// ------------------------------------------------------------------------
	BCH_CmdState.cSUB_WAITPAPER:
		IF SIf.In.bolSensorTrigScan.intern OR (me.intCmd = BCH_CmdState.cCMD_READ) OR bolTestSequence THEN
			IF (me.intCmd = BCH_CmdState.cCMD_READ) THEN
				CIf.Job.intACmd := cCMD_DONE;			
				CIf.Job.intMCmd := cCMD_DONE;			
			END_IF

			me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_BARCODEREADstart;
		END_IF

	// substate Start Reading Barcode
	// ------------------------------------------------------------------------
	BCH_CmdState.cSUB_BARCODEREADstart:
		pBccCIf^.Job.intACmd := BCC_CmdState.cBCC_CMD_READ;

		CASE pBccCIf^.Job.intState OF
			BCC_CmdState.cBCC_STA_READBusy:
				me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_BARCODREREADbusy;
			cSTA_ERROR:
				me.StateMachine.intStateNext := cSTA_ERROR;
		END_CASE

	// substate Busy Reading Barcode
	// ------------------------------------------------------------------------
	BCH_CmdState.cSUB_BARCODREREADbusy:
		CASE pBccCIf^.Job.intState OF
			BCC_CmdState.cBCC_STA_READ:
				me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_BARCODREREAD;
			cSTA_ERROR:
				me.StateMachine.intStateNext := cSTA_ERROR;
		END_CASE

	// substate Reading Barcode Done
	// ------------------------------------------------------------------------
	BCH_CmdState.cSUB_BARCODREREAD:
		IF SIf.Cfg.bolEnableDataChannel THEN
			IF pBccSIf^.Cur.stData.uliBarCode > 0 THEN
				uliBarcode := pBccSIf^.Cur.stData.uliBarCode;
				Out_Barcode := uliBarcode;
				Out_ChangeEvent := Out_ChangeEvent + 1;

				IF (m_pDataChannel <> NULL) AND (SIf.Cfg.bolEnableDataChannel) THEN
					IF UINT_TO_INT(m_pDataChannel^.ItemCount) >= m_pDataChannel^.MaxFifoSize THEN
						pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_BCH.DataChannelBufferFull,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					ELSE
						pItem := __NEW(T_IdBase_DCH);
						pItem^.rBaseInfo.eHealth := E_ItemHealth.Healthy;
						pItem^.rBaseInfo.uinModuleId := 1;
						pItem^.rBaseInfo.uinActualPosition := 1;
						pItem^.udiIdentification := pBccSIf^.Cur.stData.uliBarCode;
						m_pDataChannel^.Push(pItem);					
					END_IF
				END_IF
			END_IF

			me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPERGONE;
		END_IF
		
	// Wait Until the Paper is gone
	// ------------------------------------------------------------------------
	BCH_CmdState.cSUB_WAITPAPERGONE:
		IF NOT SIf.In.bolSensorTrigScan.intern OR bolTestSequence THEN
			me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPERGONEDELAY;
		END_IF

	// Wait Until the Paper is gone
	// ------------------------------------------------------------------------
	BCH_CmdState.cSUB_WAITPAPERGONEDELAY:
		IF bolTestSequence THEN
			IF me.SubStateMachine.udiTimeInState_ms > SIf.Par.udiTestReadCylceTime_ms THEN
				me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPER;
			END_IF
		ELSE
			IF me.SubStateMachine.udiTimeInState_ms > SIf.Par.udiPaperGoneDelay_ms THEN
				me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPER;
			END_IF
		END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoInBridge" Id="{f3be96ce-5b92-4429-8a5c-a03481bf0983}">
      <Declaration><![CDATA[{attribute 'object_name' := 'IoInBridge'}
METHOD PROTECTED IoInBridge : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
IF SIf.Cfg.bolNegativeTriggerSignal THEN
	SIf.In.bolSensorTrigScan.map			:= NOT THIS^.In_bolSensorTrigScan				;
ELSE
	SIf.In.bolSensorTrigScan.map			:= THIS^.In_bolSensorTrigScan				;
END_IF

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolSensorTrigScan));
ELSE
;	//simulation of global IO
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUNBusy" Id="{f5999d3e-aed9-4d7e-bfbb-45181535c06b}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_RUNBusy'}
METHOD PROTECTED sta_RUNBusy : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF me.intCmd=Base_PLC.cCMD_OFF THEN
		me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
	ELSE
		me.StateMachine.intStateNext := Base_PLC.cSTA_RUN;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties />
  </POU>
</TcPlcObject>