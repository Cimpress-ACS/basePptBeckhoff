<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.26">
  <POU Name="FB_BCH" Id="{7aa0fc07-5831-43ea-8548-7144524ba455}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_BCH EXTENDS FB_CtrlBase
VAR_INPUT
	In_bolSensorTrigScan: BOOL;
END_VAR
VAR_OUTPUT
	Out_Barcode: ULINT;
	Out_ChangeEvent: UINT;
END_VAR
VAR
	/// Specific interface struct for public access
	SIf: T_Ctrl_SIf_BCH;
	/// Barcode Reader Variable
	p_fbBcc: POINTER TO FB_BCC;
	pBccCIf: POINTER TO T_Ctrl_CIf;
	pBccSIf: POINTER TO T_Ctrl_SIf_BCC;
	/// DataChannel
	m_pDataChannel: POINTER TO FB_DataChannelSenderFifo;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
ToDo: DSC...

History:
Version		Date			Author				Comment
---------------------------------------------------------------------------------------------------
0.00.1		20.05.2014		AVME/DSC			Start history. Insert all basic functionalities.
___________________________________________________________________________________________________*)


SUPER^();]]></ST>
    </Implementation>
    <Method Name="getCmdState" Id="{1945cd27-8a0a-4eec-a76b-6936a30a4e82}">
      <Declaration><![CDATA[{attribute 'object_name' := 'getCmdState'}
METHOD PROTECTED getCmdState : STRING
VAR_INPUT
	intCmdState: INT;
	bolState: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		CASE intCmdState OF
			BCH_CmdState.cCMD_READ: 
				getCmdState := 'READ';
		END_CASE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUNBusy" Id="{57c21643-5040-4dc3-a9f3-b186dab142ef}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_RUNBusy'}
METHOD PROTECTED sta_RUNBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF me.intCmd=Base_PLC.cCMD_OFF THEN
		me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
	ELSE
		me.StateMachine.intStateNext := Base_PLC.cSTA_RUN;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUN" Id="{6304a2b6-973d-4e81-a37b-2ef5383f7532}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_RUN'}
METHOD PROTECTED sta_RUN : BOOL
VAR
	uliBarcode: ULINT;
	pItem: POINTER TO T_IdBase_DCH;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	

		me.SubStateMachine.intState		:= BCH_CmdState.cSUB_WAITPAPER;
		me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPER;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	CASE me.SubStateMachine.intState OF
		// Wait for the paper
		// ------------------------------------------------------------------------
		BCH_CmdState.cSUB_WAITPAPER:
			IF SIf.In.bolSensorTrigScan.intern OR (me.intCmd = BCH_CmdState.cCMD_READ) THEN
				IF (me.intCmd = BCH_CmdState.cCMD_READ) THEN
					CIf.Job.intACmd := cCMD_DONE;			
					CIf.Job.intMCmd := cCMD_DONE;			
				END_IF

				me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_BARCODEREADstart;
			END_IF

		// substate Start Reading Barcode
		// ------------------------------------------------------------------------
		BCH_CmdState.cSUB_BARCODEREADstart:
			pBccCIf^.Job.intACmd := BCC_CmdState.cBCC_CMD_READ;
	
			CASE pBccCIf^.Job.intState OF
				BCC_CmdState.cBCC_STA_READBusy:
					me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_BARCODREREADbusy;
				cSTA_ERROR:
					me.StateMachine.intStateNext := cSTA_ERROR;
			END_CASE
	
		// substate Busy Reading Barcode
		// ------------------------------------------------------------------------
		BCH_CmdState.cSUB_BARCODREREADbusy:
			CASE pBccCIf^.Job.intState OF
				BCC_CmdState.cBCC_STA_READ:
					me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_BARCODREREAD;
				cSTA_ERROR:
					me.StateMachine.intStateNext := cSTA_ERROR;
			END_CASE
	
		// substate Reading Barcode Done
		// ------------------------------------------------------------------------
		BCH_CmdState.cSUB_BARCODREREAD:
			IF SIf.Cfg.bolEnableDataChannel THEN
				IF pBccSIf^.Cur.stData.uliBarCode > 0 THEN
					uliBarcode := pBccSIf^.Cur.stData.uliBarCode;
					Out_Barcode := uliBarcode;
					Out_ChangeEvent := Out_ChangeEvent + 1;

					IF (m_pDataChannel <> NULL) AND (SIf.Cfg.bolEnableDataChannel) THEN
						IF m_pDataChannel^.ItemCount >= m_pDataChannel^.MaxFifoSize THEN
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_BCH.DataChannelBufferFull,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
						ELSE
							pItem := __NEW(T_IdBase_DCH);
							pItem^.rBaseInfo.eHealth := E_ItemHealth.Healthy;
							pItem^.rBaseInfo.uinModuleId := 1;
							pItem^.rBaseInfo.uinActualPosition := 1;
							pItem^.udiIdentification := pBccSIf^.Cur.stData.uliBarCode;
							m_pDataChannel^.Push(pItem);					
						END_IF
					END_IF
				END_IF

				me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPERGONE;
			END_IF
			
		// Wait Until the Paper is gone
		// ------------------------------------------------------------------------
		BCH_CmdState.cSUB_WAITPAPERGONE:
			IF NOT SIf.In.bolSensorTrigScan.intern THEN
				me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPERGONEDELAY;
			END_IF

		// Wait Until the Paper is gone
		// ------------------------------------------------------------------------
		BCH_CmdState.cSUB_WAITPAPERGONEDELAY:
			IF me.SubStateMachine.udiTimeInState_ms > 500 THEN
				me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPER;
			END_IF
	END_CASE

	IF me.intCmd=Base_PLC.cCMD_OFF THEN
		me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoInBridge" Id="{78fdc27e-f0f5-4f8f-bff0-8f8c8702ce62}">
      <Declaration><![CDATA[{attribute 'object_name' := 'IoInBridge'}
METHOD PROTECTED IoInBridge : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
SIf.In.bolSensorTrigScan.map			:= THIS^.In_bolSensorTrigScan				;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolSensorTrigScan));
ELSE
;	//simulation of global IO
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="BarcodeReader" Id="{951314b8-e497-4493-84fa-6b8ed84230a7}">
      <Declaration><![CDATA[PROPERTY BarcodeReader : POINTER TO FB_BCC
]]></Declaration>
      <Get Name="Get" Id="{a7e62711-f511-441f-adcb-19fdb205ccb2}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[BarcodeReader := p_fbBcc;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c8df6a49-ce32-4868-b220-440b132f1cb8}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[p_fbBcc := BarcodeReader;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="StateMachine" Id="{9936241c-85be-4ae6-b05b-a3511f038fec}">
      <Declaration><![CDATA[{attribute 'object_name' := 'StateMachine'}
METHOD PROTECTED StateMachine : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
	cSTA_RUN: 
        THIS^.sta_RUN();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="CtrlInit" Id="{9c557654-4705-4270-88d1-78270ea0e30c}">
      <Declaration><![CDATA[{attribute 'object_name' := 'CtrlInit'}
METHOD CtrlInit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CtrlInit();

pBccCIf := AddChild(p_fbBcc^);
pBccSIf := p_fbBcc^.getCtrlSIf();




]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCtrlSIf" Id="{a0be3f56-209b-4c04-9071-f641449349b2}">
      <Declaration><![CDATA[{attribute 'object_name' := 'getCtrlSIf'}
METHOD getCtrlSIf : POINTER TO T_Ctrl_SIf_BCH
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCtrlSIf := ADR(SIf);]]></ST>
      </Implementation>
    </Method>
    <Property Name="DataChannel" Id="{ac7c8e3d-b286-4bdb-91ba-ac87425b7b41}">
      <Declaration><![CDATA[PROPERTY DataChannel : POINTER TO FB_DataChannelSenderFifo
]]></Declaration>
      <Set Name="Set" Id="{97c31597-6b28-4fde-b002-c747c4ff6c80}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[m_pDataChannel := DataChannel;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="sta_OFF" Id="{c8236713-f108-4f1e-a49c-f6e4b09217ad}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_OFF'}
METHOD PROTECTED sta_OFF : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF me.intCmd=Base_PLC.cCMD_RUN THEN
		me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFFBusy" Id="{c9d8c693-77e5-4da0-871c-944e989b9397}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_OFFBusy'}
METHOD PROTECTED sta_OFFBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		pBccCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF (pBccCIf^.Job.intState = BASE_PLC.cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	END_IF

	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Always" Id="{d477f39e-f2af-45d6-91ed-e6943ef43a92}">
      <Declaration><![CDATA[{attribute 'object_name' := 'Always'}
METHOD PROTECTED Always : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// not inherite from base !!!  special behaviour for this controller
// SUPER^.Always();

// Conditions Always
IF (me.bolChangeBackToAUTO=TRUE) THEN // switch mode to automatic switch off controller
	//me.StateMachine.intStateNext := cSTA_OFFBusy;
	me.bolChangeBackToAUTO := FALSE;
END_IF

IF (CIf.SwCfg.bolExist=FALSE) THEN // hardware of controller does not exist
	me.StateMachine.intStateNext := cSTA_SINGLE_ANSWER;
ELSE
	// Handle command PON
	IF (me.intCmd=cCMD_PON) 
		AND (me.StateMachine.intState<>cSTA_PONBusy) AND (me.StateMachine.intState<>cSTA_PON)
		AND (me.StateMachine.intState<>cSTA_ERROR) AND (me.StateMachine.intState<>cSTA_ERRORQuit) 
		AND (me.StateMachine.intState<>cSTA_EOFF) AND (me.StateMachine.intState<>cSTA_EOFFBusy) THEN
		me.StateMachine.intStateNext := cSTA_PONBusy;
	END_IF
END_IF
		
// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState<>cSTA_SINGLE_ANSWER) THEN
	;
END_IF

// ----------------------------------------------------------------------------------
// Always change actions in Base Library
// ----------------------------------------------------------------------------------
// overrule error always from base -> no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF

// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF))
		 AND (me.StateMachine.intState<>cSTA_ERROR) AND (me.StateMachine.intState<>cSTA_ERRORQuit) AND
		(me.StateMachine.intState<>cSTA_OFF) AND (me.StateMachine.intState<>cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="CtrlSIf" Id="{db229bff-9c1f-41b4-a548-0a656bc10ad3}">
      <Declaration><![CDATA[PROPERTY CtrlSIf : POINTER TO T_Ctrl_SIf_BCH
]]></Declaration>
      <Get Name="Get" Id="{bae1b32a-cbe7-46c1-b4b6-9a29f80ac6b1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CtrlSIf := ADR(SIf);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="sta_ERRORQuit" Id="{f13d9e0b-9e69-4220-a023-ff7718c29fed}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_ERRORQuit'}
METHOD PROTECTED sta_ERRORQuit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	
	// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
	IF (CIf.Job.bolAlmReset = TRUE) THEN
		CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
		CIf.Job.bolAlmReset := FALSE;
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{f9a8b4e5-68fc-4e47-a8e2-6531f3b675c7}">
      <Declaration><![CDATA[{attribute 'object_name' := 'FB_init'}
METHOD FB_init : BOOL
VAR_INPUT
	/// if TRUE, the retain variables are initialized (warm start / cold start)
	bInitRetains: BOOL;
	/// if TRUE, the instance afterwards gets moved into the copy code (online change)
	bInCopyCode: BOOL;
END_VAR
VAR
	iIdx: UINT;
	iLength: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx < iLength) AND (CIf.Job.aCmdList[iIdx].intCmd <> cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx < iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'RUN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
    iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := BCH_CmdState.cCMD_READ;
	CIf.Job.aCmdList[iIdx].strName := 'READ'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
    iIdx := iIdx + 1;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_BCH';
CIf.Info.strFullName := 'Barcode with DataChannel';

// set alarm class
SIf.Alm[E_ALM_BCH.DataChannelMissing].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_BCH.DataChannelMissing].strText := 'DataChannel is missing';
SIf.Alm[E_ALM_BCH.DataChannelBufferFull].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_BCH.DataChannelBufferFull].strText := 'DataChannel Buffer is full';
SIf.Alm[E_ALM_BCH.BarcodeNotReadCorrectly].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_BCH.BarcodeNotReadCorrectly].strText := 'Barcode not detected';

// *******************************************************************************
// initial values
// *******************************************************************************

// software configuration
CIf.SwCfg.bolExist := FALSE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation :=  FALSE;

SIf.Cfg.bolEnableDataChannel := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERROR" Id="{fa61bdef-a4f2-4598-aaab-1dd6cfb77fe7}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_ERROR'}
METHOD PROTECTED sta_ERROR : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -> possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action

	// State Change Condition
	IF (CIf.Job.bolAlmReset = TRUE) THEN
		me.StateMachine.intStateNext := cSTA_ERRORQuit;
	END_IF

	
//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties />
  </POU>
</TcPlcObject>