<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="FB_GRR" Id="{e59aaea5-7c5d-4e22-a01a-aa7ca2d8a38d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_GRR EXTENDS FB_CtrlBase
VAR_INPUT
	In_bolSystemOk: BOOL;
	In_bolMainPressureError: BOOL;
	In_bolEoffOrFuseOk: BOOL;
	In_bolPowderLowWarning: BOOL;
	In_bolAutoMode: BOOL;
	In_intState: INT;
	In_bolToggleBitGrn: BOOL;
	In_intMainPressure: INT;
END_VAR
VAR_OUTPUT
	Out_intCommand: INT;
	Out_intConveyorBelt: INT;
	Out_intPowderVibrator: INT;
	Out_intConveyorVibrator: INT;
	Out_uinFilterClearingCycleTime_min: UINT;
	Out_bolToggleBitGrr: BOOL;
	Out_intAnalogValue: INT;
END_VAR
VAR
	/// Specific interface struct for public access
	SIf: T_Ctrl_SIf_Grr;
	
	udiToggleBitGrrTimer_ms		: UDINT;
	udiToggleBitGrnTimer_ms		: UDINT;
	bToggleBitGrnOld			: BOOL;
	bToggleBitOK				: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Copyright 2017 Cimpress

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. *)

(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		05.11.2014		BB			Start history
0.00.2		06.02.2015		BB			changed name from GRN to GRR
0.0.0.110	29.02.2016		RE			RP-2218 debounce low powder
___________________________________________________________________________________________________*)

SUPER^();]]></ST>
    </Implementation>
    <Method Name="sta_OFF" Id="{01abf0d9-cea3-434a-9ff2-b96aa3138c02}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_OFF'}
METHOD PROTECTED sta_OFF : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF (SIf.In.bolAutoMode.intern) THEN
		IF me.intCmd=Base_PLC.cCMD_RUN AND SIf.In.bolSystemOk.intern THEN
			me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;
		END_IF
	ELSE
		me.StateMachine.intStateNext := GRR_CmdState.cSTA_MANUALBusy;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{0d8f7722-1d1f-4a5e-9267-711c5ab50a30}">
      <Declaration><![CDATA[{attribute 'object_name' := 'StateMachine'}
METHOD PROTECTED StateMachine : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
	cSTA_RUN: 
        THIS^.sta_RUN();
	cSTA_MANUALBusy: 
        THIS^.sta_MANUALBusy();
	cSTA_MANUAL: 
        THIS^.sta_MANUAL();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Always" Id="{3ca0e0d9-d2da-4930-bd5a-734a38a26e0a}">
      <Declaration><![CDATA[{attribute 'object_name' := 'Always'}
METHOD PROTECTED Always : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState <> cSTA_SINGLE_ANSWER) THEN
	
	// Toggle Bit Grr
	udiToggleBitGrrTimer_ms := udiToggleBitGrrTimer_ms + me.FUBInfo.udiSample_ms;
	IF (udiToggleBitGrrTimer_ms > 200) THEN
		SIf.Out.bolToggleBitGrr.intern := NOT SIf.Out.bolToggleBitGrr.intern;
		udiToggleBitGrrTimer_ms := 0;
	END_IF
	
	// check Toggle Bit Grn
	udiToggleBitGrnTimer_ms := udiToggleBitGrnTimer_ms + me.FUBInfo.udiSample_ms;
	IF (SIf.In.bolToggleBitGrn.intern <> bToggleBitGrnOld) THEN
		bToggleBitGrnOld := SIf.In.bolToggleBitGrn.intern;
		udiToggleBitGrnTimer_ms := 0;
	END_IF
	bToggleBitOK := FALSE;
	IF (udiToggleBitGrnTimer_ms < 1000) THEN
		bToggleBitOK := TRUE;
	END_IF
	
	IF NOT (bToggleBitOK) AND (me.StateMachine.intState <> cSTA_ERROR) AND (me.StateMachine.intState <> cSTA_ERRORQuit) THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.LostConnection,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		me.StateMachine.intStateNext := Base_CmdState.cSTA_ERROR;
	END_IF
	
	IF NOT SIf.In.bolAutoMode.intern AND bToggleBitOK THEN
		IF (SIf.Cfg.bolManualModeAllowed) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.ManualModeWarning,0,ADR(SIf.Alm),E_AlmState.SET,CIf.Job.eMe_ActivAlmClass);
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.ManualModeError,0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
		ELSIF (me.StateMachine.intState <> cSTA_ERROR) AND (me.StateMachine.intState <> cSTA_ERRORQuit) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.ManualModeError,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.ManualModeWarning,0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_CmdState.cSTA_ERROR;
		END_IF
	ELSE
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.ManualModeWarning,0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
	END_IF
	
	IF SIf.In.bolPowderLowWarning.intern AND bToggleBitOK THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.LowPowderWarning,0,ADR(SIf.Alm),E_AlmState.SET,CIf.Job.eMe_ActivAlmClass);
	ELSE
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.LowPowderWarning,0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
	END_IF
	
	// reasons are either PressureError or SystemError (EOFF/Fuse/Motor)
	IF NOT SIf.In.bolSystemOk.intern AND bToggleBitOK THEN
		IF SIf.In.bolMainPressureError.intern THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.PressureError,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_CmdState.cSTA_OFFBusy;
		ELSE
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.SystemError,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_CmdState.cSTA_OFFBusy;
		END_IF
	END_IF
	
	// Check Parameters
	// Conveyor Belt
	IF (SIf.Par.rConveyorBelt_Hz>SIf.Cfg.rMaxFreq_Hz) THEN
		SIf.Par.rConveyorBelt_Hz := SIf.Cfg.rMaxFreq_Hz;
	ELSIF (SIf.Par.rConveyorBelt_Hz<0) THEN
		SIf.Par.rConveyorBelt_Hz := 0;
	END_IF
	// Conveyor Vibrator
	IF (SIf.Par.rConveyorVibrator_Hz>SIf.Cfg.rMaxFreq_Hz) THEN
		SIf.Par.rConveyorVibrator_Hz := SIf.Cfg.rMaxFreq_Hz;
	ELSIF (SIf.Par.rConveyorVibrator_Hz<0) THEN
		SIf.Par.rConveyorVibrator_Hz := 0;
	END_IF
	// Powder Virbrator
	IF (SIf.Par.rPowderVibrator_Hz>SIf.Cfg.rMaxFreq_Hz) THEN
		SIf.Par.rPowderVibrator_Hz := SIf.Cfg.rMaxFreq_Hz;
	ELSIF (SIf.Par.rPowderVibrator_Hz<0) THEN
		SIf.Par.rPowderVibrator_Hz := 0;
	END_IF
	// Analog Value
	IF (SIf.Par.rAirKnife_p>100) THEN
		SIf.Par.rAirKnife_p := 100;
	ELSIF (SIf.Par.rAirKnife_p<0) THEN
		SIf.Par.rAirKnife_p := 0;
	END_IF
	
	// Set Outputs
	SIf.Out.intConveyorBelt.intern := REAL_TO_INT(MAX_INT/SIf.Cfg.rMaxFreq_Hz*SIf.Par.rConveyorBelt_Hz);
	SIf.Out.intConveyorVibrator.intern := REAL_TO_INT(MAX_INT/SIf.Cfg.rMaxFreq_Hz*SIf.Par.rConveyorVibrator_Hz);
	SIf.Out.intPowderVibrator.intern := REAL_TO_INT(MAX_INT/SIf.Cfg.rMaxFreq_Hz*SIf.Par.rPowderVibrator_Hz);
	SIf.Out.intAnalogValue.intern := REAL_TO_INT(MAX_INT/100*SIf.Par.rAirKnife_p);
	SIf.Out.uinFilterClearingCycleTime_min.intern := SIf.Par.uinFilterClearingCycleTime_min;
	
	// Set Current Values
	SIf.Cur.intMainPressure := SIf.In.intMainPressure.intern;

END_IF

// ----------------------------------------------------------------------------------
// overrule error always from base -> no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState = cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoOutBridge" Id="{53670b8d-47c2-43a7-9bdc-52283635755d}">
      <Declaration><![CDATA[{attribute 'object_name' := 'IoOutBridge'}
METHOD PROTECTED IoOutBridge : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutInt(CIf.Job.bolIoForce ,ADR(SIf.Out.intCommand));
	setOutInt(CIf.Job.bolIoForce ,ADR(SIf.Out.intConveyorBelt));
	setOutInt(CIf.Job.bolIoForce ,ADR(SIf.Out.intConveyorVibrator));
	setOutInt(CIf.Job.bolIoForce ,ADR(SIf.Out.intPowderVibrator));
	setOutUint(CIf.Job.bolIoForce ,ADR(SIf.Out.uinFilterClearingCycleTime_min));
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolToggleBitGrr));
	setOutUint(CIf.Job.bolIoForce ,ADR(SIf.Out.intAnalogValue));
	
	THIS^.Out_intCommand := SIf.Out.intCommand.map;
	THIS^.Out_intConveyorBelt := SIf.Out.intConveyorBelt.map;
	THIS^.Out_intConveyorVibrator := SIf.Out.intConveyorVibrator.map;
	THIS^.Out_intPowderVibrator := SIf.Out.intPowderVibrator.map;
	THIS^.Out_uinFilterClearingCycleTime_min := SIf.Out.uinFilterClearingCycleTime_min.map;
	THIS^.Out_bolToggleBitGrr := SIf.Out.bolToggleBitGrr.map;
	THIS^.Out_intAnalogValue := SIf.Out.intAnalogValue.map;
ELSE
	THIS^.Out_intCommand := 0;
	THIS^.Out_intConveyorBelt := 0;
	THIS^.Out_intConveyorVibrator := 0;
	THIS^.Out_intPowderVibrator := 0;
	THIS^.Out_uinFilterClearingCycleTime_min := 0;
	THIS^.Out_bolToggleBitGrr := SIf.Out.bolToggleBitGrr.map;
	THIS^.Out_intAnalogValue := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="CtrlSIf" Id="{7a4e8331-ad47-4ba5-b879-cea967c63058}">
      <Declaration><![CDATA[PROPERTY PUBLIC CtrlSIf : POINTER TO T_Ctrl_SIf_GRR]]></Declaration>
      <Get Name="Get" Id="{09d94cee-b290-446b-a751-03d4e8bf104b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CtrlSIf := ADR(SIf);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="sta_RUNBusy" Id="{9345503d-702c-4a29-8854-949d9b17de96}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_RUNBusy'}
METHOD PROTECTED sta_RUNBusy : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		SIf.Out.intCommand.intern := cCMD_RUN;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF (SIf.In.bolAutoMode.intern) THEN
		IF me.intCmd=Base_PLC.cCMD_OFF THEN
			me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
		ELSIF (SIf.In.intState.intern = cSTA_RUN) THEN
			me.StateMachine.intStateNext := Base_PLC.cSTA_RUN;
		END_IF
	ELSE
		me.StateMachine.intStateNext := GRR_CmdState.cSTA_MANUALBusy;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoInBridge" Id="{93e78208-4a34-41d7-bf95-5e0ff37fb835}">
      <Declaration><![CDATA[{attribute 'object_name' := 'IoInBridge'}
METHOD PROTECTED IoInBridge : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.IoInBridge();
// digitale and analoge inputs read from hardware or forcing
SIf.In.bolSystemOk.map	:= THIS^.In_bolSystemOk;
SIf.In.bolMainPressureError.map	:= THIS^.In_bolMainPressureError;
SIf.In.bolEoffOrFuseOk.map	:= THIS^.In_bolEoffOrFuseOk;
SIf.In.bolPowderLowWarning.map	:= THIS^.In_bolPowderLowWarning;
SIf.In.bolAutoMode.map	:= THIS^.In_bolAutoMode;
SIf.In.intState.map	:= THIS^.In_intState;
SIf.In.bolToggleBitGrn.map	:= THIS^.In_bolToggleBitGrn;
SIf.In.intMainPressure.map	:= THIS^.In_intMainPressure;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolSystemOk));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolMainPressureError));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolEoffOrFuseOk));
	BASE_PLC.getInBolDebounced(CIf.Job.bolIoForce, me.FUBInfo.udiSample_ms, SIf.Par.udiLowPowderDebounceTime_ms, ADR(SIf.In.bolPowderLowWarning));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolAutoMode));
	BASE_PLC.getInInt(CIf.Job.bolIoForce,ADR(SIf.In.intState));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolToggleBitGrn));
	BASE_PLC.getInInt(CIf.Job.bolIoForce,ADR(SIf.In.intMainPressure));
ELSE
	//simulation of global IO
	SIf.In.bolSystemOk.intern			:= TRUE;
	SIf.In.bolMainPressureError.intern	:= FALSE;
	SIf.In.bolEoffOrFuseOk.intern		:= TRUE;
	SIf.In.bolPowderLowWarning.intern	:= FALSE;
	SIf.In.bolAutoMode.intern			:= TRUE;
	SIf.In.intState.intern				:= SIf.Out.intCommand.intern;
	SIf.In.bolToggleBitGrn.intern		:= SIf.Out.bolToggleBitGrr.intern;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERROR" Id="{979a2b00-7f2d-4812-b8dd-36de9c72075e}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_ERROR'}
METHOD PROTECTED sta_ERROR : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -> possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// --------------------------------------------------------------------------------------
// Cyclic action
	
	// State Change Condition
	IF (CIf.Job.bolAlmReset = TRUE) THEN
		me.StateMachine.intStateNext := cSTA_ERRORQuit;
	END_IF

	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_PON" Id="{b65d2b03-ae1a-44e1-b1b8-0d2cfc836112}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_PON'}
METHOD PROTECTED sta_PON : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// --------------------------------------------------------------------------------------
// Cyclic action

	IF (SIf.In.bolAutoMode.intern) THEN
		IF (me.intCmd > Base_PLC.cCMD_PON) THEN
			me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
		END_IF
	ELSE
		me.StateMachine.intStateNext := GRR_CmdState.cSTA_MANUALBusy;
	END_IF
	
	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_MANUALBusy" Id="{b9648b92-8712-4188-a138-912fc8030bd1}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_MANUALBusy'}
METHOD PROTECTED sta_MANUALBusy : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		SIf.Out.intCommand.intern := cCMD_OFF;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF (SIf.In.bolAutoMode.intern) THEN
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	ELSE
		me.StateMachine.intStateNext := GRR_CmdState.cSTA_MANUAL;
	END_IF

	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCmdState" Id="{bd87fdb7-477b-4242-b8f8-064cd448fee8}">
      <Declaration><![CDATA[{attribute 'object_name' := 'getCmdState'}
METHOD PROTECTED getCmdState : STRING
VAR_INPUT
	intCmdState: INT;
	bolState: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime	
	IF (bolState=FALSE) THEN
		// Commands
		;
	ELSE
		// States
		CASE intCmdState OF
			// Main states
			GRR_CmdState.cSTA_MANUALBusy:
				getCmdState := 'MANUALBusy';
			GRR_CmdState.cSTA_MANUAL:
				getCmdState := 'MANUAL';
		END_CASE;
	END_IF 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUN" Id="{be96e68e-10ee-4bec-8003-10de61798d4d}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_RUN'}
METHOD PROTECTED sta_RUN : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF (SIf.In.bolAutoMode.intern) THEN
		IF me.intCmd=Base_PLC.cCMD_OFF THEN
			me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
		END_IF
	ELSE
		me.StateMachine.intStateNext := GRR_CmdState.cSTA_MANUALBusy;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERRORQuit" Id="{cf02d52a-5116-4955-b12e-90d21ef47cc8}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_ERRORQuit'}
METHOD PROTECTED sta_ERRORQuit : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// --------------------------------------------------------------------------------------
// Cyclic action
	
	// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
	IF (CIf.Job.bolAlmReset = TRUE) THEN
		CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
		CIf.Job.bolAlmReset := FALSE;
	END_IF
	
	IF (SIf.In.bolAutoMode.intern) THEN
		me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
	ELSE
		me.StateMachine.intStateNext := GRR_CmdState.cSTA_MANUALBusy;
	END_IF
	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_PONBusy" Id="{d09c0836-06ff-4257-9794-36fdc29c9264}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_PONBusy'}
METHOD PROTECTED sta_PONBusy : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
	IF (SIf.In.intState.intern < cSTA_PON) THEN
		SIf.Out.intCommand.intern := cCMD_PON;
	END_IF
END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF (SIf.In.intState.intern >= cSTA_PON) THEN
		me.StateMachine.intStateNext := cSTA_PON;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
	;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{d2b04e50-1223-4a10-acbd-066da6e3b25d}">
      <Declaration><![CDATA[{attribute 'object_name' := 'FB_init'}
METHOD FB_init : BOOL
VAR_INPUT
	/// if TRUE, the retain variables are initialized (warm start / cold start)
	bInitRetains: BOOL;
	/// if TRUE, the instance afterwards gets moved into the copy code (online change)
	bInCopyCode: BOOL;
END_VAR
VAR
	iIdx: UINT;
	iLength: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx < iLength) AND (CIf.Job.aCmdList[iIdx].intCmd <> cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx < iLength) THEN
	// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'RUN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
    iIdx := iIdx + 1;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_GRR';
CIf.Info.strFullName := 'Granulate Remote';

// set alarm class
SIf.Alm[E_ALM_GRR.SystemError].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_GRR.SystemError].strText := 'System Error';
SIf.Alm[E_ALM_GRR.PressureError].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_GRR.PressureError].strText := 'Pressure Error';
SIf.Alm[E_ALM_GRR.LowPowderWarning].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_GRR.LowPowderWarning].strText := 'Low Powder';
SIf.Alm[E_ALM_GRR.ManualModeWarning].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_GRR.ManualModeWarning].strText := 'Manual Operation';
SIf.Alm[E_ALM_GRR.ManualModeError].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_GRR.ManualModeError].strText := 'Manual Operation';
SIf.Alm[E_ALM_GRR.LostConnection].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_GRR.LostConnection].strText := 'Lost Connection to the Granulate Machine';

// *******************************************************************************
// initial values
// *******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

me.AlarmConfig.bolEOffAlarmTransitionDisable := TRUE;
me.AlarmConfig.bolOffAlarmTransitionDisable := TRUE;
me.AlarmConfig.bolEOffCmdTransitionDisable := TRUE;
me.AlarmConfig.bolOffCmdTransitionDisable := TRUE;

// configuration
SIf.Cfg.bolManualModeAllowed := FALSE;
SIf.Cfg.rMaxFreq_Hz := 50.0;

// parameter
SIf.Par.rConveyorBelt_Hz		:= SIf.Cfg.rMaxFreq_Hz/2;
SIf.Par.rConveyorVibrator_Hz	:= SIf.Cfg.rMaxFreq_Hz/2;
SIf.Par.rPowderVibrator_Hz		:= SIf.Cfg.rMaxFreq_Hz/2;
SIf.Par.rAirKnife_p				:= 50;
SIf.Par.uinFilterClearingCycleTime_min	:= 4*60;
SIf.Par.udiLowPowderDebounceTime_ms := 2000;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_MANUAL" Id="{da63053a-8d2b-4867-9661-ae51602c0a56}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_MANUAL'}
METHOD PROTECTED sta_MANUAL : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF (SIf.In.bolAutoMode.intern) THEN
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF

	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFFBusy" Id="{f8a302e7-6b01-4806-8faf-6811e11ecba7}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_OFFBusy'}
METHOD PROTECTED sta_OFFBusy : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		SIf.Out.intCommand.intern := cCMD_OFF;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF (SIf.In.bolAutoMode.intern) THEN
		IF (SIf.In.intState.intern = cSTA_OFF) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		ELSIF me.intCmd=Base_PLC.cCMD_RUN AND SIf.In.bolSystemOk.intern THEN
			me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;
		END_IF
	ELSE
		me.StateMachine.intStateNext := GRR_CmdState.cSTA_MANUALBusy;
	END_IF

	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>