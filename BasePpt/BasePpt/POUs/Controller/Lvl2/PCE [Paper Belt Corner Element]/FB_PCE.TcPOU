<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.25">
  <POU Name="FB_PCE" Id="{4fd21a2c-bb8c-40f2-b8bb-db801457e1c0}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PCE EXTENDS FB_CtrlBase
VAR_INPUT
	In_bolPaperAvailable: BOOL;
END_VAR
VAR_OUTPUT
	Out_bolVacuumValveIn: BOOL;
	Out_bolVacuumValveOut: BOOL;
END_VAR
VAR
	/// Specific interface struct for public access
	SIf: T_Ctrl_SIf_PCE;
	///pointer to function block
	p_fbMotorIn: POINTER TO FB_PTB;
	pMotorInCIf: POINTER TO T_Ctrl_CIf;
	p_fbMotorOut: POINTER TO FB_PTB;
	pMotorOutCIf: POINTER TO T_Ctrl_CIf;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Vacuum Pump implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		PC			Start history
___________________________________________________________________________________________________*)


SUPER^();]]></ST>
    </Implementation>
    <Property Name="DriveOut" Id="{035deb5d-95b3-4262-bc5e-78a89e49ce73}">
      <Declaration><![CDATA[PROPERTY DriveOut : POINTER TO FB_PTB
]]></Declaration>
      <Get Name="Get" Id="{b4697998-0b69-4d06-869f-140ec70f916f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[DriveOut := p_fbMotorOut;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f95b0447-ada1-445e-adc7-28d9547aa458}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[p_fbMotorOut := DriveOut;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="sta_RUN" Id="{06e20a87-b11f-46b1-b222-06a5aadf5142}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_RUN'}
METHOD PROTECTED sta_RUN : BOOL
VAR
	iDifference: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		IF SIf.In.bolPaperAvailable.intern THEN
			me.SubStateMachine.intStateNext := PCE_CmdState.cSUB_PAPEREXIT;
		ELSE
			me.SubStateMachine.intStateNext := PCE_CmdState.cSUB_PAPERENTRY;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		CASE me.SubStateMachine.intState OF
			PCE_CmdState.cSUB_PAPERENTRY:
				PaperInputValveActive();
				
				IF SIf.In.bolPaperAvailable.intern THEN
					me.SubStateMachine.intStateNext := PCE_CmdState.cSUB_PAPERENTRYDelay;
				END_IF

				IF me.intCmd = BASE_PLC.cCMD_STOP THEN
					me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
				END_IF
			PCE_CmdState.cSUB_PAPERENTRYDelay:
				IF me.SubStateMachine.udiTimeInState_ms > SIf.Par.uinPaperEntryDelayTime_ms THEN
					me.SubStateMachine.intStateNext := PCE_CmdState.cSUB_PAPEREXIT;
				END_IF
			PCE_CmdState.cSUB_PAPEREXIT:
				PaperExitValveActive();

				IF NOT SIf.In.bolPaperAvailable.intern THEN
					me.SubStateMachine.intStateNext := PCE_CmdState.cSUB_PAPERENTRY;
				END_IF
				
				IF me.SubStateMachine.udiTimeInState_ms > SIf.Par.uinPaperExitTime_ms THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PCE.PaperSensorError),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
				END_IF
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="CtrlSIf" Id="{0bd066fc-5211-4c2e-8575-3afaf461be8b}">
      <Declaration><![CDATA[PROPERTY CtrlSIf : POINTER TO T_Ctrl_SIf_PCE
]]></Declaration>
      <Get Name="Get" Id="{7db522a6-7056-4b38-969f-56f250380177}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CtrlSIf := ADR(SIf);]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d4219c5a-474c-47a0-a477-d329d8e4db1a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="getCmdState" Id="{0fec2fc7-2d33-449b-952a-564156cf70da}">
      <Declaration><![CDATA[{attribute 'object_name' := 'getCmdState'}
METHOD PROTECTED getCmdState : STRING
VAR_INPUT
	intCmdState: INT;
	bolState: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoOutBridge" Id="{23afa553-0fc4-4cd5-8230-8fe04d0a7263}">
      <Declaration><![CDATA[{attribute 'object_name' := 'IoOutBridge'}
METHOD PROTECTED IoOutBridge : BOOL
VAR
	bolSwitchValvesOff: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolVacuumValveIn));
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolVacuumValveOut));

	THIS^.Out_bolVacuumValveIn := SIf.Out.bolVacuumValveIn.map;
	THIS^.Out_bolVacuumValveOut := SIf.Out.bolVacuumValveOut.map;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="CtrlInit" Id="{387abafe-89c8-47bf-a231-68d7a321f196}">
      <Declaration><![CDATA[{attribute 'object_name' := 'CtrlInit'}
METHOD CtrlInit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CtrlInit();

pMotorInCIf := p_fbMotorIn^.CtrlCIf;
pMotorOutCIf := p_fbMotorOut^.CtrlCIf;

AddChild(p_fbMotorIn^);
AddChild(p_fbMotorOut^);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERROR" Id="{43b92eab-1a74-4406-b5b6-eee25283ac3c}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_ERROR'}
METHOD PROTECTED sta_ERROR : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -> possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		p_fbMotorIn^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
		p_fbMotorOut^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERRORQuit" Id="{4e86f430-473b-4029-a8d4-bcc12fbbf9ef}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_ERRORQuit'}
METHOD PROTECTED sta_ERRORQuit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory<=BASE_PLC.cSTA_PON) THEN
				me.StateMachine.intStateNext := BASE_PLC.cSTA_PONBusy;
			END_IF;

			CASE me.intCmd OF
				BASE_PLC.cCMD_OFF:
					me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
				BASE_PLC.cCMD_RUN:
					me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
			ELSE
				CASE me.StateMachine.intStateHistory OF
					BASE_PLC.cSTA_RUN:
						me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
					BASE_PLC.cSTA_OFF:
						me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
					BASE_PLC.cSTA_STOP:
						me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
				END_CASE
			END_CASE
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoInBridge" Id="{514f0bd3-a77d-444f-aa66-ac5421ca0c93}">
      <Declaration><![CDATA[{attribute 'object_name' := 'IoInBridge'}
METHOD PROTECTED IoInBridge : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
SIf.In.bolPaperAvailable.map := THIS^.In_bolPaperAvailable;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPaperAvailable));
ELSE
	;//simulation of global IO
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFFBusy" Id="{68549a43-8f3c-46c0-88e9-4b8b2c11d738}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_OFFBusy'}
METHOD PROTECTED sta_OFFBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		p_fbMotorIn^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		p_fbMotorOut^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		SIf.Out.bolVacuumValveIn.intern := FALSE;		
		SIf.Out.bolVacuumValveOut.intern := FALSE;		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF p_fbMotorIn^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_OFF 
		  AND p_fbMotorOut^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_OFF THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFF" Id="{7385f6d9-115b-4a01-a0b2-2988f9a09e5a}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_OFF'}
METHOD PROTECTED sta_OFF : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF me.intCmd = BASE_PLC.cCMD_RUN THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Action Name="PaperExitValveActive" Id="{8bd2a422-e20f-4594-87f1-a38d2d61bbb7}">
      <Implementation>
        <ST><![CDATA[SIf.Out.bolVacuumValveIn.intern := FALSE;
SIf.Out.bolVacuumValveOut.intern := TRUE;
]]></ST>
      </Implementation>
    </Action>
    <Method Name="sta_RUNBusy" Id="{93e21abe-e0d0-4102-9a53-8ecf8bcd85b6}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_RUNBusy'}
METHOD PROTECTED sta_RUNBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		p_fbMotorIn^.CtrlCIf^.Job.intACmd :=BASE_PLC.cCMD_RUN;
		p_fbMotorOut^.CtrlCIf^.Job.intACmd :=BASE_PLC.cCMD_RUN;
		
		IF SIf.In.bolPaperAvailable.intern THEN
			PaperExitValveActive();
		ELSE
			PaperInputValveActive();
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (p_fbMotorIn^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_RUN) 
		  AND (p_fbMotorOut^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_RUN) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
		END_IF

		IF me.intCmd = BASE_PLC.cCMD_STOP THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_STOP" Id="{a80829eb-cce3-43ab-b021-8c690cb7b935}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_STOP'}
METHOD PROTECTED sta_STOP : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF me.intCmd = BASE_PLC.cCMD_RUN THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Always" Id="{aeb9935e-08bd-483a-ac88-c1417761b0ed}">
      <Declaration><![CDATA[{attribute 'object_name' := 'Always'}
METHOD PROTECTED Always : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState<>cSTA_SINGLE_ANSWER) THEN
	
	; // always error supervision
	
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF) OR (me.intCmd=BASE_PLC.cCMD_EOFF))
		 AND (me.StateMachine.intState<>cSTA_ERROR) AND (me.StateMachine.intState<>cSTA_ERRORQuit) AND
		(me.StateMachine.intState<>cSTA_OFF) AND (me.StateMachine.intState<>cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{b1ee4999-7c58-4771-8d2e-3c2b426ff35b}">
      <Declaration><![CDATA[{attribute 'object_name' := 'StateMachine'}
METHOD PROTECTED StateMachine : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    BASE_PLC.cSTA_RUN: 
        THIS^.sta_RUN();
    BASE_PLC.cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
    BASE_PLC.cSTA_STOP: 
        THIS^.sta_STOP();
    BASE_PLC.cSTA_STOPBusy: 
        THIS^.sta_STOPBusy();
END_CASE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{b591f551-ab59-403b-868a-a874b4abbbc3}">
      <Declaration><![CDATA[{attribute 'object_name' := 'FB_init'}
METHOD FB_init : BOOL
VAR_INPUT
	/// if TRUE, the retain variables are initialized (warm start / cold start)
	bInitRetains: BOOL;
	/// if TRUE, the instance afterwards gets moved into the copy code (online change)
	bInCopyCode: BOOL;
END_VAR
VAR
	iIdx: UINT;
	iLength: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx < iLength) AND (CIf.Job.aCmdList[iIdx].intCmd <> cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx < iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'Run'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_STOP;
	CIf.Job.aCmdList[iIdx].strName := 'Stop'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_PCE'; 

// set alarm class

SIf.Alm[E_ALM_PCE.PaperSensorError].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_PCE.PaperSensorError].strText := 'Paper detected to long' ;


//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parameter
SIf.Par.uinPaperExitTime_ms			:= 3000;
SIf.Par.uinSimPaperExitTime_ms		:= SIf.Par.uinPaperExitTime_ms / 2;
SIf.Par.uinPaperEntryDelayTime_ms   := 220;]]></ST>
      </Implementation>
    </Method>
    <Action Name="PaperInputValveActive" Id="{c7287faa-248e-404e-8b1f-620edc0ce793}">
      <Implementation>
        <ST><![CDATA[SIf.Out.bolVacuumValveIn.intern := TRUE;
SIf.Out.bolVacuumValveOut.intern := FALSE;
]]></ST>
      </Implementation>
    </Action>
    <Method Name="getCtrlSIf" Id="{d7e44b5c-69a6-42a3-8b01-0842a83109a4}">
      <Declaration><![CDATA[{attribute 'object_name' := 'getCtrlSIf'}
METHOD getCtrlSIf : POINTER TO T_Ctrl_SIf_PCE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCtrlSIf := ADR(SIf);]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_PON" Id="{f1f785fe-f693-44ff-9901-c94758bcbfdd}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_PON'}
METHOD PROTECTED sta_PON : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		;
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="DriveIn" Id="{f24a8ae5-3ac7-443a-b59c-2cc3fe23592b}">
      <Declaration><![CDATA[PROPERTY DriveIn : POINTER TO FB_PTB
]]></Declaration>
      <Get Name="Get" Id="{64680d00-e7e4-40be-bcbd-9af91aa982d1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[DriveIn := p_fbMotorIn;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c43cf49e-0344-4449-b4e5-bd234c9ab6a9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[p_fbMotorIn := DriveIn;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="sta_STOPBusy" Id="{fd0a33b5-de2d-4135-971c-e51fe1c481b0}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_STOPBusy'}
METHOD PROTECTED sta_STOPBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		p_fbMotorIn^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
		p_fbMotorOut^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF p_fbMotorIn^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_STOP 
		  AND p_fbMotorOut^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_STOP  THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_STOP;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties />
  </POU>
</TcPlcObject>