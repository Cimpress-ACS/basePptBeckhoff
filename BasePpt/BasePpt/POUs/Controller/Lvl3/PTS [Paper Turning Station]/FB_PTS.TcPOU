<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.25">
  <POU Name="FB_PTS" Id="{bd257b07-83b0-47f5-9382-67ec01275ca0}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PTS EXTENDS FB_CtrlBase
VAR_INPUT
	In_bol_PaperAvailable				: BOOL;
	In_bol_PaperAtBeltExit				: BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	/// Specific interface struct for public access
	SIf					: T_Ctrl_SIf_PTS;
	///pointer to function block
	p_fbBelt							: POINTER TO FB_PTB;
	pBeltCIf							: POINTER TO BASE_PLC.T_Ctrl_CIf;
	p_fbMalteser						: POINTER TO FB_MDC;
	pMalteserCIf						: POINTER TO BASE_PLC.T_Ctrl_CIf;
	intSubState							: INT;
	
	bolPrePositionBusy					: BOOL;
	intActualPosition							: INT;
	intTargetPosition							: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Destacker/Buffer implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		PC			Start history
___________________________________________________________________________________________________*)


SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -> init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)]]></ST>
    </Implementation>
    <Method Name="sta_STOPbusy" Id="{01db8d43-ebef-47de-8465-8adeb8882b1b}">
      <Declaration><![CDATA[METHOD PROTECTED sta_STOPbusy : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (pBeltCIf^.Job.intState = BASE_PLC.cSTA_OFF) OR (pBeltCIf^.Job.intState = BASE_PLC.cSTA_STOP) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_STOP;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_STANDBY" Id="{0b6b3c84-be71-4304-a7e5-fc75217832dd}">
      <Declaration><![CDATA[METHOD PROTECTED sta_STANDBY : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
		CIf.Job.intMCmd := BASE_PLC.cCMD_DONE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Always" Id="{164552b3-3b0d-448b-b376-8ba5c6a0538a}">
      <Declaration><![CDATA[METHOD PROTECTED Always : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState<>cSTA_SINGLE_ANSWER) THEN
	
	; // always error supervision
	
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF) OR (me.intCmd=BASE_PLC.cCMD_EOFF))
		 AND (me.StateMachine.intState<>cSTA_ERROR) AND (me.StateMachine.intState<>cSTA_ERRORQuit) AND
		(me.StateMachine.intState<>cSTA_OFF) AND (me.StateMachine.intState<>cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_PON" Id="{2622306b-e86c-4cc7-bc2a-35193ac6c545}">
      <Declaration><![CDATA[METHOD PROTECTED sta_PON : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		;
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERROR" Id="{35fc313d-486d-46b7-8f40-2120c017b66a}">
      <Declaration><![CDATA[METHOD PROTECTED sta_ERROR : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -> possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		pMalteserCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="CtrlInit" Id="{5706b448-cb48-4c12-a649-6d12f95a558d}">
      <Declaration><![CDATA[METHOD PUBLIC CtrlInit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CtrlInit();

THIS^.AddChild(p_fbMalteser^);
THIS^.AddChild(p_fbBelt^);

pMalteserCIf := p_fbMalteser^.CtrlCIf;
pBeltCIf := p_fbBelt^.CtrlCIf;

(*
// set parent id
pMalteserCIf^.Info.intParentCtrlId := CIf.Info.intCtrlId;			
pBeltCIf^.Info.intParentCtrlId := CIf.Info.intCtrlId;			

//necessary???
THIS^.CIf.Info.p_aCIf[0] := pMalteserCIf;
THIS^.CIf.Info.p_aCIf[1] := pBeltCIf;
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_GetItemBusy" Id="{58c25ed3-12cf-487f-a099-f04cee8a4206}">
      <Declaration><![CDATA[METHOD PROTECTED sta_GetItemBusy : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{5a67377e-e314-4a8d-8824-81e2fd518669}">
      <Declaration><![CDATA[METHOD PROTECTED StateMachine : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    PTS_CmdState.cSTA_STANDBYBusy: 
        THIS^.sta_STANDBYBusy();
    PTS_CmdState.cSTA_STANDBY: 
        THIS^.sta_STANDBY();
    BASE_PLC.cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
    BASE_PLC.cSTA_RUN: 
        THIS^.sta_RUN();
    BASE_PLC.cSTA_STOPBusy: 
        THIS^.sta_STOPBusy();
    BASE_PLC.cSTA_STOP: 
        THIS^.sta_STOP();
    PTS_CmdState.cSTA_PaperDelayBusy: 
        THIS^.sta_PaperDelayBusy();
    PTS_CmdState.cSTA_TurnPaperBusy: 
        THIS^.sta_TurnPaperBusy();
    PTS_CmdState.cSTA_WaitPaperGone: 
        THIS^.sta_WaitPaperGone();
    PTS_CmdState.cSTA_TurnEmptyBusy: 
        THIS^.sta_TurnEmptyBusy();
    PTS_CmdState.cSTA_InitializeBusy: 
        THIS^.sta_InitializeBusy();
    PTS_CmdState.cSTA_WaitPaper: 
        THIS^.sta_WaitPaper();
    PTS_CmdState.cSTA_GetItemBusy: 
        THIS^.sta_GetItemBusy();
END_CASE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_STOP" Id="{5b991841-d391-4d54-8cf8-89103fb29dd1}">
      <Declaration><![CDATA[METHOD PROTECTED sta_STOP : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
		CIf.Job.intMCmd := BASE_PLC.cCMD_DONE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUNBusy" Id="{5e5c2e05-b1fb-47b8-b0d6-76b587c98d5e}">
      <Declaration><![CDATA[METHOD PROTECTED sta_RUNBusy : BOOL
VAR_INPUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	CASE SIf.Par.eMode OF
		E_PTS_MODE.Automatic:
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.ModeParameter),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
(*
			IF SIf.Cfg.bolBarcodeReaderAvailable (* AND BCR has a new barcode read *) THEN
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_GetItemBusy;
			ELSE
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.ModeParameter),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
*)
		E_PTS_MODE.Distribute:
			SIf.Cur.rInOutPosition := SIf.Cfg.aFixPosDef[SIf.Cfg.aDistributionPositionDefinition[SIf.Cur.iActualDistributionIndex]];

		ELSE
			SIf.Cur.rInOutPosition := SIf.Cfg.aFixPosDef[SIf.Par.eMode];
	END_CASE

	p_fbMalteser^.CtrlSIf^.Par.intTurnDirection := E_TURN_DIRECTION.AUTOMATIC;
	p_fbMalteser^.CtrlSIf^.Par.uinPositionToGo := SIf.Cur.rInOutPosition.uinOutput;

	IF SIf.Cfg.bolPositionMalteserEnable THEN
		p_fbMalteser^.CtrlCIf^.Job.intACmd := MDC_CmdState.cCMD_PREPOSITION;

		me.SubStateMachine.intState := PTS_CmdState.cSUB_PREPOSITIONbusy;
		me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_PREPOSITIONbusy;
	ELSE	
		p_fbMalteser^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;

		me.SubStateMachine.intState := PTS_CmdState.cSUB_WAIT_DONE;
		me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_WAIT_DONE;
	END_IF
	
	p_fbBelt^.CtrlSIf^.Par.intDirection := E_BELT_DIRECTION.FORWARD;
	pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	//--------------------------------------------------------------------------------------
	// sub state machine for sequence
	CASE me.SubStateMachine.intState OF
		//--------------------------------------------------------------------------------------
		PTS_CmdState.cSUB_PREPOSITIONbusy:
			IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_PREPOSITION) THEN
				p_fbMalteser^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
				me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_WAIT_DONE;
			END_IF
		//--------------------------------------------------------------------------------------
		PTS_CmdState.cSUB_WAIT_DONE:
			IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) 
			  AND (pBeltCIf^.Job.intState = BASE_PLC.cSTA_RUN) THEN
	//			SIf.Cur.udiPaperInTurnDelayTime := 150000 / p_fbBelt^.CtrlSIf^.Par.uinBeltSpeed;
	//			SIf.Cur.udiPaperOutTurnDelayTime := CalculateOutputDelay(p_fbBelt^.CtrlSIf^.Par.uinBeltSpeed,SIf.Cur.udiPaperInTurnDelayTime);
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
			END_IF
		//--------------------------------------------------------------------------------------
	END_CASE
	
	IF SIf.In.bolPaperAvailable.intern THEN
		me.StateMachine.intStateNext := PTS_CmdState.cSTA_WaitPaper;
	END_IF
END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
	;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFFBusy" Id="{78469b7c-2cb2-4378-a36e-e14060df63ae}">
      <Declaration><![CDATA[METHOD PROTECTED sta_OFFBusy : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		pMalteserCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		SIf.Cur.iActualDistributionIndex := 0;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (pBeltCIf^.Job.intState = BASE_PLC.cSTA_OFF) AND (pMalteserCIf^.Job.intState = BASE_PLC.cSTA_OFF) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCtrlSIf" Id="{85c44689-8216-48cb-97bc-2ea492d20fef}">
      <Declaration><![CDATA[METHOD getCtrlSIf : POINTER TO T_Ctrl_SIf_PTS

]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCtrlSIf := ADR(SIf);]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_WaitPaper" Id="{991b29dd-4464-4af1-97be-72af666fb5ff}">
      <Declaration><![CDATA[METHOD PROTECTED sta_WaitPaper : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		IF ((me.StateMachine.udiTimeInState_ms > SIf.Par.udiPaperBarcodeToInputSensorTime) AND (SIf.Cfg.bolEntrySensorAvailable)) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.PaperTransport),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
		END_IF
		
		IF (SIf.In.bolPaperAvailable.intern)  THEN
			IF SIf.Par.udiPaperInTurnDelayTime = 0 THEN
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_TurnPaperBusy;
			ELSE	
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_PaperDelayBusy;
			END_IF
		END_IF
		
		CASE me.intCmd OF
			PTS_CmdState.cCMD_STANDBY:
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_InitializeBusy;
			Base_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := Base_PLC.cSTA_STOPBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoOutBridge" Id="{99d47f56-5e6d-4dec-965e-cec44ba13842}">
      <Declaration><![CDATA[METHOD PROTECTED IoOutBridge : BOOL
VAR
	bolSwitchValvesOff: BOOL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_PaperDelayBusy" Id="{a18788bc-fa22-4a4f-b49d-f91d074849b5}">
      <Declaration><![CDATA[METHOD PROTECTED sta_PaperDelayBusy : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		IF (me.StateMachine.udiTimeInState_ms > SIf.Par.udiPaperInTurnDelayTime) THEN
			me.StateMachine.intStateNext := PTS_CmdState.cSTA_TurnPaperBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoInBridge" Id="{a67dc199-db93-48b1-a704-a521356a69d3}">
      <Declaration><![CDATA[METHOD PROTECTED IoInBridge : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
SIf.In.bolPaperAvailable.map			:= NOT THIS^.In_bol_PaperAvailable;
SIf.In.bolPaperAtBeltExit.map			:= THIS^.In_bol_PaperAtBeltExit;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPaperAvailable));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPaperAtBeltExit));
ELSE
	SIf.In.bolPaperAvailable.map		:= FALSE;
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPaperAvailable));
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUN" Id="{abf5b4ec-b132-4fa1-9626-48c1c86395a3}">
      <Declaration><![CDATA[METHOD PROTECTED sta_RUN : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
		CIf.Job.intMCmd := BASE_PLC.cCMD_DONE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		CASE SIf.Par.eMode OF
			E_PTS_MODE.Automatic:
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.ModeParameter),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	(*
				IF SIf.Cfg.bolBarcodeReaderAvailable (* AND BCR has a new barcode read *) THEN
					me.StateMachine.intStateNext := PTS_CmdState.cSTA_GetItemBusy;
				ELSE
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.ModeParameter),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				END_IF
	*)
			E_PTS_MODE.Distribute:
				IF ((NOT SIf.Cfg.bolEntrySensorAvailable) OR (SIf.In.bolPaperAtBeltExit.intern)) THEN
//					SIf.Cur.rInOutPosition := SIf.Cfg.aFixPosDef[SIf.Cfg.aDistributionPositionDefinition[SIf.Cur.iActualDistributionIndex]];
					me.StateMachine.intStateNext := PTS_CmdState.cSTA_WaitPaper;
				END_IF
			ELSE
				IF ((NOT SIf.Cfg.bolEntrySensorAvailable) OR (SIf.In.bolPaperAtBeltExit.intern)) THEN
//					SIf.Cur.rInOutPosition := SIf.Cfg.aFixPosDef[SIf.Par.eMode];
					me.StateMachine.intStateNext := PTS_CmdState.cSTA_WaitPaper;
				END_IF
		END_CASE

		CASE me.intCmd OF
			BASE_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			PTS_CmdState.cCMD_STANDBY:
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_STANDBYBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCmdState" Id="{b24986c9-332c-42d7-a5f8-1e0610d79b30}">
      <Declaration><![CDATA[METHOD PROTECTED getCmdState : STRING

VAR_INPUT
	intCmdState: INT;
	bolState: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		CASE intCmdState OF
			PTS_CmdState.cCMD_STANDBY: 
				getCmdState := 'cCMD_STANDBY';
			PTS_CmdState.cCMD_TURN: 
				getCmdState := 'cCMD_TURN';
		END_CASE;
	ELSE
		// States's
		CASE intCmdState OF
			PTS_CmdState.cSTA_EmptyDelayBusy: 
				getCmdState := 'cSTA_EmptyDelayBusy';
			PTS_CmdState.cSTA_GetItemBusy: 
				getCmdState := 'cSTA_GetItemBusy';
			PTS_CmdState.cSTA_InitializeBusy: 
				getCmdState := 'cSTA_InitializeBusy';
			PTS_CmdState.cSTA_PaperDelayBusy: 
				getCmdState := 'cSTA_PaperDelayBusy';
			PTS_CmdState.cSTA_STANDBY: 
				getCmdState := 'cSTA_STANDBY';
			PTS_CmdState.cSTA_STANDBYBusy: 
				getCmdState := 'cSTA_STANDBYBusy';
			PTS_CmdState.cSTA_TurnEmptyBusy: 
				getCmdState := 'cSTA_TurnEmptyBusy';
			PTS_CmdState.cSTA_TurnPaperBusy: 
				getCmdState := 'cSTA_TurnPaperBusy';
			PTS_CmdState.cSTA_WaitPaper: 
				getCmdState := 'cSTA_WaitPaper';
			PTS_CmdState.cSTA_WaitPaperGone: 
				getCmdState := 'cSTA_WaitPaperGone';
		END_CASE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_TurnEmptyBusy" Id="{bec4c34f-4125-4663-82bb-47177b0c7eee}">
      <Declaration><![CDATA[METHOD PROTECTED sta_TurnEmptyBusy : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		p_fbMalteser^.CtrlSIf^.Par.intTurnDirection := E_TURN_DIRECTION.AUTOMATIC;
		p_fbMalteser^.CtrlSIf^.Par.uinPositionToGo := SIf.Cur.rInOutPosition.uinInput;
		
		IF SIf.Cur.rInOutPosition.uinInput = p_fbMalteser^.CtrlSIf^.Cur.uintActualPosition THEN
			p_fbMalteser^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
			me.SubStateMachine.intState := PTS_CmdState.cSUB_WAIT_DONE;
			me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_WAIT_DONE;
		ELSE	
			p_fbMalteser^.CtrlCIf^.Job.intACmd := MDC_CmdState.cCMD_TURN;
			me.SubStateMachine.intState := PTS_CmdState.cSUB_TURNbusy;
			me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNbusy;
		END_IF

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		//--------------------------------------------------------------------------------------
		// sub state machine for sequence
		CASE me.SubStateMachine.intState OF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSUB_TURNbusy :
				IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_TURNDONE) THEN
					p_fbMalteser^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
					me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_WAIT_DONE;
				END_IF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSUB_WAIT_DONE:
				IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) THEN
					IF SIf.Par.eMode = E_PTS_MODE.Distribute THEN
						SIf.Cur.iActualDistributionIndex := (SIf.Cur.iActualDistributionIndex + 1) MOD PTS_CmdState.cPTS_MAX_DISTRIBUTION;	
					END_IF

					me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
				END_IF
			//--------------------------------------------------------------------------------------
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="CalculateOutputDelay" Id="{c0233501-e376-453a-8e63-0204e2a6a829}">
      <Declaration><![CDATA[METHOD PRIVATE CalculateOutputDelay : UDINT
VAR_INPUT
	uinBeltSpeed		: UINT;
	udiInputDelay		: UDINT;
END_VAR
VAR
	relBeltSpeed		: LREAL;
	relInputDelay		: LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[relBeltSpeed := UINT_TO_REAL(uinBeltSpeed);
relInputDelay := UDINT_TO_LREAL(udiInputDelay);
CalculateOutputDelay := LREAL_TO_UDINT((1000.0*(750.0 - ((relBeltSpeed/1000)*(750.0+relInputDelay))))/relBeltSpeed);]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_InitializeBusy" Id="{c0ca2e02-8d80-4c87-8acd-42976ef41929}">
      <Declaration><![CDATA[METHOD PROTECTED sta_InitializeBusy : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		pMalteserCIf^.Job.intACmd := MDC_CmdState.cCMD_INITIALIZE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (pMalteserCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) THEN
			me.StateMachine.intStateNext := PTS_CmdState.cSTA_STANDBYBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Belt" Id="{c4814598-9422-4ee0-ad23-d1f7e9e80e96}">
      <Declaration><![CDATA[PROPERTY PUBLIC Belt :  POINTER TO FB_PTB]]></Declaration>
      <Get Name="Get" Id="{58ce1241-a296-44de-abcd-58a20341b8a2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Belt := p_fbBelt;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{705d930c-02a0-4b89-93a1-5069f7c6c256}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[p_fbBelt := Belt;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="sta_OFF" Id="{cc943c63-b19e-4ace-92c2-e8d38b08f79e}">
      <Declaration><![CDATA[METHOD PROTECTED sta_OFF : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			BASE_PLC.cCMD_RUN : 
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_InitializeBusy;
			PTS_CmdState.cCMD_STANDBY : 
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_InitializeBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetItemBusy" Id="{d2972c9d-506c-4573-8ddf-a3cb32abefac}">
      <Declaration><![CDATA[METHOD PROTECTED GetItemBusy : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="CtrlSIf" Id="{d382c503-5f8e-4349-b8c0-1835d6e9f7d6}">
      <Declaration><![CDATA[PROPERTY PUBLIC CtrlSIf : POINTER TO T_Ctrl_SIf_PTS]]></Declaration>
      <Get Name="Get" Id="{9890e175-825a-40e9-a2e6-bff0291d67d3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CtrlSIf := ADR(SIf);]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{abf155ea-95c1-4a72-bafb-a14e8d51c067}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Malteser" Id="{da165104-4d4f-4ce9-a8d5-5e4f3ee654d9}">
      <Declaration><![CDATA[PROPERTY PUBLIC Malteser :  POINTER TO FB_MDC]]></Declaration>
      <Get Name="Get" Id="{8f6d8821-d86a-470b-9ada-f9237f937a03}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Malteser := p_fbMalteser;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a5b29bfc-c795-43ab-ab0a-499f6046dcd5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[p_fbMalteser := Malteser;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="sta_STANDBYBusy" Id="{dcbfc78c-e6fd-4171-bb92-b4ab18e284a8}">
      <Declaration><![CDATA[METHOD PROTECTED sta_STANDBYBusy : BOOL
VAR_INPUT
END_VAR
VAR
	uinPositionToGo			: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		CASE SIf.Par.eMode OF
			E_PTS_MODE.Automatic:
				uinPositionToGo := SIf.Cfg.aDefaultAutoPos;
			E_PTS_MODE.Distribute:
				uinPositionToGo := SIf.Cfg.aFixPosDef[SIf.Cfg.aDistributionPositionDefinition[SIf.Cur.iActualDistributionIndex]].uinInput;
			ELSE
				uinPositionToGo := SIf.Cfg.aFixPosDef[SIf.Par.eMode].uinInput;
		END_CASE

		p_fbMalteser^.SetPositionToGo(uinPositionToGo);
		
		IF p_fbMalteser^.ActualPosition <> uinPositionToGo THEN
			pMalteserCIf^.Job.intACmd := MDC_CmdState.cCMD_TURN;
		END_IF;
		
		pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
		
		me.SubStateMachine.intState 	:= PTS_CmdState.cSUB_TURNbusy;
		me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNbusy;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.SubStateMachine.intState OF
			PTS_CmdState.cSUB_TURNbusy:
				IF    (p_fbMalteser^.CtrlSIf^.Cur.uintActualPosition = p_fbMalteser^.CtrlSIf^.Par.uinPositionToGo) 
				  AND (  (pMalteserCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) 
 					   OR(pMalteserCIf^.Job.intState = MDC_CmdState.cSTA_TURNDONE))THEN 
					pMalteserCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
					me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNDONE;
				END_IF
			PTS_CmdState.cSUB_TURNDONE:
				IF (pMalteserCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) 
				  AND ((pBeltCIf^.Job.intState = BASE_PLC.cSTA_OFF) OR (pBeltCIf^.Job.intState = BASE_PLC.cSTA_STOP)) THEN
					me.StateMachine.intStateNext := PTS_CmdState.cSTA_STANDBY;
				END_IF
		END_CASE	
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERRORQuit" Id="{e508ce12-f3cd-4fbf-985a-a842472d7ddb}">
      <Declaration><![CDATA[METHOD PROTECTED sta_ERRORQuit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory<=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PONBusy;
			ELSE
				IF me.intCmd >= 0 THEN
					CASE me.intCmd OF
						cCMD_OFF:
							me.StateMachine.intStateNext := cSTA_OFFBusy;
						cCMD_RUN:
							me.StateMachine.intStateNext := cSTA_STOPBusy;
						cCMD_STOP:
							me.StateMachine.intStateNext := cSTA_RUNBusy;
					END_CASE
				ELSE
					CASE me.StateMachine.intStateHistory OF
						cSTA_PaperDelayBusy,cSTA_TurnPaperBusy,
						cSTA_WaitPaperGone,cSTA_EmptyDelayBusy,
						cSTA_TurnEmptyBusy,cSTA_WaitPaper,
						cSTA_RUNBusy, cSTA_RUN:
							me.StateMachine.intStateNext := cSTA_RUNBusy;
					ELSE
						me.StateMachine.intStateNext := cSTA_OFFBusy;
					END_CASE
				END_IF
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{e614848a-4b28-47f0-bf8f-65f5183f1e88}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
VAR
	iIdx		: UINT;
	iLength		: UINT;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx < iLength) AND (CIf.Job.aCmdList[iIdx].intCmd <> cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx < iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'RUN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_STOP;
	CIf.Job.aCmdList[iIdx].strName := 'STOP'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := PTS_CmdState.cCMD_STANDBY;
	CIf.Job.aCmdList[iIdx].strName := 'STANDBY'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := PTS_CmdState.cCMD_TURN;
	CIf.Job.aCmdList[iIdx].strName := 'TURN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_PTS'; 

// set alarm class
SIf.Alm[E_ALM_PTS.PaperTransport].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_PTS.PaperTransport].strText := 'Possible Paper Jam';
SIf.Alm[E_ALM_PTS.ModeParameter].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_PTS.ModeParameter].strText := 'Wrong Mode Parameter';

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// configuration
SIf.Cfg.bolPositionMalteserEnable := TRUE;

// parameter
SIf.Cfg.bolBarcodeReaderAvailable := FALSE;
SIf.Cfg.aDefaultAutoPos := 0;
SIf.Cfg.aFixPosDef[E_PTS_MODE.FixA].uinInput := 0;
SIf.Cfg.aFixPosDef[E_PTS_MODE.FixA].uinOutput := 1;
SIf.Cfg.aFixPosDef[E_PTS_MODE.FixB].uinInput := 3;
SIf.Cfg.aFixPosDef[E_PTS_MODE.FixB].uinOutput := 2;
SIf.Cfg.aFixPosDef[E_PTS_MODE.FixC].uinInput := 0;
SIf.Cfg.aFixPosDef[E_PTS_MODE.FixC].uinOutput := 0;
SIf.Cfg.aAutoPosDef[0].uinInput := 0;
SIf.Cfg.aAutoPosDef[0].uinOutput := 0;
SIf.Cfg.aAutoPosDef[1].uinInput := 0;
SIf.Cfg.aAutoPosDef[1].uinOutput := 1;
SIf.Cfg.aDistributionPositionDefinition[0] := E_PTS_MODE.FixC; 
SIf.Cfg.aDistributionPositionDefinition[1] := E_PTS_MODE.FixA; 
SIf.Par.eMode := E_PTS_MODE.FixC;
SIf.Par.udiPaperBarcodeToInputSensorTime := 2000;
SIf.Par.udiPaperInTurnDelayTime := 000;
SIf.Par.udiPaperOutTurnDelayTime := 300;
SIf.Par.udiSimPaperBarcodeToInputSensorTime := SIf.Par.udiPaperBarcodeToInputSensorTime / 2;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_TurnPaperBusy" Id="{e645f96a-ef54-4fd4-8ed9-201b0c267f9f}">
      <Declaration><![CDATA[METHOD PROTECTED sta_TurnPaperBusy : BOOL
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
//		Log Message ---------------------
//		TC2_SYSTEM.ADSLOGSTR(ADSLOG_MSGTYPE_LOG,'%s','sta_TurnPaperBusy');
//		---------------------------------
		p_fbMalteser^.CtrlSIf^.Par.intTurnDirection := SIf.Cur.rInOutPosition.eDirection;
		p_fbMalteser^.CtrlSIf^.Par.uinPositionToGo := SIf.Cur.rInOutPosition.uinOutput;
		
		IF SIf.Cur.rInOutPosition.uinOutput = p_fbMalteser^.CtrlSIf^.Cur.uintActualPosition THEN
			me.StateMachine.intStateNext := PTS_CmdState.cSTA_WaitPaperGone;
		ELSE	
			p_fbMalteser^.CtrlCIf^.Job.intACmd := MDC_CmdState.cCMD_TURN;
			me.SubStateMachine.intState := PTS_CmdState.cSUB_TURNbusy;
			me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNbusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		//--------------------------------------------------------------------------------------
		// sub state machine for sequence
		CASE me.SubStateMachine.intState OF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSUB_TURNbusy:
				IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_TURNDONE) THEN
					p_fbMalteser^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
					me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNDONE;
				END_IF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSUB_TURNDONE:
				IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) THEN
				    IF NOT SIf.In.bolPaperAvailable.intern THEN
						pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.PaperTransport),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					END_IF

					me.StateMachine.intStateNext := PTS_CmdState.cSTA_WaitPaperGone;
				END_IF
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ChangeDistributionModeParameter" Id="{fb2fd6a5-a0b0-4d51-814c-c8f69a7240b4}">
      <Declaration><![CDATA[METHOD PUBLIC ChangeDistributionModeParameter : BOOL
VAR_INPUT
	eMode							: E_PTS_MODE;
	uinBeltSpeed					: UINT;
	uinRotationSpeed				: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SIf.Par.eMode := eMode;
p_fbBelt^.CtrlSIf^.Par.rBeltParam.uinBeltSpeed := uinBeltSpeed;		
p_fbMalteser^.Drive^.CtrlSIf^.Par.uinSpeed_rpm := uinRotationSpeed;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_WaitPaperGone" Id="{ffece3a2-7f16-4ca6-a709-ed3cf1857944}">
      <Declaration><![CDATA[METHOD PROTECTED sta_WaitPaperGone : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		IF (SIf.Cur.rInOutPosition.uinInput <> p_fbMalteser^.CtrlSIf^.Cur.uintActualPosition)
		  AND SIf.Cfg.bolPositionMalteserEnable THEN
			p_fbMalteser^.CtrlSIf^.Par.intTurnDirection := E_TURN_DIRECTION.AUTOMATIC;
			p_fbMalteser^.CtrlSIf^.Par.uinPositionToGo := SIf.Cur.rInOutPosition.uinInput;
			p_fbMalteser^.CtrlCIf^.Job.intACmd := MDC_CmdState.cCMD_PREPOSITION;
		END_IF

		me.SubStateMachine.intState := cSTA_WaitPaperGone;
		me.SubStateMachine.intStateNext := cSTA_WaitPaperGone;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		// sub state machine for sequence
		CASE me.SubStateMachine.intState OF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSTA_WaitPaperGone:
				IF NOT SIf.In.bolPaperAvailable.intern THEN
					me.SubStateMachine.intStateNext := cSUB_DELAYbusy;
				END_IF

				IF (me.SubStateMachine.udiTimeInState_ms > SIf.Par.udiPaperBarcodeToInputSensorTime) THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.PaperTransport),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;
				END_IF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSUB_DELAYbusy:
			  	IF SIf.Par.udiPaperOutTurnDelayTime = 0 THEN
					me.StateMachine.intStateNext := PTS_CmdState.cSTA_TurnEmptyBusy;
				ELSE	
					IF (me.StateMachine.udiTimeInState_ms > SIf.Par.udiPaperOutTurnDelayTime) THEN
						me.StateMachine.intStateNext := PTS_CmdState.cSTA_TurnEmptyBusy;
					END_IF
				END_IF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSUB_PREPOSITIONbusy:
				IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_PREPOSITION) THEN
					p_fbMalteser^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
					me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_WAIT_DONE;
				END_IF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSUB_WAIT_DONE:
				IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) THEN
					me.SubStateMachine.intStateNext := cSTA_WaitPaperGone;
				END_IF
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="POUImageProperty">
            <n n="ImageData" />
            <v n="TransparencyColor">"White"</v>
            <v n="MakeTransparent">false</v>
          </o>
        </Data>
        <TypeList>
          <Type n="Boolean">System.Boolean</Type>
          <Type n="POUImageProperty">{bb741845-1ec5-4be9-bb0d-2cf7058af574}</Type>
          <Type n="String">System.String</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
  </POU>
</TcPlcObject>