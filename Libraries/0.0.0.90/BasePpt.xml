<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="Beckhoff Automation GmbH" productName="TwinCAT PLC Control" productVersion="3.5.6.0" creationDateTime="2015-05-28T16:00:50.6422414" />
  <contentHeader name="BasePpt" modificationDateTime="2015-05-28T16:00:50.6452414">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation />
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous />
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/application" handleUnknown="implementation">
      <resource name="BasePpt">
        <globalVars name="Constants" constant="true">
          <variable name="MAX_INT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="32767" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Oven
 ----------------------------------------------------------------------</xhtml>
            </documentation>
          </variable>
          <variable name="MIN_INT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="-32768" />
            </initialValue>
          </variable>
          <variable name="MAX_NUMBER_OF_OVEN_MODULES">
            <type>
              <UINT />
            </type>
            <initialValue>
              <simpleValue value="8" />
            </initialValue>
          </variable>
          <variable name="WRITE_BUFFER_LENGTH">
            <type>
              <UDINT />
            </type>
            <initialValue>
              <simpleValue value="98" />
            </initialValue>
          </variable>
          <variable name="READ_BUFFER_LENGTH">
            <type>
              <UDINT />
            </type>
            <initialValue>
              <simpleValue value="103" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>8f2047b0-55bf-4110-99a3-c8cf7e1db3c2</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="Global_Version" constant="true">
          <variable name="stLibVersion_BasePpt">
            <type>
              <derived name="ST_LibVersion" />
            </type>
            <initialValue>
              <structValue>
                <value member="iMajor">
                  <simpleValue value="0" />
                </value>
                <value member="iMinor">
                  <simpleValue value="0" />
                </value>
                <value member="iBuild">
                  <simpleValue value="0" />
                </value>
                <value member="iRevision">
                  <simpleValue value="89" />
                </value>
                <value member="sVersion">
                  <simpleValue value="'0.0.0.89'" />
                </value>
              </structValue>
            </initialValue>
            <addData>
              <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                <Attributes>
                  <Attribute Name="const_non_replaced" Value="" />
                </Attributes>
              </data>
            </addData>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>65f5faa8-bba9-40c8-9847-35a5c8d56eac</ObjectId>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"> This function has been automatically generated from the project information.</xhtml>
          </documentation>
        </globalVars>
        <globalVars name="IBH_CmdState" constant="true">
          <variable name="cCMD_CONNECT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl commands definitions
specific commands &gt;200 - every command has to be a even number</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_WRITE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cCMD_READ">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="206" />
            </initialValue>
          </variable>
          <variable name="cCMD_DISCONNECT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="208" />
            </initialValue>
          </variable>
          <variable name="cSTA_CONNECTBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_CONNECT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
          </variable>
          <variable name="cSTA_WRITEBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="203" />
            </initialValue>
          </variable>
          <variable name="cSTA_WRITE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cSTA_READBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="205" />
            </initialValue>
          </variable>
          <variable name="cSTA_READ">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="206" />
            </initialValue>
          </variable>
          <variable name="cSTA_DISCONNECTBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="207" />
            </initialValue>
          </variable>
          <variable name="cSTA_DISCONNECT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="208" />
            </initialValue>
          </variable>
          <variable name="cSTA_SUB_1">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="301" />
            </initialValue>
          </variable>
          <variable name="cSTA_SUB_2">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="302" />
            </initialValue>
          </variable>
          <variable name="cSTA_SUB_3">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="303" />
            </initialValue>
          </variable>
          <variable name="cSTA_SUB_4">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="304" />
            </initialValue>
          </variable>
          <variable name="cSTA_SUB_5">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="305" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>eb94b744-ef37-4bb9-8490-3ce9eadc8ed4</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="POD_Cmd" constant="true">
          <variable name="cPOD_STA_PowerOff">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="0" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Switch controller on </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_STA_Error">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="256" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error</xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_STA_WaitForJob">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1000" />
            </initialValue>
          </variable>
          <variable name="cPOD_STA_PowerOnBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1001" />
            </initialValue>
          </variable>
          <variable name="cPOD_STA_HomeBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1006" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Homing </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_STA_RelMoveBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1007" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start move with relative move distance </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_STA_AbsMoveBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1010" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start move with absolute target position </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_STA_PosMoveBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1011" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start move in positive direction </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_STA_PosMove">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1012" />
            </initialValue>
          </variable>
          <variable name="cPOD_STA_NegMoveBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1013" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start move in negative direction </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_STA_NegMove">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1014" />
            </initialValue>
          </variable>
          <variable name="cPOD_STA_StopBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1015" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> controller on standstill</xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_STA_QStopBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1017" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> controller on standstill</xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_STA_NegJogBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1019" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> controller on standstill</xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_STA_PosJogBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1021" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> controller on standstil	</xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_STA_ModMoveBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1023" />
            </initialValue>
          </variable>
          <variable name="cPOD_STA_ModMove">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1024" />
            </initialValue>
          </variable>
          <variable name="cPOD_STA_StorePara">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1050" />
            </initialValue>
          </variable>
          <variable name="cPOD_STA_WritePara">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1052" />
            </initialValue>
          </variable>
          <variable name="cPOD_CMD_DONE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="-1" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> ctrl commands definitions
 specific commands &gt;200 - every command has to be a even number</xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_CMD_CTRL_ON">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1002" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Switch controller on </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_CMD_CTRL_OFF">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1004" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Switch controller off </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_CMD_HOME">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1006" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Homing </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_CMD_REL_MOVE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1008" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start move with relative move distance </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_CMD_ABS_MOVE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1010" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start move with absolute target position </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_CMD_POS_MOVE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1012" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start move in positive direction </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_CMD_NEG_MOVE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1014" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start move in negative direction </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_CMD_STOP">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1016" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Stop movement with controller on </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_CMD_EMCY_STOP_CTRL_OFF">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1018" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Emergency stop with controller off </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_CMD_POS_JOG">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1020" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start move in positive direction </xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_CMD_NEG_JOG">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1022" />
            </initialValue>
          </variable>
          <variable name="cPOD_CMD_MOD_MOVE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1024" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start move with modulo positionining (based on modulofactor defined in axis parameter!)</xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_CMD_STORE_PARAMETER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1050" />
            </initialValue>
          </variable>
          <variable name="cPOD_CMD_WRITE_PARAMETER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1052" />
            </initialValue>
          </variable>
          <variable name="cPOD_SCMD_WRITE_PARA">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2002" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Service Jobs (parallel to active job)</xhtml>
            </documentation>
          </variable>
          <variable name="cPOD_SCMD_READ_PARA">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2004" />
            </initialValue>
          </variable>
          <variable name="cPOD_SCMD_RESET_ABSENCODER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2006" />
            </initialValue>
          </variable>
          <variable name="cPOD_SCMD_WRITE_PARA_NC">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2008" />
            </initialValue>
          </variable>
          <variable name="cPOD_SCMD_READ_PARA_NC">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2010" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>929106cd-f01b-40f8-aa09-ae2b396b3ed0</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="POD_Const">
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>3db20bdd-54f7-4841-b871-6cc1b7237e45</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="TCP_CmdState" constant="true">
          <variable name="cCMD_Close">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> ctrl commands definitions
 specific commands &gt;200 - every command has to be a even number</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_Connect">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cSTA_CloseBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_Close">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
          </variable>
          <variable name="cSTA_ConnectBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="203" />
            </initialValue>
          </variable>
          <variable name="cSTA_Connect">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>8ba581ac-1d4c-4590-97d0-e86c92da7085</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="TCP_Constants" constant="true">
          <variable name="MAX_DATASET_SIZE">
            <type>
              <UDINT />
            </type>
            <initialValue>
              <simpleValue value="900" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Define length of data buffer. Max. 900 Byte</xhtml>
            </documentation>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>6c4d2dff-dec3-479f-9300-966f151d9dd1</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="JCL_CmdState" constant="true">
          <variable name="cCMD_Standby">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Preparing jetter for production</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_Calibration">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start calibration routine for MM camera system</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_CleanPrintHeads">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="206" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start automatic cleaning cycle for both printheads</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_ResetAlarm">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="230" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Reset pending alarms</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_RequestState">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="240" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send back the state msg.</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_StandbyBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_Standby">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="cCMD_Standby" />
            </initialValue>
          </variable>
          <variable name="cSTA_ConnectBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="250" />
            </initialValue>
          </variable>
          <variable name="cSTA_CleanPrintHeadsBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="205" />
            </initialValue>
          </variable>
          <variable name="cSTA_CleanPrintHeads">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="cCMD_CleanPrintHeads" />
            </initialValue>
          </variable>
          <variable name="cSTA_CalibrationBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="203" />
            </initialValue>
          </variable>
          <variable name="cSTA_Calibration">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="cCMD_Calibration" />
            </initialValue>
          </variable>
          <variable name="cSTA_ParkBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="211" />
            </initialValue>
          </variable>
          <variable name="cSTA_MaintenanceBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="208" />
            </initialValue>
          </variable>
          <variable name="cSTA_MaintenanceInWork">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="209" />
            </initialValue>
          </variable>
          <variable name="cSTA_MaintenanceDone">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="210" />
            </initialValue>
          </variable>
          <variable name="cSTA_MANUALMODE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="212" />
            </initialValue>
          </variable>
          <variable name="cSUB_WaitingForConnection">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="300" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> sub states</xhtml>
            </documentation>
          </variable>
          <variable name="cSUB_WaitingForState">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="301" />
            </initialValue>
          </variable>
          <variable name="cSUB_WaitingSocketClosed">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="302" />
            </initialValue>
          </variable>
          <variable name="cSUB_SendPon">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="303" />
            </initialValue>
          </variable>
          <variable name="cSUB_Done">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="999" />
            </initialValue>
          </variable>
          <variable name="cSUB_WaitForCleaningToStart">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="304" />
            </initialValue>
          </variable>
          <variable name="cSUB_CleaningBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="305" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>1a691d1b-6c31-4111-bdb1-ac887aba7a5a</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="JCL_Constants" constant="true">
          <variable name="JCL_MsgId_Command">
            <type>
              <UINT />
            </type>
            <initialValue>
              <simpleValue value="1" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> MsgID (valid for jetter TCP server protocol)</xhtml>
            </documentation>
          </variable>
          <variable name="JCL_MsgId_State">
            <type>
              <UINT />
            </type>
            <initialValue>
              <simpleValue value="2" />
            </initialValue>
          </variable>
          <variable name="JCL_MsgId_Alarm">
            <type>
              <UINT />
            </type>
            <initialValue>
              <simpleValue value="4" />
            </initialValue>
          </variable>
          <variable name="JCL_MsgId_PrintDone">
            <type>
              <UINT />
            </type>
            <initialValue>
              <simpleValue value="5" />
            </initialValue>
          </variable>
          <variable name="JCL_MsgId_ReqCleaning">
            <type>
              <UINT />
            </type>
            <initialValue>
              <simpleValue value="6" />
            </initialValue>
          </variable>
          <variable name="JCL_CMD_PowerOn">
            <type>
              <USINT />
            </type>
            <initialValue>
              <simpleValue value="2" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Jetter CMD (valid for jetter TCP server protocol)	</xhtml>
            </documentation>
          </variable>
          <variable name="JCL_CMD_Off">
            <type>
              <USINT />
            </type>
            <initialValue>
              <simpleValue value="6" />
            </initialValue>
          </variable>
          <variable name="JCL_STA_Standby">
            <type>
              <USINT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
          </variable>
          <variable name="JCL_CMD_Standby">
            <type>
              <USINT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
          </variable>
          <variable name="JCL_CMD_Run">
            <type>
              <USINT />
            </type>
            <initialValue>
              <simpleValue value="10" />
            </initialValue>
          </variable>
          <variable name="JCL_CMD_CleanPrintHeads">
            <type>
              <USINT />
            </type>
            <initialValue>
              <simpleValue value="206" />
            </initialValue>
          </variable>
          <variable name="JCL_CMD_Calibration">
            <type>
              <USINT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="JCL_CMD_ResetAlarm">
            <type>
              <USINT />
            </type>
            <initialValue>
              <simpleValue value="230" />
            </initialValue>
          </variable>
          <variable name="JCL_CMD_RequestState">
            <type>
              <USINT />
            </type>
            <initialValue>
              <simpleValue value="240" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>3fe6c60f-dddf-454d-ab8f-67efeaf9a481</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="RAX_CmdState" constant="true">
          <variable name="cCMD_HOME">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl commands definitions
specific commands &gt;200 - every command has to be a even number</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_POS">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cCMD_JOG_NEG">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="210" />
            </initialValue>
          </variable>
          <variable name="cCMD_JOG_POS">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="212" />
            </initialValue>
          </variable>
          <variable name="cCMD_REL_POS">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="214" />
            </initialValue>
          </variable>
          <variable name="cCMD_TURN">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="216" />
            </initialValue>
          </variable>
          <variable name="cSTA_POSBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="203" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_POS">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="RAX_CmdState.cCMD_POS" />
            </initialValue>
          </variable>
          <variable name="cSTA_REL_POSBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="213" />
            </initialValue>
          </variable>
          <variable name="cSTA_REL_POS">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="RAX_CmdState.cCMD_REL_POS" />
            </initialValue>
          </variable>
          <variable name="cSTA_JOG_NEG">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="RAX_CmdState.cCMD_JOG_NEG" />
            </initialValue>
          </variable>
          <variable name="cSTA_JOG_POS">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="RAX_CmdState.cCMD_JOG_POS" />
            </initialValue>
          </variable>
          <variable name="cSTA_TURNBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="215" />
            </initialValue>
          </variable>
          <variable name="cSTA_TURN">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="RAX_CmdState.cCMD_TURN" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>bef9e753-3e0a-4663-94bb-e25ce40d1284</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="BCH_CmdState" constant="true">
          <variable name="cCMD_READ">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="200" />
            </initialValue>
          </variable>
          <variable name="cCMD_TESTSEQUENCE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
          </variable>
          <variable name="cSTA_TESTSEQUENCE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
          </variable>
          <variable name="cSUB_WAITPAPER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="300" />
            </initialValue>
          </variable>
          <variable name="cSUB_BARCODEREADstart">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="310" />
            </initialValue>
          </variable>
          <variable name="cSUB_BARCODREREADbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="311" />
            </initialValue>
          </variable>
          <variable name="cSUB_BARCODREREAD">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="312" />
            </initialValue>
          </variable>
          <variable name="cSUB_WAITPAPERGONE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="313" />
            </initialValue>
          </variable>
          <variable name="cSUB_WAITPAPERGONEDELAY">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="314" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>3736a2d1-418b-4cfc-bffd-175ee3c4e6cf</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="MDC_CmdState" constant="true">
          <variable name="cCMD_INITIALIZE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl commands definitions
specific commands &gt;200 - every command has to be a even number</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_TURN">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cCMD_PREPOSITION">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="210" />
            </initialValue>
          </variable>
          <variable name="cSTA_InitializeBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_InPositionBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="203" />
            </initialValue>
          </variable>
          <variable name="cSTA_InPosition">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="205" />
            </initialValue>
          </variable>
          <variable name="cSTA_StartTurnBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="207" />
            </initialValue>
          </variable>
          <variable name="cSTA_TurnBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="209" />
            </initialValue>
          </variable>
          <variable name="cSTA_PREPOSITIONbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="220" />
            </initialValue>
          </variable>
          <variable name="cSTA_PREPOSITION">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="221" />
            </initialValue>
          </variable>
          <variable name="cSTA_TURNDONE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="222" />
            </initialValue>
          </variable>
          <variable name="cSUB_TURNbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="300" />
            </initialValue>
          </variable>
          <variable name="cSUB_STOPbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="301" />
            </initialValue>
          </variable>
          <variable name="cSUB_FINDHOLEbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="302" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>ce9b6325-0b31-44cd-ab82-396a62a84748</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="OVN_CmdState" constant="true">
          <variable name="cCMD_BELTONLY">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl commands definitions
specific commands &gt;200 - every command has to be a even number</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_BELTONLYBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_BELTONLY">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
          </variable>
          <variable name="cSUB_WAITOFF">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="300" />
            </initialValue>
          </variable>
          <variable name="cSUB_WAITPAPER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="301" />
            </initialValue>
          </variable>
          <variable name="cSUB_DONE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="302" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>ccca8449-98a5-48f9-9794-5a85756397ca</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="PTB_CmdState" constant="true">
          <variable name="cCMD_EJECTPAPER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl commands definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_STACKPAPER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cSTA_EJECTPAPERbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">specific commands &gt;200 - every command has to be a even number
ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_EJECTPAPER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
          </variable>
          <variable name="cSTA_STACKPAPERbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="203" />
            </initialValue>
          </variable>
          <variable name="cSTA_STACKPAPER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cSUB_EMPTYstart">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="300" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific sub states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSUB_EMPTYWAITPAPERbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="301" />
            </initialValue>
          </variable>
          <variable name="cSUB_EMPTYWAITPAPERdebounce">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="302" />
            </initialValue>
          </variable>
          <variable name="cSUB_EMPTYWAITPAPERGONEbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="303" />
            </initialValue>
          </variable>
          <variable name="cSUB_EMPTYWAITPAPERGONEdebounce">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="304" />
            </initialValue>
          </variable>
          <variable name="cSUB_EMPTYWAITDRIVESTOPED">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="305" />
            </initialValue>
          </variable>
          <variable name="cSUB_WAITPAPER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="306" />
            </initialValue>
          </variable>
          <variable name="cSUB_WAITPAPERGONE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="307" />
            </initialValue>
          </variable>
          <variable name="cSUB_STARTSTACKDELAY">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="308" />
            </initialValue>
          </variable>
          <variable name="cSUB_PAPERDISTANCEstart">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="309" />
            </initialValue>
          </variable>
          <variable name="cSUB_PAPERDISTANCEbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="310" />
            </initialValue>
          </variable>
          <variable name="cSUB_PAPERDISTANCESTOPbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="311" />
            </initialValue>
          </variable>
          <variable name="cSUB_STARTENTRYDRIVEbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="312" />
            </initialValue>
          </variable>
          <variable name="cSUB_STARTENTRYDRIVE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="313" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>e7b636e1-aebb-42f0-8717-00e458c92dab</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="PBC_CmdState" constant="true">
          <variable name="cCMD_SINGLE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific command definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_MANUALSTART">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cSTA_INITbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="205" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSUB_WAITPAPER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="300" />
            </initialValue>
          </variable>
          <variable name="cSUB_POSITIONbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="301" />
            </initialValue>
          </variable>
          <variable name="cSUB_POSITIONSTOPbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="302" />
            </initialValue>
          </variable>
          <variable name="cSUB_EVALUATEEJECT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="303" />
            </initialValue>
          </variable>
          <variable name="cSUB_EJECTbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="304" />
            </initialValue>
          </variable>
          <variable name="cSUB_EJECTSTOPbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="305" />
            </initialValue>
          </variable>
          <variable name="cSUB_POSITIONSTARTbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="306" />
            </initialValue>
          </variable>
          <variable name="cSUB_EJECTSTARTbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="307" />
            </initialValue>
          </variable>
          <variable name="cSUB_READYEJECT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="308" />
            </initialValue>
          </variable>
          <variable name="cSUB_WAITPAPERGONETABLE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="309" />
            </initialValue>
          </variable>
          <variable name="cSUB_POSITIONRETRYDELAY">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="313" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">	cSUB_BARCODEREADstart	: INT := 310;
	cSUB_BARCODREREADbusy	: INT := 311;
	cSUB_BARCODREREAD  		: INT := 312;</xhtml>
            </documentation>
          </variable>
          <variable name="cSUB_POSITIONRETRYSTOP">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="314" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>c08a46b0-45e8-438d-90f8-78fc66cf873f</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="PCE_CmdState" constant="true">
          <variable name="cSUB_PAPERENTRY">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="300" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl commands definitions
specific commands &gt;200 - every command has to be a even number
ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSUB_PAPERENTRYDelay">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="301" />
            </initialValue>
          </variable>
          <variable name="cSUB_PAPEREXIT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="302" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>127775c7-3828-4250-a22d-7441adfe5b37</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="PST_CmdState" constant="true">
          <variable name="cCMD_EJECT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> specific commands &gt;200 - every command has to be a even number
 ctrl commands definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_EJECTbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> main states</xhtml>
            </documentation>
          </variable>
          <variable name="cSUB_WAITNEWPAPERDETECTED">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="300" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> sub states</xhtml>
            </documentation>
          </variable>
          <variable name="cSUB_DELAYREADBARCODEBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="301" />
            </initialValue>
          </variable>
          <variable name="cSUB_RETRYREADBARCODE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="302" />
            </initialValue>
          </variable>
          <variable name="cSUB_READBARCODEbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="303" />
            </initialValue>
          </variable>
          <variable name="cSUB_CHECKEJECTCONDITIONS">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="304" />
            </initialValue>
          </variable>
          <variable name="cSUB_DELAYSTACKEJECTBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="305" />
            </initialValue>
          </variable>
          <variable name="cSUB_MOVEBELTEJECTDIRECTIONBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="306" />
            </initialValue>
          </variable>
          <variable name="cSUB_STOPBELTBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="307" />
            </initialValue>
          </variable>
          <variable name="cSUB_WAITBEFOREMOVINGREVERSE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="308" />
            </initialValue>
          </variable>
          <variable name="cSUB_MOVEBELTREVERSEBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="309" />
            </initialValue>
          </variable>
          <variable name="cSUB_DONE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="999" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>05beb03a-4925-449e-af03-b1583d0d4fe6</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="PTS_CmdState" constant="true">
          <variable name="cCMD_TURN">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific command definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_STANDBY">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cSTA_STANDBYBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="203" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_STANDBY">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cSTA_PaperDelayBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="205" />
            </initialValue>
          </variable>
          <variable name="cSTA_TurnPaperBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="207" />
            </initialValue>
          </variable>
          <variable name="cSTA_WaitPaperGone">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="209" />
            </initialValue>
          </variable>
          <variable name="cSTA_EmptyDelayBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="211" />
            </initialValue>
          </variable>
          <variable name="cSTA_TurnEmptyBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="213" />
            </initialValue>
          </variable>
          <variable name="cSTA_InitializeBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="215" />
            </initialValue>
          </variable>
          <variable name="cSTA_WaitPaper">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="217" />
            </initialValue>
          </variable>
          <variable name="cSTA_GetItemBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="219" />
            </initialValue>
          </variable>
          <variable name="cSUB_WAIT_START">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="300" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> ctrl specific substates definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSUB_WAIT_DONE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="301" />
            </initialValue>
          </variable>
          <variable name="cSUB_TURNbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="302" />
            </initialValue>
          </variable>
          <variable name="cSUB_TURNDONE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="303" />
            </initialValue>
          </variable>
          <variable name="cSUB_PREPOSITIONbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="304" />
            </initialValue>
          </variable>
          <variable name="cSUB_DELAYbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="305" />
            </initialValue>
          </variable>
          <variable name="cSUB_WAITPAPERGONEbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="306" />
            </initialValue>
          </variable>
          <variable name="cPTS_MAX_AUTOPOS">
            <type>
              <UINT />
            </type>
            <initialValue>
              <simpleValue value="5" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Other Constants</xhtml>
            </documentation>
          </variable>
          <variable name="cPTS_MAX_DISTRIBUTION">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>6f02a571-a11c-453b-8545-bf1aa9f00e5c</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="PTS_Persistent">
          <variable name="udiPTS_Counter_Persistent">
            <type>
              <UDINT />
            </type>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Count of turn movements. This is a persistent variable, reset only with reset origin</xhtml>
            </documentation>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>18d443ac-1752-4703-a1fc-e06e8a33cc0d</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="LUT_Constants" constant="true">
          <variable name="MaxLookupSize">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="20" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> max size of lookup table</xhtml>
            </documentation>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>af67a2b8-ca5f-44b6-8761-347846921ecc</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="OvenConst" constant="true">
          <variable name="cRECVDATACHANNELBUFFER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="20" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>72d8bda2-44e8-476b-a778-767834ec8549</ObjectId>
            </data>
          </addData>
        </globalVars>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_IBH">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_IBH_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_IBH_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_IBH_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9b8b2b04-8aab-48c2-b146-879d3dea3eba</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_IBH_Cfg">
              <baseType>
                <struct>
                  <variable name="uiNumberOfModules">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number of Modules in use, &lt;= 8 </xhtml>
                    </documentation>
                  </variable>
                  <variable name="tIpAddress">
                    <type>
                      <derived name="T_IPv4Addr" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> IPv4 network address </xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPortAdress">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Remote (server) port address </xhtml>
                    </documentation>
                  </variable>
                  <variable name="nDeviceAddress">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> MPI device address </xhtml>
                    </documentation>
                  </variable>
                  <variable name="nDatablockNumber">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Read/write from/to datablock number </xhtml>
                    </documentation>
                  </variable>
                  <variable name="tTimeout">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Maximum time allowed for the execution of the command </xhtml>
                    </documentation>
                  </variable>
                  <variable name="nWriteStartAddress">
                    <type>
                      <WORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Write byte/word offset/start address </xhtml>
                    </documentation>
                  </variable>
                  <variable name="nReadStartAddress">
                    <type>
                      <WORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Read byte/word offset/start address </xhtml>
                    </documentation>
                  </variable>
                  <variable name="uiByteOffset_rd_iStatus">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_bOff">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiBitOffset_rd_bOff">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_bBeltOn">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiBitOffset_rd_bBeltOn">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_bManual">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiBitOffset_rd_bManual">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_bRun">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiBitOffset_rd_bRun">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_bSetParam">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiBitOffset_rd_bSetParam">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_bGetParam">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiBitOffset_rd_bGetParam">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_bAckError">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiBitOffset_rd_bAckError">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_adiTemp_mc">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_adiAir_p">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_diSpeed_mm_min">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_iErrorLevel">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_iErrorID">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_rd_iErrorValue">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_wr_iOff">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_wr_iBeltOn">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_wr_iManual">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_wr_iRun">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_wr_iSetParam">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_wr_iGetParam">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_wr_iAckError">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_wr_adiTemp_mc">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_wr_adiAir_p">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiByteOffset_wr_diSpeed_mm_min">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3ba03782-c7db-4092-abc5-720424700977</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_IBH_Cur">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>491621bb-4870-4bbd-b8aa-17de8d584c9e</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_IBH_Par">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>8cb50149-43c0-4bf3-885b-bef5707ac5cf</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_AmpType">
              <baseType>
                <enum>
                  <values>
                    <value name="BOTH_ROT_LIN" value="0" />
                    <value name="ROTARY_AMP" value="1" />
                    <value name="LINEAR_AMP" value="2" />
                  </values>
                  <baseType>
                    <USINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b43074b2-0cf2-4e30-9c36-a19833feca8e</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_POD_UseHomeSwitch">
              <baseType>
                <enum>
                  <values>
                    <value name="FUB_Input" value="0" />
                    <value name="HomeSwitch" />
                    <value name="SI0" />
                    <value name="SI1" />
                    <value name="SI2" />
                    <value name="SI3" />
                    <value name="SI4" />
                    <value name="SI5" />
                    <value name="SI6" />
                  </values>
                  <baseType>
                    <USINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
                  <EnumValueDocumentation>
                    <EnumValue>
                      <Name>SI0</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> internal IO 2 Home switch 					0: Switched off, 1: Switched on</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>SI1</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> internal IO 16 SI0:				0: Switched off (Open),1: Switched on (Close)</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>SI2</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> internal IO 17 SI0:				0: Switched off (Open),1: Switched on (Close)</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>SI3</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> internal IO 18 SI0:			0: Switched off (Open),1: Switched on (Close)</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>SI4</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> internal IO 19 SI0:				0: Switched off (Open),1: Switched on (Close)</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>SI5</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> internal IO 20 SI0:					0: Switched off (Open),1: Switched on (Close)</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>SI6</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> internal IO 21 SI0:	 				0: Switched off (Open),1: Switched on (Close)
 internal IO 22 SI0:					0: Switched off (Open),1: Switched on (Close)</xhtml>
                      </Documentation>
                    </EnumValue>
                  </EnumValueDocumentation>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>cfc63ea8-8688-4ab6-9cf1-fb245a660988</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ValueType">
              <baseType>
                <enum>
                  <values>
                    <value name="TYPE_NOT_SPECIFIED" value="0" />
                    <value name="TYPE_SINT" value="1" />
                    <value name="TYPE_INT" value="2" />
                    <value name="TYPE_DINT" value="3" />
                    <value name="TYPE_USINT" value="4" />
                    <value name="TYPE_UINT" value="5" />
                    <value name="TYPE_UDINT" value="6" />
                    <value name="TYPE_STRING" value="7" />
                  </values>
                  <baseType>
                    <USINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9db550c9-6d64-4366-9604-6e11beeaedee</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_POD">
              <baseType>
                <struct>
                  <variable name="strAxisName">
                    <type>
                      <string length="31" />
                    </type>
                  </variable>
                  <variable name="strState">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="strCmd">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="intCmd">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="intServiceCmd">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="stStatus">
                    <type>
                      <derived name="T_POD_Status" />
                    </type>
                  </variable>
                  <variable name="stMove">
                    <type>
                      <derived name="T_POD_Move" />
                    </type>
                  </variable>
                  <variable name="stErr">
                    <type>
                      <derived name="T_POD_Error" />
                    </type>
                  </variable>
                  <variable name="stCfg">
                    <type>
                      <derived name="T_POD_Cfg" />
                    </type>
                  </variable>
                  <variable name="stService">
                    <type>
                      <derived name="T_POD_Service" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>d5023c31-0777-4e70-9274-770f3c9fb1da</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_POD_Cfg">
              <baseType>
                <struct>
                  <variable name="bolSimulation">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="lreHomePosition">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">&gt;0 Homeposition set if calibsignal active</xhtml>
                    </documentation>
                  </variable>
                  <variable name="eHomingMode">
                    <type>
                      <derived name="MC_HomingMode" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Home Mode</xhtml>
                    </documentation>
                  </variable>
                  <variable name="eUseHomeSwitch">
                    <type>
                      <derived name="E_POD_UseHomeSwitch" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> define home switch: 0 use FUB input, </xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9a7641d6-234c-4570-9f7a-048ed4fda205</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_POD_DigitalInputs">
              <baseType>
                <struct>
                  <variable name="bol_N_OT">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">0 N-OT: 	Negative limit switch 	0: Switched off, 1: Switched on</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_P_OT">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">1 P-OT: 	Positive limit switch 	0: Switched off, 1: Switched on</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_HomeSwitch">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">2 Home switch 					0: Switched off, 1: Switched on</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_SI0">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">16 SI0:	CN1-13pin 				0: Switched off (Open),1: Switched on (Close)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_SI1">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">17 SI1:	CN1-7pin 				0: Switched off (Open),1: Switched on (Close)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_SI2">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">18 SI2:	CN1-8pin 				0: Switched off (Open),1: Switched on (Close)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_SI3">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">19 SI3:	CN1-9pin 				0: Switched off (Open),1: Switched on (Close)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_SI4">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">20 SI4:	CN1-10pin 				0: Switched off (Open),1: Switched on (Close)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_SI5">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">21 SI5:	CN1-11pin 				0: Switched off (Open),1: Switched on (Close)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_SI6">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">22 SI6:	CN1-12pin 				0: Switched off (Open),1: Switched on (Close)</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>7bcbbfd1-81f0-4ff4-aa2d-09f1fdef954e</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_POD_Error">
              <baseType>
                <struct>
                  <variable name="bolErrAck">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Reset failure</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolErrorActive">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> atleast one failure active</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolMCError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> error in MC fub error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolNCError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> error in NC (motion controller)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolDriveError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> error in drive (ELMO)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dwoErrorID">
                    <type>
                      <DWORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> error ID</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>53170a35-0272-4571-871a-1e44be633ee3</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_POD_Move">
              <baseType>
                <struct>
                  <variable name="lreSetPos">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">target position [Units] </xhtml>
                    </documentation>
                  </variable>
                  <variable name="eDirection">
                    <type>
                      <derived name="MC_Direction" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Direction used for Modulo position</xhtml>
                    </documentation>
                  </variable>
                  <variable name="lreSetSpeed">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">set speed [Units/s] </xhtml>
                    </documentation>
                  </variable>
                  <variable name="lreSetAcc">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">set acc  [Units/s^2] </xhtml>
                    </documentation>
                  </variable>
                  <variable name="lreSetDec">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">set dec  [Units/s^2] </xhtml>
                    </documentation>
                  </variable>
                  <variable name="lreSetDecFast">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">set dec  [Units/s^2] quickstop</xhtml>
                    </documentation>
                  </variable>
                  <variable name="lreSetJerk">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">lreSetDec : DINT; //set dec  [Units/s^2] </xhtml>
                    </documentation>
                  </variable>
                  <variable name="lreSpeedOverride">
                    <type>
                      <LREAL />
                    </type>
                    <initialValue>
                      <simpleValue value="100.0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> speed override for all drive commands (0 ≤Override≤ 100.0)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="lreSWLimitNeg_mm">
                    <type>
                      <LREAL />
                    </type>
                  </variable>
                  <variable name="lreSWLimitPos_mm">
                    <type>
                      <LREAL />
                    </type>
                  </variable>
                  <variable name="lreActPos">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual position [Units] </xhtml>
                    </documentation>
                  </variable>
                  <variable name="lreActModPos">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual modulo position [Units] </xhtml>
                    </documentation>
                  </variable>
                  <variable name="lreActVel">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> act speed [Units/s] </xhtml>
                    </documentation>
                  </variable>
                  <variable name="lreActTorque">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [Nm] actual torque The torque actual value corresponds to the instantaneous torque in the drive motor. The value is given in units of per thousand of rated torque.</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>2d2fdfc8-8551-4038-8980-0c2442a9f2d6</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_POD_Service">
              <baseType>
                <struct>
                  <variable name="worIndex">
                    <type>
                      <WORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index of the object that should be written to.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytSubIndex">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sub-index of the object that should be written to.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dwo_pSrcBuf">
                    <type>
                      <DWORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Address (pointer) of the send buffer.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udi_cbBufLen">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number (in bytes) of data to be sent.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="eValueType">
                    <type>
                      <derived name="E_ValueType" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> value type</xhtml>
                    </documentation>
                  </variable>
                  <variable name="eNC_ParNumber">
                    <type>
                      <derived name="MC_AxisParameter" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> parameter number of read/write NC parameters</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strValue">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> write/read value if dwo_pSrcBuf = 0</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>88eb688c-fc87-473c-af5b-06a5bd139bf7</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_POD_StateMachine">
              <baseType>
                <struct>
                  <variable name="intState">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">actual state</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStateLastCycle">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">state of last cycle</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStateHistory">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">save history backup p.e. in ERROR state</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStateNext">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">set state for next cycle</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f62271a7-5f40-4c24-9dbc-13971324a749</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_POD_Status">
              <baseType>
                <struct>
                  <variable name="bolEnable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Hardware enable:0 = Open 1 = Closed  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolNetwOk">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = Network initialized  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolInitOk">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = Initialization done </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolReady">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bolCtrlOn">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = Controller switched on  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolHomeOk">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = Homing done  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolInPos">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = In position (target position reached)  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolMoving">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = Axis moving  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolNegHWSwitch">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = negativ endswitch active -&gt; no movement negative allowed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPosHWSwitch">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = positive endswitch active -&gt; no movement positive allowed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolNegSWSwitch">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = negativ endswitch active -&gt; no movement negative allowed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPosSWSwitch">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = positive endswitch active -&gt; no movement positive allowed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stDigIn">
                    <type>
                      <derived name="T_POD_DigitalInputs" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> drive digital inputs of elmo drive</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>701949fe-00c5-44cf-912e-33db26c1ddf2</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_POD_StatusWord">
              <baseType>
                <struct>
                  <variable name="bolReadyToSwitchOn">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0	Ready TO Switch on =1</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSwitchedOn">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">1	Switched on =1</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolOperationEnabled">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">2	Operation enabeld =1</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolFault">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">3	Fault/Fault Reaction</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolMainPowerOn">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">4	MainPower on =1</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolQuickStopInactive">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">5	Quickstop inaktive =1</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSwitchOnDisabled">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">6	Switch on disabled =1</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolWarning">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">7	Warning is occurred =1</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolBit08">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">8	not used always 0</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolRemote">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">9	The Remote bit is always set by the Elmo servo drive</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolTargetReached">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">10	Target Reached</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolInternLimit">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">11	Internal Limit active =1</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>e87a1ec7-a1f2-40ac-a515-3e362015acae</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_PTR_Status">
              <baseType>
                <enum>
                  <values>
                    <value name="EnterBusy" />
                    <value name="OnBelt" />
                    <value name="ExitBusy" />
                    <value name="Gone" />
                    <value name="ERROR" />
                    <value name="MAX_E_PTR_Status" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>bd121ee2-57ce-4674-9873-2a63e8cefad4</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTR_STRUCT">
              <baseType>
                <struct>
                  <variable name="udiTimeOnBelt_us">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [us] Time of the paper on the belt</xhtml>
                    </documentation>
                  </variable>
                  <variable name="lrePositionOnBelt_mm">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm] Position of the paper on the belt</xhtml>
                    </documentation>
                  </variable>
                  <variable name="lrePositionOnBeltAdjusted_mm">
                    <type>
                      <LREAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm] Position of the paper on the belt Adjusted to the possible maximum</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiItemId">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper Item Id</xhtml>
                    </documentation>
                  </variable>
                  <variable name="eStatus">
                    <type>
                      <derived name="E_PTR_Status" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error	</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>55c53e18-1b57-48a7-bc4a-2f4811c78acc</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_TCP">
              <baseType>
                <enum>
                  <values>
                    <value name="SocketConnectionLost" value="1" />
                    <value name="AddToSendBufferFailed" value="2" />
                    <value name="RemoveFromSendBufferFailed" value="3" />
                    <value name="GetFromSendBufferFailed" value="4" />
                    <value name="AddToReceiveBufferFailed" value="5" />
                    <value name="RemoveFromReceiveBufferFailed" value="6" />
                    <value name="GetFromReceiveBufferFailed" value="7" />
                    <value name="NotSent" value="8" />
                    <value name="NoAckReceived" value="9" />
                    <value name="FubErrorClientConnection" value="10" />
                    <value name="FubErrorSendData" value="11" />
                    <value name="FubErrorReceiveData" value="12" />
                    <value name="MAX_E_ALM_TCP" />
                  </values>
                  <baseType>
                    <UINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>8097488a-8c0c-497f-b1bc-2b49aa4c9ff8</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="ST_Header">
              <baseType>
                <struct>
                  <variable name="uinMsgId">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="udiMsgSize">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="pack_mode" Value="1" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>afb99a30-6c22-4c5d-93b6-5ebee914fe84</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_TCP">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_TCP_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_TCP_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_TCP_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="(E_ALM_TCP.MAX_E_ALM_TCP - 1)" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>31d6a5c0-0d72-4129-828d-b5b3b77fea5f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_TCP_Cfg">
              <baseType>
                <struct>
                  <variable name="bUsingAck">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> depending on the protocol an ACK is used or not</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolAutoReconnectEnable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enable Auto Reconnect</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a494adfe-688b-4688-bed7-5420328bb8fc</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_TCP_Cur">
              <baseType>
                <struct>
                  <variable name="bolFubErrorActive">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>2ee28923-bec7-4851-a70a-02b3725582e6</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_TCP_Par">
              <baseType>
                <struct>
                  <variable name="strIPAdr">
                    <type>
                      <string length="15" />
                    </type>
                  </variable>
                  <variable name="udiPort">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="tTOConnection">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="tTOReceive">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="tTOSend">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="iMaxWaitTimeAck">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="iMaxSendTry">
                    <type>
                      <USINT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>e07407bd-45b5-40f9-970b-e4fde5b81fbc</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_GRR">
              <baseType>
                <enum>
                  <values>
                    <value name="NONE" value="1" />
                    <value name="SystemError" value="2" />
                    <value name="MainPressureError" value="3" />
                    <value name="EoffOrFuseError" value="4" />
                    <value name="LowPowderWarning" value="5" />
                    <value name="ManualOperation" value="6" />
                    <value name="LostConnection" value="7" />
                    <value name="MAX_E_ALM_GRR" />
                  </values>
                  <baseType>
                    <UINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>2ddd3ec5-985c-4274-8386-49a72f6ef000</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_GRR">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_GRR_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_GRR_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_GRR_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_GRR_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_GRR_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="(E_ALM_GRR.MAX_E_ALM_GRR - 1)" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ce689142-c101-4ab0-84e2-c32c97551540</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_GRR_Cfg">
              <baseType>
                <struct>
                  <variable name="rMaxFreq_Hz">
                    <type>
                      <REAL />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>4330c1f4-231e-43ce-bcf1-0e60f4afa87b</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_GRR_Cur">
              <baseType>
                <struct>
                  <variable name="intMainPressure">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>870c1da3-b9c3-4c46-8548-558c22626437</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_GRR_In">
              <baseType>
                <struct>
                  <variable name="bolSystemOk">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="bolMainPressureError">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="bolEoffOrFuseOk">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="bolPowderLowWarning">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="bolAutoMode">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="intState">
                    <type>
                      <derived name="T_Ctrl_IoInt" />
                    </type>
                  </variable>
                  <variable name="bolToggleBitGrn">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="intMainPressure">
                    <type>
                      <derived name="T_Ctrl_IoInt" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>22254ce4-f556-4683-82d2-1ce64b03f1a1</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_GRR_Out">
              <baseType>
                <struct>
                  <variable name="intCommand">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoInt" />
                    </type>
                  </variable>
                  <variable name="intConveyorBelt">
                    <type>
                      <derived name="T_Ctrl_IoInt" />
                    </type>
                  </variable>
                  <variable name="intPowderVibrator">
                    <type>
                      <derived name="T_Ctrl_IoInt" />
                    </type>
                  </variable>
                  <variable name="intConveyorVibrator">
                    <type>
                      <derived name="T_Ctrl_IoInt" />
                    </type>
                  </variable>
                  <variable name="intAnalogValue">
                    <type>
                      <derived name="T_Ctrl_IoInt" />
                    </type>
                  </variable>
                  <variable name="uinFilterClearingCycleTime_min">
                    <type>
                      <derived name="T_Ctrl_IoUint" />
                    </type>
                  </variable>
                  <variable name="bolToggleBitGrr">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>00082939-1afc-4599-9f00-17ccfe7e379a</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_GRR_Par">
              <baseType>
                <struct>
                  <variable name="rConveyorBelt_Hz">
                    <type>
                      <REAL />
                    </type>
                  </variable>
                  <variable name="rPowderVibrator_Hz">
                    <type>
                      <REAL />
                    </type>
                  </variable>
                  <variable name="rConveyorVibrator_Hz">
                    <type>
                      <REAL />
                    </type>
                  </variable>
                  <variable name="rAnalogValue_p">
                    <type>
                      <REAL />
                    </type>
                  </variable>
                  <variable name="uinFilterClearingCycleTime_min">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>acc58138-5a92-4dd5-a90e-bda48795aadd</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_JCL">
              <baseType>
                <enum>
                  <values>
                    <value name="NONE" value="1" />
                    <value name="JetterNotRun" value="2" />
                    <value name="JetterManualWarning" value="3" />
                    <value name="JetterManualError" value="4" />
                    <value name="JetterEOff" value="5" />
                    <value name="JetterCommunicationLost" value="6" />
                    <value name="CleaningError" />
                    <value name="MAX_E_ALM_JCL" />
                  </values>
                  <baseType>
                    <UINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b853a26a-b5c1-44a1-8eff-dcf7412d0d10</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_JCL">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_JCL_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_JCL_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_JCL_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="(E_ALM_JCL.MAX_E_ALM_JCL - 1)" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f7e7c82b-01b4-493d-8a9c-45d8ec1b6473</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_JCL_Cfg">
              <baseType>
                <struct>
                  <variable name="bolJetterManualModeAllowed">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> FALSE = Do not allow manual mode, go to error if Jetter goes to manual / TRUE = Allow manual mode and stay in the last state </xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5e340ff8-de4a-41a4-b959-28c982227007</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_JCL_Cur">
              <baseType>
                <struct>
                  <variable name="bolIsLocalControlled">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Additional states from TCP server
 Local control active. Commands from this client are ignored</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolIsRemoteControlled">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Remote control active. Commands from this client are accepted</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolReadyForProduction">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Jetter ready for production</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolMaintenanceInProgress">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> TRUE if a maintenance work is in progress. Independent if auto or manual maintenance is in progress.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolRunning">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Print running, in production</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolNeedsAttention">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> System needs attention. Info or warning active</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> General error active</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolCleaningIncomplete">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Cleaning cycle was aborted before finishing. Production not possible.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolNeedsCleaning">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Print head needs cleaning.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strDTOfLastCleaningCycle">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timestamp of the last cleaning cycle. Format: YYYY-MM-DD-hh:mm:ss.xxx</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intJETState">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Jetter state</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>e7f9926f-b2cb-4263-b3d5-d860868f1b2f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_JCL_Par">
              <baseType>
                <struct>
                  <variable name="udiCleaningStartTimeout_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] Timeout to detect cleaning start failure</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>8716b657-93ff-492a-961f-37047f3203e1</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_JCL_AlmMsg">
              <baseType>
                <struct>
                  <variable name="stHeader">
                    <type>
                      <derived name="ST_Header" />
                    </type>
                  </variable>
                  <variable name="udiAlarmID">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Unique alarm number</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiInfo">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Additional information</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiClass">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Corresponding alarm class</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinCtrlID">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Corresponding controller ID</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strDTEntry">
                    <type>
                      <string length="25" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Entry date and time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strText">
                    <type>
                      <string length="255" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm Text</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0c07c606-a1b3-444e-807a-b50d491e875b</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_JCL_Command">
              <baseType>
                <struct>
                  <variable name="stHeader">
                    <type>
                      <derived name="ST_Header" />
                    </type>
                  </variable>
                  <variable name="usiCommand">
                    <type>
                      <USINT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="pack_mode" Value="1" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0412d4c4-bcfa-4227-b98e-338e8dd9b893</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_JCL_PrintDone">
              <baseType>
                <struct>
                  <variable name="stHeader">
                    <type>
                      <derived name="ST_Header" />
                    </type>
                  </variable>
                  <variable name="usiBarcode">
                    <type>
                      <array>
                        <dimension lower="0" upper="9" />
                        <baseType>
                          <USINT />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="usiInkLevelMainTank">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  [%]</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiInkLevelSupplyPrintModule1">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  [%]	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiInkLevelSupplyPrintModule2">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  [%]	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiInkLevelReturnPrintModule1">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  [%]	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiInkLevelReturnPrintModule2">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  [%]	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiInkMeniscus">
                    <type>
                      <array>
                        <dimension lower="0" upper="1" />
                        <baseType>
                          <UDINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  [0.01 mbar]</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPrintHeadTemperature">
                    <type>
                      <array>
                        <dimension lower="0" upper="1" />
                        <dimension lower="0" upper="4" />
                        <baseType>
                          <UDINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  [0.1 °C] </xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPrintWidthCalc">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  [Micrometer]	//  Dimension of printed file calculated by DJM</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPrintLengthCalc">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  [Micrometer]	//  Dimension of printed file calculated by DJM</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiShiftXCalc">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  [Micrometer]	//  Offset of print</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiShiftYCalc">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  [Micrometer]	//  Offset of print</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiShiftAngleCalc">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  [0.01°]		//  Offset of rotation angle </xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9f680572-9ccc-48de-a33f-469bfd13c5c9</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_JCL_RequestCleaning">
              <baseType>
                <struct>
                  <variable name="stHeader">
                    <type>
                      <derived name="ST_Header" />
                    </type>
                  </variable>
                  <variable name="strDTLastClean">
                    <type>
                      <string length="25" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Date and time of the last cleaning cycle</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinRequiredInterval_min">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Required interval for cleaning [min]</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="pack_mode" Value="1" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>778e63b8-825d-4183-8461-387e623ae773</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_JCL_State">
              <baseType>
                <struct>
                  <variable name="stHeader">
                    <type>
                      <derived name="ST_Header" />
                    </type>
                  </variable>
                  <variable name="usiMainState">
                    <type>
                      <USINT />
                    </type>
                  </variable>
                  <variable name="usiAddState">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">(Bit coded)	</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="pack_mode" Value="1" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>55fbdeb3-00cd-4653-a102-3e2bb8aaf928</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_RAX">
              <baseType>
                <enum>
                  <values>
                    <value name="GeneralDrive" value="1" />
                    <value name="GeneralNc" />
                    <value name="SwLimit" />
                    <value name="NegHwLimit" />
                    <value name="PosHwLimit" />
                    <value name="InterlockNegMove" />
                    <value name="InterlockPosMove" />
                    <value name="GeneralMCFUB" />
                    <value name="MAX_E_ALM" />
                  </values>
                  <baseType>
                    <UINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="qualified_only" Value="" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f14ae739-688e-446b-85ca-a0d9f68ab153</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_RAX">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_RAX_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_RAX_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_RAX_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="(E_ALM_RAX.MAX_E_ALM - 1)" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Ilk">
                    <type>
                      <derived name="T_Ctrl_SIf_RAX_Ilk" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock of output/movements</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5521d3a6-59b5-4873-803a-d230473d6ada</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_RAX_Cfg">
              <baseType>
                <struct>
                  <variable name="eHomingMode">
                    <type>
                      <derived name="MC_HomingMode" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> homing mode</xhtml>
                    </documentation>
                  </variable>
                  <variable name="lreShortestWayWindow_deg">
                    <type>
                      <LREAL />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>fabe0b57-7541-495a-a5ef-9ec0831620b7</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_RAX_Cur">
              <baseType>
                <struct>
                  <variable name="dinSpeed_0_1deg_s">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [0.1°/s] current speed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinPosition_0_1deg">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [0.1°] current position</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinModPosition_0_1deg">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [°] current modulo position</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinTorque_0_1Nm">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [0.1Nm] current torque</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_di1">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> digital input1 from drive</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_di2">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> digital input2 from drive</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_di3">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> digital input3 from drive</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_di4">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> digital input4 from drive</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol_di5">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> digital input5 from drive</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>842fb757-2b8f-4768-ab11-5f7866ab5764</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_RAX_Ilk">
              <baseType>
                <struct>
                  <variable name="bolMovePos">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> interlock movment in positive direction</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolMoveNeg">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> interlock movment in negative direction</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>8ccfee73-1986-406a-8dee-758faea7be09</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_RAX_Par">
              <baseType>
                <struct>
                  <variable name="dinHomeOffset_0_1deg">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [deg] home offset </xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinPositionInit_0_1deg">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [0.1°] position init</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinPos_0_1deg">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [0.1°] position absolute </xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinRelDist_0_1deg">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [0.1°] rel distance</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinSpeed_0_1deg_s">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [0.1°/s] position speed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinSpeed_per">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[%] percent from dinSetSpeed_0_1deg_s</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dintAccDec_0_1deg_s2">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [0.1°/s^2] position acceleration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinAcc_per">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[%] percent from dintAccDec_0_1deg_s2</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinDec_per">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[%] percent from dintAccDec_0_1deg_s2</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinSetDecFast_0_1deg_s2">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [0.1°/s^2] position deceleration fast em stop</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinSWLimitNeg_0_1deg">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [0.1°] negative sw limite</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinSWLimitPos_0_1deg">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [0.1°] positive sw limite</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ab33df0c-5c7f-4883-8d83-f3076b888399</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_BCH">
              <baseType>
                <enum>
                  <values>
                    <value name="DataChannelMissing" value="1" />
                    <value name="DataChannelBufferFull" />
                    <value name="BarcodeNotReadCorrectly" />
                    <value name="MAX_E_ALM_BCH" />
                  </values>
                  <baseType>
                    <UINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>df979184-d6d1-4b15-b4fe-88c5aecbe462</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_BCH">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_BCH_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_BCH_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_BCH_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_BCH_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Input layer</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="(E_ALM_BCH.MAX_E_ALM_BCH - 1)" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>dd8fa73a-c430-4a93-9432-3e9673ae6f25</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_BCH_Cfg">
              <baseType>
                <struct>
                  <variable name="bolEnableDataChannel">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> TRUE = Enable Data Channel; False = Disable DataChannel</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolNegativeTriggerSignal">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> TRUE = Negative Trigger Signal, FALSE = Positive Trigger Signal</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ac3e6021-ef1c-4b6a-ad74-2fede8d8c180</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_BCH_Cur">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>042403e0-8860-409f-a7fe-d647b455cfc1</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_BCH_In">
              <baseType>
                <struct>
                  <variable name="bolSensorTrigScan">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger the measurement sensor</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>d8ce5cc2-b751-40ad-9ec4-5bb2f22438b8</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_BCH_Par">
              <baseType>
                <struct>
                  <variable name="udiPaperGoneDelay_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Delay after the barcode has be read and the paper sensor signals that the paper is gone</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTestReadCylceTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Test Read Cycle Time</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>fbd68351-195b-4387-bad7-5fe83db55493</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_MDC">
              <baseType>
                <enum>
                  <values>
                    <value name="TableSensorTimeout" value="1" />
                    <value name="CrossSensorTimeout" value="2" />
                    <value name="PositionSame" value="3" />
                    <value name="MAX_E_ALM_MDC" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>265c68b8-2228-4913-a717-3c27b920f949</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MDC">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_MDC_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_MDC_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_MDC_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_MDC_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_MDC_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="MAX_E_ALM_MDC" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Ilk">
                    <type>
                      <derived name="T_Ctrl_SIf_MDC_Ilk" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock of output/movements</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>24ef33f5-653d-436e-81fa-f62f00134044</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MDC_Cfg">
              <baseType>
                <struct>
                  <variable name="uintPositionPerTurn">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number of positions in 360° of the Malteser drive</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3c735f76-f9d2-46b9-a76b-5ea61faad805</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MDC_Cur">
              <baseType>
                <struct>
                  <variable name="uintActualPosition">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual Position as position </xhtml>
                    </documentation>
                  </variable>
                  <variable name="eActualTurningDirection">
                    <type>
                      <derived name="E_TURN_DIRECTION" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> actual turning direction</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolReferenceOk">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Reference still ok</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>73e32c06-5b45-4a3d-9598-fa275da77885</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MDC_Ilk">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>c54be6d4-af5e-4bf7-bcd9-68e6d5f94c74</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MDC_In">
              <baseType>
                <struct>
                  <variable name="bolCrossPositionSensor">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Is the cross in sensor positinon. One rotation step done.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolTablePositionSensor">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Is the table at 0° degrees</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>4b44b648-8342-492d-b0b2-0216489fcc46</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MDC_Out">
              <baseType>
                <struct>
                  <variable name="intActualPosition">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoInt" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>c4313761-6a1a-480b-966e-8c90882a4b19</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MDC_Par">
              <baseType>
                <struct>
                  <variable name="intTurnDirection">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> &lt;0 = Turn left; =0 automatic; &gt;0 turn right</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinPositionToGo">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Position to go to if comand turn is given. 0 = initialization position</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiStepRotationTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] time to rotate one step </xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiInitializationTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] initialization timeout time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimStepRotationTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] simulation time to rotate one step</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimInitializationTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] simulation initialization timeout time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimStartRotationTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] simulation time to start rotate and Cross sensor needs to go away</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinPrePositionSpeed_rpm">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [rpm] PrePosition Speed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinPositionSpeed_rpm">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [rpm] Position Speed</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3f17a291-9641-4669-89b7-f74a33ea6b8f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_OVN">
              <baseType>
                <enum>
                  <values>
                    <value name="NONE" value="0" />
                    <value name="TempError" value="1" />
                    <value name="AirError" value="2" />
                    <value name="SpeedError" value="3" />
                    <value name="TimeoutError" value="4" />
                    <value name="ParameterWarning" value="5" />
                    <value name="ConnectionError" value="6" />
                    <value name="WrongMode" value="7" />
                    <value name="Tesoma10000" value="8" />
                    <value name="Tesoma10002" value="9" />
                    <value name="Tesoma10003" value="10" />
                    <value name="Tesoma10006" value="11" />
                    <value name="Tesoma10010" value="12" />
                    <value name="Tesoma10011" value="13" />
                    <value name="Tesoma10012" value="14" />
                    <value name="Tesoma10013" value="15" />
                    <value name="Tesoma10014" value="16" />
                    <value name="Tesoma10016" value="17" />
                    <value name="Tesoma10023" value="18" />
                    <value name="Tesoma10024" value="19" />
                    <value name="Tesoma10025" value="20" />
                    <value name="Tesoma10026" value="21" />
                    <value name="Tesoma10027" value="22" />
                    <value name="Tesoma10030" value="23" />
                    <value name="Tesoma10031" value="24" />
                    <value name="Tesoma10032" value="25" />
                    <value name="Tesoma10034" value="26" />
                    <value name="Tesoma10x00" value="27" />
                    <value name="Tesoma10x01" value="28" />
                    <value name="Tesoma10x02" value="29" />
                    <value name="Tesoma10x03" value="30" />
                    <value name="Tesoma10x07" value="31" />
                    <value name="Tesoma10x13" value="32" />
                    <value name="Tesoma10x14" value="33" />
                    <value name="Tesoma10x15" value="34" />
                    <value name="Tesoma13x00" value="35" />
                    <value name="TesomaUnknown" value="36" />
                    <value name="HostConnectionLost" value="37" />
                    <value name="SettingsChanged" value="38" />
                    <value name="MAX_E_ALM_OVN" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
                  <EnumValueDocumentation>
                    <EnumValue>
                      <Name>Tesoma10000</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> OvertemperaturePowerSection						- software reset	- operating mode must be reelected</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10002</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> FailureOfActiveCoolingUnit</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10003</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> ActiveCoolingUnitNotRunning</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10006</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> FailureFuseGeneral													- transport starts immediately when sensor is free</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10010</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> BeltPositionControlSensorError					- software reset</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10011</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> BeltEdgeShutOff									- software reset</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10012</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> FaultBeltSpeed									- software reset</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10013</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> TransportOverload</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10014</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> BeltControlDeviceFault							- software reset	- reset FC</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10016</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> EmergencyStop														- would be resettable, but since power is gone, the acknowledge does not arrive</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10023</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> BeltWearMonitor</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10024</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> ControlCabinetFan</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10025</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> ControlCabinetTemperatureTooHigh</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10026</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> PowerSupplyFailure</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10027</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> IntakeHoodTemperatureExceeded</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10030</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> AirPressureTooLow</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10031</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> BeltPositionControlNotWorking</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10032</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> ErrorCoolingDeviceControlCabinet</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10034</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> ControlCabinetCoolerAndSmallDrivesFuseFailure</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10x00</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> LimitSwitchingOff								- software reset	- after elimination, reactivates according zone</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10x01</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> OvertemperatureStl								- software reset	- after elimination AND reset, the STL reactivates the accordant zone</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10x02</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> FuseTriggered									- software reset	- after elimination, reactivates the accordant zone</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10x03</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> FailureExhaustAirDps								- software reset	- after elimination, reactivates the accordant zone</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10x07</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> ErrorFrequencyConverter							- software reset	- after elimination AND reset, the FC reactivates the accordant zone</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10x13</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> TemperatureSensorIrDefective</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10x14</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> FaultFrameCoolingSystemDps</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma10x15</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> FaultExhaustAirDps</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Tesoma13x00</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> TemperatureFault									- software reset</xhtml>
                      </Documentation>
                    </EnumValue>
                  </EnumValueDocumentation>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3b539a88-dc59-486c-9a4f-d59657f9b921</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_OVN">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_OVN_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_OVN_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_OVN_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_OVN_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_OVN_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="(E_ALM_OVN.MAX_E_ALM_OVN - 1)" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5bf0abf7-2f41-4968-9406-e6e481a8bebb</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_OVN_Cfg">
              <baseType>
                <struct>
                  <variable name="uiNumberOfModules">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number of Modules in use </xhtml>
                    </documentation>
                  </variable>
                  <variable name="diModuleLength_mm">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Length of one Module </xhtml>
                    </documentation>
                  </variable>
                  <variable name="diDistanceBeforeOven_mm">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Distance before the first Module </xhtml>
                    </documentation>
                  </variable>
                  <variable name="diDistanceAfterOven_mm">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Distance after the last Module </xhtml>
                    </documentation>
                  </variable>
                  <variable name="diMaxSpeed_mm_min">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Maximal Belt Speed in mm/min </xhtml>
                    </documentation>
                  </variable>
                  <variable name="diMinSpeed_mm_min">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Minimal Belt Speed in mm/min </xhtml>
                    </documentation>
                  </variable>
                  <variable name="diMinTemp_dc">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Minimal Temperature in deci °C </xhtml>
                    </documentation>
                  </variable>
                  <variable name="diMaxTemp_dc">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Maximal Temperature in deci °C </xhtml>
                    </documentation>
                  </variable>
                  <variable name="diMinAir_p">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Minimal Airflow in % </xhtml>
                    </documentation>
                  </variable>
                  <variable name="diMaxAir_p">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Maximal Airflow in % </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bAutoContinueAfterConnectionError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Auto Continue After Connection Error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolDataChannelEnable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enable Data Channel</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bIgnoreOffBusyWaitPaper">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> ignore waiting for Paper to eject in OFFBusy</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
                  <Inheritance>
                    <Extends>T_Ctrl_SIf_MOD_Cfg</Extends>
                  </Inheritance>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>087adcd4-9d88-4f62-8f11-c7111b108210</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_OVN_Cur">
              <baseType>
                <struct>
                  <variable name="diSpeed_mm_min">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Belt Speed in mm/min </xhtml>
                    </documentation>
                  </variable>
                  <variable name="adiTemp_dc">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperature in deci °C </xhtml>
                    </documentation>
                  </variable>
                  <variable name="adiAir_p">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Airflow in % </xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
                  <Inheritance>
                    <Extends>T_Ctrl_SIf_MOD_Cur</Extends>
                  </Inheritance>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a5033932-e555-4948-b0ec-251ba9021f8d</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_OVN_In">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>67a93611-1f65-415f-960c-36c29f43e034</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_OVN_Out">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>43b0d37f-f93b-4271-b079-fc0585919514</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_OVN_Par">
              <baseType>
                <struct>
                  <variable name="diSpeed_mm_min">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Belt Speed in mm/min </xhtml>
                    </documentation>
                  </variable>
                  <variable name="diSpeedBand1_mm_min">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Belt Speed Band in mm/min </xhtml>
                    </documentation>
                  </variable>
                  <variable name="diSpeedBand2_mm_min">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Belt Speed Band in mm/min </xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSpeedTimeout_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Belt Speed Timeout in ms </xhtml>
                    </documentation>
                  </variable>
                  <variable name="adiTemp_dc">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperature in deci °C </xhtml>
                    </documentation>
                  </variable>
                  <variable name="adiTempBand1_dc">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperature Band in deci °C </xhtml>
                    </documentation>
                  </variable>
                  <variable name="adiTempBand2_dc">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperature Band in deci °C </xhtml>
                    </documentation>
                  </variable>
                  <variable name="audiTempTimeout_ms">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <UDINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperature Timeout in ms </xhtml>
                    </documentation>
                  </variable>
                  <variable name="adiAir_p">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Airflow in % </xhtml>
                    </documentation>
                  </variable>
                  <variable name="adiAirBand1_p">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Airflow Band in % </xhtml>
                    </documentation>
                  </variable>
                  <variable name="adiAirBand2_p">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Airflow Band in % </xhtml>
                    </documentation>
                  </variable>
                  <variable name="audiAirTimeout_ms">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <UDINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Airflow Timeout in ms </xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTimeoutOffBusy_ms">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiTimeoutRunBusyReaction_ms">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiTimeoutRunBusyInBand_ms">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiTimeoutBeltOnlyReaction_ms">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiTimeoutBeltOnlyBusy_ms">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
                  <Inheritance>
                    <Extends>T_Ctrl_SIf_MOD_Par</Extends>
                  </Inheritance>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>8b0526c2-c659-4685-a2db-21c1fba552d3</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Data">
              <baseType>
                <struct>
                  <variable name="uliBarcode">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="bTrash">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="diDistance_um">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="diSumTemp_mc">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="diCyclesInModule">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="bBarcodeMissed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="enable_dynamic_creation" Value="" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f62c5f74-b049-4b44-a986-c74c61704aa9</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_PTB">
              <baseType>
                <enum>
                  <values>
                    <value name="TestAlarm" value="1" />
                    <value name="MAX_E_ALM_PTB" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>185a2a6c-bbe5-44eb-8928-25bb7caef71f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_BELT_DIRECTION">
              <baseType>
                <enum>
                  <values>
                    <value name="FORWARD" value="0" />
                    <value name="BACKWARD" value="1" />
                    <value name="MAX_E_BELT_DIRECTION" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b603305a-71be-4f2e-8ca7-abf199e3bb49</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_PTB_MODE">
              <baseType>
                <enum>
                  <values>
                    <value name="Endless" />
                    <value name="ToSensor" />
                    <value name="ToDistance" />
                    <value name="ToTime" />
                    <value name="Stack" />
                    <value name="MAX_E_PTB_MODE" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
                  <EnumValueDocumentation>
                    <EnumValue>
                      <Name>Endless</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>ToSensor</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>ToDistance</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 2</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>ToTime</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 3</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Stack</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 4</xhtml>
                      </Documentation>
                    </EnumValue>
                  </EnumValueDocumentation>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1284c56f-f9a2-43f5-b638-407dabecb4aa</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_PTB_PaperDirection">
              <baseType>
                <enum>
                  <values>
                    <value name="Portrait" />
                    <value name="Landscape" />
                    <value name="MAX_E_PTB_PaperDirection" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>8ef89328-ac0a-4a49-9941-36bd4879573d</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTB">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_PTB_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_PTB_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_PTB_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_PTB_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_PTB_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="E_ALM_PTB.MAX_E_ALM_PTB" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Ilk">
                    <type>
                      <derived name="T_Ctrl_SIf_PTB_Ilk" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock of output/movements</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>46332720-5139-4d93-9171-0144ee593238</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTB_Cfg">
              <baseType>
                <struct>
                  <variable name="eMode">
                    <type>
                      <derived name="E_PTB_MODE" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Function Mode</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolVacuumPresent">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Vacuum pump present</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiBeltLength_mm">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm] Length of the belt</xhtml>
                    </documentation>
                  </variable>
                  <variable name="rBeltParam">
                    <type>
                      <derived name="T_Belt_Cfg_Base" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Belt Parameter	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolEntrySensorDebounceEnable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enable Entry Belt Sensor Debounce</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolExitSensorDebounceEnable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enable Exit Belt Sensor Debounce</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>dd1e60ba-e7ac-4ad1-83d3-60eba5efedbb</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTB_Cur">
              <baseType>
                <struct>
                  <variable name="eActualDirection">
                    <type>
                      <derived name="E_BELT_DIRECTION" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> actual belt direction</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiDistanceToMove_mm">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm] Distance to move if Move Mode is distance</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTimeToMove_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Time to move</xhtml>
                    </documentation>
                  </variable>
                  <variable name="rBeltParam">
                    <type>
                      <derived name="T_Belt_Cur_Base" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Belt parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiBeltTimeBase_mm">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Belt Run Time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinPaperOnBelt">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper on the belt</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pPositionList">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PTR_STRUCT" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pointer to the Position list of the paper on the belt</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>6e53685b-14be-4f8a-843e-c1ae423586af</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTB_Ilk">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0ded9bee-50c8-4a7f-9608-f455fef7ada8</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTB_In">
              <baseType>
                <struct>
                  <variable name="bolBeltEntrySensor">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="bolBeltExitSensor">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="bolBeltEntrySensorPEdge">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="bolBeltEntrySensorNEdge">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="bolBeltExitSensorPEdge">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="bolBeltExitSensorNEdge">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>40ce6afc-0c1c-4af6-9b47-b37c063e97ce</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTB_Out">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b4cc2c79-6395-4fc8-942b-c4e9cbe496b9</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTB_Par">
              <baseType>
                <struct>
                  <variable name="intDirection">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> &lt;0 = Backward; =0 None; &gt;0 forward</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiDistanceToMove_mm">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm] Distance to move if Move Mode is distance</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTimeToMove_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Time to move</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinPaperStackHight">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Stack hight in # of sheets</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolAutoEjectAfterStack">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Automatic ejecting the paper if stackhight is reached</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolAutoStackAfterEject">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Automatic stacking the paper after ejecting all paper</xhtml>
                    </documentation>
                  </variable>
                  <variable name="rBeltParam">
                    <type>
                      <derived name="T_Belt_Par_Base" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Belt Parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiStackDelayTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Stack delay time - Delay before out motor can move after paper entered system</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiBeltLength_mm">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm] Belt Length</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ePaperOrientation">
                    <type>
                      <derived name="E_PTB_PaperDirection" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Page running format</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinPaperHight_mm">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm] Paper Hight</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinPaperWidth_mm">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm] Paper Width</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinInputSignalDebounceTime_ms">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Input Parameter Debounce time</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>830ba7d5-f8ef-488f-9c51-926ee240ce52</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_PBC">
              <baseType>
                <enum>
                  <values>
                    <value name="PaperTransport" value="1" />
                    <value name="BufferFull" value="2" />
                    <value name="BufferEmpty" value="3" />
                    <value name="DoublePaperError" value="4" />
                    <value name="DataChannelBufferFull" value="5" />
                    <value name="DataChannelSend" value="6" />
                    <value name="PaperInject" value="7" />
                    <value name="PaperInjectRetry" value="8" />
                    <value name="DoNotReleaseItems" value="9" />
                    <value name="DoublePaperWarning" value="10" />
                    <value name="MAX_E_ALM_PBC" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>07d753a4-ed3a-4205-b9d0-b6dd9e83f452</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_STOPREASON">
              <baseType>
                <enum>
                  <values>
                    <value name="None" />
                    <value name="StopByCommand" />
                    <value name="StopBySaber" />
                    <value name="StopByManual" />
                    <value name="MAX_STOPREASON" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>265c92cb-f90d-4512-b400-7fc9bf762399</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PBC">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_PBC_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_PBC_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_PBC_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_PBC_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_PBC_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="E_ALM_PBC.MAX_E_ALM_PBC" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Ilk">
                    <type>
                      <derived name="T_Ctrl_SIf_PBC_Ilk" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock of output/movements</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ec7fa547-4b97-4a81-a84e-af3a1a3b2ea5</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PBC_Cfg">
              <baseType>
                <struct>
                  <variable name="bolUseTurnTableSensorForEject">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> True : Use the turn table sensor to detect ejects.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolEnableDataChannel">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enable the Data Channel to Saber to send the read barcodes to Saber</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolGranulatAirPressureUnitAvailable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Airpressure unit for the granulate available</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolEnableSaberStopDeStack">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enable or Disable the Saber Stop DeStack to do manual operation</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>898a4ff4-029d-4277-980e-032befe8200a</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PBC_Cur">
              <baseType>
                <struct>
                  <variable name="intPaperInBufferCount">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> How many papers are in the buffer. -1 = Paper count unknown</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinPaperToEjectParameter">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Last Paper to eject count parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinPaperToEjectCount">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual count of the paper ejected </xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinSheetToSheetTime">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Time from sheet to sheet ejection in multi eject mode.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPaperBeforeEjectAvailable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Was paper before Eject available</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinPaperToPaperTime_ms">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper to paper Timeout</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiLastBarcode">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Last Read Barcode			</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiBarcodeChanged">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Total Paper Counter / Also used to signal a new Barcode read.			</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9faea2e0-08f9-4ee9-a829-9d131687df57</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PBC_Ilk">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>305f2183-23bb-4fcb-8728-10d231338f4e</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PBC_In">
              <baseType>
                <struct>
                  <variable name="bolPaperAvailableExit">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> This sensor shows if the buffer reaches his capacity limits</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPaperAvailableEntry">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shows if there is paper available in the buffer</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolCapacityReached">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shows if there is a paper on the output of the buffer</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolDoublePaperDetection">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Double paper detection</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolTurnTableMiddleSensor">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Turn Table Mid Sensor</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolAirPressorOk">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Airpressure Ok</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ccd0b3ac-c62e-4c7a-af02-b6f61ed750b0</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PBC_Out">
              <baseType>
                <struct>
                  <variable name="bolAirOn">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Air on the Airpressure supply unit on:</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>00798edf-83bd-49d2-b6e8-f8dc571b390b</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PBC_Par">
              <baseType>
                <struct>
                  <variable name="udiPaperTransportTime">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Paper transport timeout - Time that paper is allowed to have for the transport to the front.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSheetToEject">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sheet to output with one run command.  0 = endless until stop</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSheetToSheetTime">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Time from sheet to sheet ejection in multi eject mode in Auto Mode.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiManualSheetToSheetTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Time from sheet to sheet ejection in multi eject mode in Manual Mode.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimPaperTransportTime">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Paper transport time simulation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimPaperToPaperTransportTime">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Paper to paper transport time simulation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPaperInjectRetries">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> # of retries for paper transport. </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolEnableDoublePaperDetection">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enable Double Paper detection</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiDoublePaperDebounceTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Double Paper detection sensor debounce time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPaperInjectRetryPauseTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Retry Pause Time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolAutomaticMode">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Automatic or Manual DeStacking Mode</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolStopReleaseItems">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Indicates that the controller must not release any item but can still collect new items (RUN state). This flag is normally set by LineControl.</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>fa046228-65a0-4450-b90b-4fd6cf3f02e9</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_PCE">
              <baseType>
                <enum>
                  <values>
                    <value name="PaperSensorError" value="1" />
                    <value name="MAX_E_ALM_PCE" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5ddaf1ba-728a-4f0a-889a-3ef0d5ba47f0</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PCE">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_PCE_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_PCE_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_PCE_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_PCE_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_PCE_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="MAX_E_ALM_PCE" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Ilk">
                    <type>
                      <derived name="T_Ctrl_SIf_PCE_Ilk" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock of output/movements</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a6425465-7eae-4e76-b9e1-9e6eebac9a88</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PCE_Cfg">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>37000d34-edca-4045-8234-1a4fa51301ad</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PCE_Cur">
              <baseType>
                <struct>
                  <variable name="uinBeltSpeed">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm/s] Belt speed</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ffeb56dd-85a2-4f3a-8090-d4d72ad72f39</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PCE_Ilk">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>97768c26-913d-4406-97bc-435c622ef50d</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PCE_In">
              <baseType>
                <struct>
                  <variable name="bolPaperAvailable">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0 = Paper not here; 1 = Paper detected</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3f7e443f-fe1a-49ef-a7c2-1378ec4f91df</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PCE_Out">
              <baseType>
                <struct>
                  <variable name="bolVacuumValveIn">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper Incoming Belt - 0 = Vacuum Valve Closed;  1 = Vacuum valve open</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolVacuumValveOut">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper Outgoing Belt - 0 = Vacuum Valve Closed;  1 = Vacuum valve open</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>c46c4003-67b0-4ecd-a6ee-be311bc3de12</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PCE_Par">
              <baseType>
                <struct>
                  <variable name="uinPaperEntryDelayTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Paper entry delay time. Time delay between detection and switching the vacuum</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinPaperExitTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Paper exit time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinSimPaperExitTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Simulation Paper exit time</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>642efffb-d99e-47f2-ac1a-efe88c7c75d4</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_PST">
              <baseType>
                <enum>
                  <values>
                    <value name="StackIncomplete" value="1" />
                    <value name="NeedsEjectCommand" value="2" />
                    <value name="StackOkButLastCodeNotRight" value="3" />
                    <value name="StackNotOkButLastCodeRight" value="4" />
                    <value name="ReadingBarcodeFailedAfterXRetries" value="5" />
                    <value name="NewPaperDetectedDuringEjecting" value="6" />
                    <value name="NewPaperDetectedWhileBarcodeReading" value="7" />
                    <value name="MAX_E_ALM_PST" />
                  </values>
                  <baseType>
                    <UDINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>fb8f115b-73dc-4c4d-9e3b-d73e166ea250</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PST">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_PST_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_PST_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_PST_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_PST_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="E_ALM_PST.MAX_E_ALM_PST" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>58d0739e-4a8a-4029-ba5b-a0cf536771b3</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PST_Cfg">
              <baseType>
                <struct>
                  <variable name="bolEnableDataChannel">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enable data channel to saber</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinNumOfRetryRead">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number of retry barcode read command if failed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiEjectingDirection">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rotation direction for ejecting
 LEFT  = 1
 RIGHT = 2</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiReverseDirection">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rotation direction for reverse
 LEFT  = 1
 RIGHT = 2</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolEnablePstEjectControl">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enable PST controlled Eject</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>adcb3961-b87b-45f2-8018-1789940ada6d</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PST_Cur">
              <baseType>
                <struct>
                  <variable name="uinStackHight">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> # of papers in the stack</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiNumOfStacksEjectedTotal">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Total number of stacks ejected </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolStackIncomplete">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Indicates that the last stacking job was incomplete. Run command not possible. Needs eject command from saber.</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>fa22d38c-c5cf-4392-a225-50007f420a94</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PST_In">
              <baseType>
                <struct>
                  <variable name="bolSensorPaperAtOperatorPos">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBoolDebounced" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sensor detects if a paper is at the operator position</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSensorStopperPosition">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBoolDebounced" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sensor detects the stopper position (TRUE = stopper position down , FALSE = stopper position up)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSensorOutfeed">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBoolDebounced" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sensor detects paper on outfeed position </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSensorInfeed">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sensor detects paper on infeed position</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a204f6a2-6124-4daa-acde-65724e33b865</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PST_Par">
              <baseType>
                <struct>
                  <variable name="uinStackHight">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Stack hight in # of paper to eject. Sent by saber. </xhtml>
                    </documentation>
                  </variable>
                  <variable name="uliLastBarCodeInStack">
                    <type>
                      <ULINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Last barcode in stack. Sent by saber. 
 If stack hight is reached and last barcode in stack detected, stacker automatically eject the whole stack.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinBeltReverseSpeed_mmsec">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm/s] Belt reverse speed to bring stopper back to up position</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinBeltEjectSpeed_mmsec">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm/s] Belt speed for ejecting the whole stack</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPaperAtOpPosDebounceTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Paper is at operator position delay time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiStopperPosDebounceTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Stopper position delay time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSensorOutfeedDebounceTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Outfeed sensor delay time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiStackEjectDelayTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Stack eject delay time - Delay before belt starts to eject the stack if hight is reached.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiStackEjectingTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Stack ejecting time - Time for how long the belt should move in eject direction </xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiBeltReverseDelayTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Belt reverse delay time - Delay before belt starts moving backward after ejecting stack.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiBarcodeReaderTriggerDelayTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Barcode reader trigger delay time - Delay time, until a read command will be executed, after a new paper was detected at infeed sensor.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimTimePaperInfeedStroke_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Simulation time paper infeed stroke</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>dc629613-ceee-4bb0-9fbd-07d1b49f7bd2</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_ItemPaperInfo">
              <baseType>
                <struct>
                  <variable name="uinPosInStack">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Position in the stack</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uliBarCode">
                    <type>
                      <ULINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Barcode of the paper</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="enable_dynamic_creation" Value="" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ca9b333e-3027-40f6-af2e-a7ff12c0e406</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_PTS">
              <baseType>
                <enum>
                  <values>
                    <value name="PaperTransport" value="1" />
                    <value name="ModeParameter" value="2" />
                    <value name="TurnTableConfigMissmatch" value="3" />
                    <value name="MAX_E_ALM_PTS" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>054d011f-4a84-48e4-ba08-1819064b2746</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_PTS_MODE">
              <baseType>
                <enum>
                  <values>
                    <value name="Automatic" value="-2" />
                    <value name="Distribute" value="-1" />
                    <value name="FixA" value="0" />
                    <value name="FixB" value="1" />
                    <value name="FixC" value="2" />
                    <value name="MAX_E_PTS_MODE" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5529f173-ee9b-4396-96fd-ab6e360061ad</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTS">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_PTS_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_PTS_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_PTS_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_PTS_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_PTS_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="MAX_E_ALM_PTS" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Ilk">
                    <type>
                      <derived name="T_Ctrl_SIf_PTS_Ilk" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock of output/movements</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ec82b7b2-5c33-4c81-b389-b677fb3ce4ff</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTS_Cfg">
              <baseType>
                <struct>
                  <variable name="bolBarcodeReaderAvailable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Turns the barcode reader intelligence on. This makes the PTS nearly self sustained. </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolEntrySensorAvailable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> If there is no barcode but a sensor at the end of the entry belt </xhtml>
                    </documentation>
                  </variable>
                  <variable name="aFixPosDef">
                    <type>
                      <array>
                        <dimension lower="0" upper="(E_PTS_MODE.MAX_E_PTS_MODE - 1)" />
                        <baseType>
                          <derived name="T_PTS_InOutPositions" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper Input and Ouput Positions for the fixed modes</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aAutoPosDef">
                    <type>
                      <array>
                        <dimension lower="0" upper="(cPTS_MAX_AUTOPOS - 1)" />
                        <baseType>
                          <derived name="T_PTS_InOutPositions" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Automatic Mode Input and Output Positions</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aDefaultAutoPos">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Automatic Mode Default Input Positions</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aDistributionPositionDefinition">
                    <type>
                      <array>
                        <dimension lower="0" upper="(PTS_CmdState.cPTS_MAX_DISTRIBUTION - 1)" />
                        <baseType>
                          <derived name="E_PTS_MODE" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper Input and Ouput Positions for the fixed modes</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPositionMalteserEnable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Start positioning the malteser wheel before turning</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolRaxEnable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Use Servo Axis instead of Malteser for turning</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>283cb9b3-dba3-4af6-a60f-c02506c0ae38</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTS_Cur">
              <baseType>
                <struct>
                  <variable name="rInOutPosition">
                    <type>
                      <derived name="T_PTS_InOutPositions" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual Sheet In- Out- Positions</xhtml>
                    </documentation>
                  </variable>
                  <variable name="iActualDistributionIndex">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Saves the last executed distribution index</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPaperInTurnDelayTime">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Time to wait after paper was detected before to turn.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPaperOutTurnDelayTime">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Time to wait after paper is not detected anymore before to turn back.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPTS_Counter">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Count of turn movements in long term test</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>cb2af5e4-07b8-4ef2-b905-517e2466c72c</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTS_Ilk">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>2a38859f-d5f9-4289-98ef-01ec4024bce0</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTS_In">
              <baseType>
                <struct>
                  <variable name="bolPaperAvailable">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> This sensor shows if the paper is at the middle table possition</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPaperAtBeltExit">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> This sensor shows if the paper is available at the exit of the input belt</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1123bdf5-203e-4098-8049-39dfb154f05c</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTS_Out">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5dc8a1c3-ae78-4f0e-b7df-342fcfbaa401</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PTS_Par">
              <baseType>
                <struct>
                  <variable name="udiPaperInTurnDelayTime">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Time to wait after paper was detected before to turn.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPaperOutTurnDelayTime">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Time to wait after paper is not detected anymore before to turn back.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPaperBarcodeToInputSensorTime">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Timeout for the time the Paper can have between Barcode reader and Paper on table sensor.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="eMode">
                    <type>
                      <derived name="E_PTS_MODE" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Mode for turning</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimPaperBarcodeToInputSensorTime">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Simulation Timeout for the time the Paper can have between Barcode reader and Paper on table sensor.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolLongTimeTestEnable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Activate long time test</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>d3d69ab2-dec5-4d23-80df-1ab7408232e0</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTS_InOutPositions">
              <baseType>
                <struct>
                  <variable name="uinInput">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uinOutput">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="eDirection">
                    <type>
                      <derived name="E_TURN_DIRECTION" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5e53d583-ca37-4fa7-b1a5-bfa9770f9cf1</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_GRR">
              <baseType>
                <struct>
                  <variable name="io">
                    <type>
                      <derived name="T_GRR_IO" />
                    </type>
                  </variable>
                  <variable name="ctrl">
                    <type>
                      <derived name="T_GRR_CTRL" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <derived name="T_GRR_ID" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>4c52fe16-42bd-438e-8711-f613815f983f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_GRR_CTRL">
              <baseType>
                <struct>
                  <variable name="fbGrr">
                    <type>
                      <derived name="FB_GRR" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>7e0e6bd2-bcf5-4f53-978f-1f970a336a31</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_GRR_ID">
              <baseType>
                <struct>
                  <variable name="Grr">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f60abe5f-2361-4659-9b25-9a6949e9a3f5</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_GRR_IO">
              <baseType>
                <struct>
                  <variable name="Out_intCommand">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO INT" />
                    </type>
                  </variable>
                  <variable name="Out_intConveyorBelt">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO INT" />
                    </type>
                  </variable>
                  <variable name="Out_intPowderVibrator">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO INT" />
                    </type>
                  </variable>
                  <variable name="Out_intConveyorVibrator">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO INT" />
                    </type>
                  </variable>
                  <variable name="Out_intAnalogValue">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO INT" />
                    </type>
                  </variable>
                  <variable name="Out_uinFilterClearingCycleTime_min">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="Out_bolToggleBitGrr">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolSystemOk">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolMainPressureError">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolEoffOrFuseOk">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolPowderLowWarning">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolAutoMode">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_intState">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO INT" />
                    </type>
                  </variable>
                  <variable name="In_bolToggleBitGrn">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_intMainPressure">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO INT" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>e10f9a09-a4b3-49fa-a899-278d341d977b</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_JCL">
              <baseType>
                <struct>
                  <variable name="io">
                    <type>
                      <derived name="T_JCL_IO" />
                    </type>
                  </variable>
                  <variable name="ctrl">
                    <type>
                      <derived name="T_JCL_CTRL" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <derived name="T_JCL_ID" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>deba1ac3-57ec-4a28-9daf-015244a7c190</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_JCL_CTRL">
              <baseType>
                <struct>
                  <variable name="fbJcl">
                    <type>
                      <derived name="FB_JCL" />
                    </type>
                  </variable>
                  <variable name="fbJcl_Tcp">
                    <type>
                      <derived name="FB_TCP" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>00930d49-79c5-4a59-ae68-6a1bee28264a</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_JCL_ID">
              <baseType>
                <struct>
                  <variable name="Jcl">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Jcl_Tcp">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0276c646-1b20-454f-a9be-07bc04a1c272</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_JCL_IO">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>6eee058d-4fb6-4943-b523-089a0511865e</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCH">
              <baseType>
                <struct>
                  <variable name="io">
                    <type>
                      <derived name="T_BCH_IO" />
                    </type>
                  </variable>
                  <variable name="ctrl">
                    <type>
                      <derived name="T_BCH_CTRL" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <derived name="T_BCH_ID" />
                    </type>
                  </variable>
                  <variable name="datachn">
                    <type>
                      <derived name="T_BCH_DATACHN" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0c998de9-8cc7-4a56-ba39-b614c627e184</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCH_CTRL">
              <baseType>
                <struct>
                  <variable name="fbBch">
                    <type>
                      <derived name="FB_BCH" />
                    </type>
                  </variable>
                  <variable name="fbBch_Bcc">
                    <type>
                      <derived name="FB_BCC" />
                    </type>
                  </variable>
                  <variable name="fbBch_Bcc_Bcd">
                    <type>
                      <derived name="FB_BCD" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3a096a84-2bad-4e20-8736-1d2ea8669c0c</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCH_DATACHN">
              <baseType>
                <struct>
                  <variable name="rSendData">
                    <type>
                      <derived name="T_IdBaseSendData" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>cdfb3a61-5ebe-4a8e-b70d-5940300d81b7</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCH_ID">
              <baseType>
                <struct>
                  <variable name="Bch">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Bch_Bcc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Bch_Bcc_Bcd">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>4c3c8207-4514-47ab-82e4-c7142d181686</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCH_IO">
              <baseType>
                <struct>
                  <variable name="In_bolSensorTrigScan">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3cfb8697-5a9e-49e1-8d52-caa6bddf5c1b</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_OVN">
              <baseType>
                <struct>
                  <variable name="io">
                    <type>
                      <derived name="T_OVN_IO" />
                    </type>
                  </variable>
                  <variable name="ctrl">
                    <type>
                      <derived name="T_OVN_CTRL" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <derived name="T_OVN_ID" />
                    </type>
                  </variable>
                  <variable name="datachn">
                    <type>
                      <derived name="T_OVN_DATACHN" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>e2d02fca-0bf5-461e-a652-5b67acf96dd4</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_OVN_CTRL">
              <baseType>
                <struct>
                  <variable name="fbOvn">
                    <type>
                      <derived name="FB_OVN" />
                    </type>
                  </variable>
                  <variable name="fbOvn_Ibh">
                    <type>
                      <derived name="FB_IBH" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9ee4547e-ada7-4d19-afdd-b747fbc3fca5</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_OVN_DATACHN">
              <baseType>
                <struct>
                  <variable name="rSendData">
                    <type>
                      <derived name="T_OvenSendData" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f6dc13cd-c756-4b2a-b9d7-54dd1ff18b02</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_OVN_ID">
              <baseType>
                <struct>
                  <variable name="Ovn">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Ovn_Ibh">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ad6af004-2ef8-4e5f-b2a2-2050ad62b949</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_OVN_IO">
              <baseType>
                <struct>
                  <variable name="Out_uinBcrOvenAEvent">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="Out_udiBcrOvenACode">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO ULINT" />
                    </type>
                  </variable>
                  <variable name="Out_uinBcrOvenBEvent">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="Out_udiBcrOvenBCode">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO ULINT" />
                    </type>
                  </variable>
                  <variable name="In_bolBcrDistributionTrigger">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_udiBarcode_new_1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO ULINT" />
                    </type>
                  </variable>
                  <variable name="In_udiBarcode_new_2">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO ULINT" />
                    </type>
                  </variable>
                  <variable name="In_uinNew_element_1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinNew_element_2">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_udiBarcode_delete_1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO ULINT" />
                    </type>
                  </variable>
                  <variable name="In_udiBarcode_delete_2">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO ULINT" />
                    </type>
                  </variable>
                  <variable name="In_uinDelete_element_1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinDelete_element_2">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>d4e76a40-f511-4403-89cf-c0997e08e560</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTA">
              <baseType>
                <struct>
                  <variable name="io">
                    <type>
                      <derived name="T_PTA_IO" />
                    </type>
                  </variable>
                  <variable name="ctrl">
                    <type>
                      <derived name="T_PTA_CTRL" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <derived name="T_PTA_ID" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f2451757-fafd-4b5d-aa63-ca15aaf0f3d8</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTA_CTRL">
              <baseType>
                <struct>
                  <variable name="fbPta">
                    <type>
                      <derived name="FB_PTB" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> PTA is a special type of PTB</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbPta_Umc">
                    <type>
                      <derived name="FB_UMC" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>60c434a5-805d-46de-b3c5-3464f5565dce</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTA_ID">
              <baseType>
                <struct>
                  <variable name="Pta">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pta_Umc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>cec582b0-1df7-40b8-8c89-848144478305</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTA_IO">
              <baseType>
                <struct>
                  <variable name="In_bolInputSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolOutputSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_uinUmc_Status">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmc_ActualSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmc_IOData1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="In_uinUmc_ECatState">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_strUmc_ECatNetId">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO AMSNETID" />
                    </type>
                  </variable>
                  <variable name="In_uinUmc_ECatPort">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="Out_uinUmc_Control">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="Out_uinUmc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>19da3a1e-982a-47c2-b345-9bf78e8c390c</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Belt_Cfg_Base">
              <baseType>
                <struct>
                  <variable name="intForwardDirection">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Assign the motor rotation to a belt direction.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intBackwardDirection">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Assign the motor rotation to a belt direction.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="reaRpmDistance_mm">
                    <type>
                      <REAL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm] the belt travels per motor rotation</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5adf9fcb-2704-4517-830f-b2f55cd045a3</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Belt_Cur_Base">
              <baseType>
                <struct>
                  <variable name="uinBeltSpeed_mms">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [mm/s] Belt speed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinBeltSpeed_rpm">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [rpm] Belt speed</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>916d4012-4226-46b5-953f-331c4b61242c</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Belt_Par_Base">
              <baseType>
                <struct>
                  <variable name="uinBeltSpeed">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> eSpeedControlSelection.EFFECTIVE_SPEED : [mm/sec] Target speed. Uses reaRpmDistance_mm and uinLC11 to calculate the rpm</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinStackSpeed">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> eSpeedControlSelection.EFFECTIVE_SPEED : [mm/sec] Target speed. Uses reaRpmDistance_mm and uinLC11 to calculate the rpm</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0590959c-6c2c-4435-bdeb-4dc84d44bdbc</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTB">
              <baseType>
                <struct>
                  <variable name="io">
                    <type>
                      <derived name="T_PTB_IO" />
                    </type>
                  </variable>
                  <variable name="ctrl">
                    <type>
                      <derived name="T_PTB_CTRL" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <derived name="T_PTB_ID" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>444e9078-f870-425c-9778-05cd77ea2afa</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTB_CTRL">
              <baseType>
                <struct>
                  <variable name="fbPtb">
                    <type>
                      <derived name="FB_PTB" />
                    </type>
                  </variable>
                  <variable name="fbPtb_Umc">
                    <type>
                      <derived name="FB_UMC" />
                    </type>
                  </variable>
                  <variable name="fbPtb_Vpc">
                    <type>
                      <derived name="FB_VPC" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>730e6765-7006-4ad3-a3cd-be9016d6d61d</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTB_ID">
              <baseType>
                <struct>
                  <variable name="Ptb">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Ptb_Umc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Ptb_Vpc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b6b64924-2b7f-4a75-b49c-31a7e637c20c</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTB_IO">
              <baseType>
                <struct>
                  <variable name="In_bolInputSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolOutputSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolVpc_VacuumSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolVpc_PumpOk">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="Out_bolVpc_PumpOn">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolUmc_EmoOk">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_uinUmc_Status">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmc_ActualSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmc_IOData1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="In_uinUmc_ECatState">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_strUmc_ECatNetId">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO AMSNETID" />
                    </type>
                  </variable>
                  <variable name="In_uinUmc_ECatPort">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="Out_uinUmc_Control">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="Out_uinUmc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>e18177eb-a229-4348-81bc-3ab051c328a0</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PBC">
              <baseType>
                <struct>
                  <variable name="io">
                    <type>
                      <derived name="T_PBC_IO" />
                    </type>
                  </variable>
                  <variable name="ctrl">
                    <type>
                      <derived name="T_PBC_CTRL" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <derived name="T_PBC_ID" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>2ec7650c-9a5e-4ce0-ad44-a11a81359129</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PBC_CTRL">
              <baseType>
                <struct>
                  <variable name="fbPbc_PtbDeStacker">
                    <type>
                      <derived name="FB_PTB" />
                    </type>
                  </variable>
                  <variable name="fbPbc_PtbDeStacker_Umc">
                    <type>
                      <derived name="FB_UMC" />
                    </type>
                  </variable>
                  <variable name="fbPbc_PtbBelt">
                    <type>
                      <derived name="FB_PTB" />
                    </type>
                  </variable>
                  <variable name="fbPbc_PtbBelt_Umc">
                    <type>
                      <derived name="FB_UMC" />
                    </type>
                  </variable>
                  <variable name="fbPbc_PtbBelt_Vpc">
                    <type>
                      <derived name="FB_VPC" />
                    </type>
                  </variable>
                  <variable name="fbPbc">
                    <type>
                      <derived name="FB_PBC" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5a45d332-ebf9-483d-9ed4-a8db9fdb70b1</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PBC_ID">
              <baseType>
                <struct>
                  <variable name="Pbc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pbc_PtbDeStacker">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pbc_PtbDeStacker_Umc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pbc_PtbBelt">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pbc_PtbBelt_Umc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pbc_PtbBelt_Vpc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>caa203cc-72be-4259-b87b-9c5be7015c95</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PBC_IO">
              <baseType>
                <struct>
                  <variable name="In_bolPts_PaperSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">TODO: describe why this is here</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bolInputSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolOutputSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolCapacitySensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolDoublePaperSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolAirPressureOk">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="Out_bolAirPressureOn">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolPtbBelt_Vpc_VacuumSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolPtbBelt_Vpc_PumpOk">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="Out_bolPtbBelt_Vpc_PumpOn">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_uinPtbBelt_Umc_Status">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtbBelt_Umc_ActualSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtbBelt_Umc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtbBelt_Umc_IOData1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="In_uinPtbBelt_Umc_ECatState">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_strPtbBelt_Umc_ECatNetId">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO AMSNETID" />
                    </type>
                  </variable>
                  <variable name="In_uinPtbBelt_Umc_ECatPort">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="Out_uinPtbBelt_Umc_Control">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="Out_uinPtbBelt_Umc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtbDeStacker_Umc_Status">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtbDeStacker_Umc_ActualSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtbDeStacker_Umc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtbDeStacker_Umc_IOData1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="In_uinPtbDeStacker_Umc_ECatState">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_strPtbDeStacker_Umc_ECatNetId">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO AMSNETID" />
                    </type>
                  </variable>
                  <variable name="In_uinPtbDeStacker_Umc_ECatPort">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="Out_uinPtbDeStacker_Umc_Control">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="Out_uinPtbDeStacker_Umc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>23cea475-9ef2-4eda-a290-b979cc2bc72f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PCE">
              <baseType>
                <struct>
                  <variable name="io">
                    <type>
                      <derived name="T_PCE_IO" />
                    </type>
                  </variable>
                  <variable name="ctrl">
                    <type>
                      <derived name="T_PCE_CTRL" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <derived name="T_PCE_ID" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>fbf96a47-db7e-4d62-b6bd-22e5b5bdbc89</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PCE_CTRL">
              <baseType>
                <struct>
                  <variable name="fbPce">
                    <type>
                      <derived name="FB_PCE" />
                    </type>
                  </variable>
                  <variable name="fbPce_PtbIn">
                    <type>
                      <derived name="FB_PTB" />
                    </type>
                  </variable>
                  <variable name="fbPce_PtbIn_Umc">
                    <type>
                      <derived name="FB_UMC" />
                    </type>
                  </variable>
                  <variable name="fbPce_PtbIn_Vpc">
                    <type>
                      <derived name="FB_VPC" />
                    </type>
                  </variable>
                  <variable name="fbPce_PtbOut">
                    <type>
                      <derived name="FB_PTB" />
                    </type>
                  </variable>
                  <variable name="fbPce_PtbOut_Umc">
                    <type>
                      <derived name="FB_UMC" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b04df3cb-698e-4867-b5a0-1e6d152bafc1</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PCE_ID">
              <baseType>
                <struct>
                  <variable name="Pce">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pce_PtbIn">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pce_PtbIn_Umc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pce_PtbIn_Vpc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pce_PtbOut">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pce_PtbOut_Umc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9e1ef860-94a8-4ae4-8cb7-e5c4bae42b6a</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PCE_IO">
              <baseType>
                <struct>
                  <variable name="In_bolInputSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolOutputSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolCornerSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="Out_bolVacuumValveIn">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="Out_bolVacuumValveOut">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_uinUmcIn_Status">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmcIn_ActualSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmcIn_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmcIn_IOData1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="In_uinUmcIn_ECatState">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_strUmcIn_ECatNetId">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO AMSNETID" />
                    </type>
                  </variable>
                  <variable name="In_uinUmcIn_ECatPort">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="Out_uinUmcIn_Control">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="Out_uinUmcIn_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmcOut_Status">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmcOut_ActualSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmcOut_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinUmcOut_IOData1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="In_uinUmcOut_ECatState">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_strUmcOut_ECatNetId">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO AMSNETID" />
                    </type>
                  </variable>
                  <variable name="In_uinUmcOut_ECatPort">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="Out_uinUmcOut_Control">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="Out_uinUmcOut_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_bolVpc_VacuumSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolVpc_PumpOk">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="Out_bolVpc_PumpOn">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f932e0f7-afae-4414-8668-cb7a9d70f073</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PST">
              <baseType>
                <struct>
                  <variable name="io">
                    <type>
                      <derived name="T_PST_IO" />
                    </type>
                  </variable>
                  <variable name="ctrl">
                    <type>
                      <derived name="T_PST_CTRL" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <derived name="T_PST_ID" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ead61f37-9743-4b3a-9be3-ef92b97bdaba</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PST_CTRL">
              <baseType>
                <struct>
                  <variable name="fbPst">
                    <type>
                      <derived name="FB_PST" />
                    </type>
                  </variable>
                  <variable name="fbPst_Ptb">
                    <type>
                      <derived name="FB_PTB" />
                    </type>
                  </variable>
                  <variable name="fbPst_Ptb_Umc">
                    <type>
                      <derived name="FB_UMC" />
                    </type>
                  </variable>
                  <variable name="fbPst_Ptb_Vpc">
                    <type>
                      <derived name="FB_VPC" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>01636854-f3a0-43cb-92ed-a3ddc238745c</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PST_ID">
              <baseType>
                <struct>
                  <variable name="Pst">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pst_Ptb">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pst_Ptb_Umc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pst_Ptb_Vpc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>925a0024-5e53-4722-97c6-35607704151d</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PST_IO">
              <baseType>
                <struct>
                  <variable name="In_bolSensorPaperAtOperatorPos">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolSensorStopperPosition">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolSensorInfeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolSensorOutfeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolPtb_InputSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolPtb_OutputSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolPtb_Vpc_VacuumSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolPtb_Vpc_PumpOk">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="Out_bolPtb_Vpc_PumpOn">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_uinPtb_Umc_Status">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtb_Umc_ActualSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtb_Umc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtb_Umc_IOData1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="In_uinPtb_Umc_ECatState">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_strPtb_Umc_ECatNetId">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO AMSNETID" />
                    </type>
                  </variable>
                  <variable name="In_uinPtb_Umc_ECatPort">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="Out_uinPtb_Umc_Control">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="Out_uinPtb_Umc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>4e76754d-836d-43a4-9fa3-cf4cac853ea4</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTS">
              <baseType>
                <struct>
                  <variable name="io">
                    <type>
                      <derived name="T_PTS_IO" />
                    </type>
                  </variable>
                  <variable name="ctrl">
                    <type>
                      <derived name="T_PTS_CTRL" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <derived name="T_PTS_ID" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>be7806cb-f5cc-490e-a410-394ce19bae4a</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTS_CTRL">
              <baseType>
                <struct>
                  <variable name="fbPts_RAX_POD">
                    <type>
                      <derived name="FB_POD" />
                    </type>
                  </variable>
                  <variable name="fbPts_RAX">
                    <type>
                      <derived name="FB_RAX" />
                    </type>
                  </variable>
                  <variable name="fbPts_Ptb">
                    <type>
                      <derived name="FB_PTB" />
                    </type>
                  </variable>
                  <variable name="fbPts_Ptb_Umc">
                    <type>
                      <derived name="FB_UMC" />
                    </type>
                  </variable>
                  <variable name="fbPts_Ptb_Vpc">
                    <type>
                      <derived name="FB_VPC" />
                    </type>
                  </variable>
                  <variable name="fbPts_Mdc_Umc">
                    <type>
                      <derived name="FB_UMC" />
                    </type>
                  </variable>
                  <variable name="fbPts_Mdc">
                    <type>
                      <derived name="FB_MDC" />
                    </type>
                  </variable>
                  <variable name="fbPts">
                    <type>
                      <derived name="FB_PTS" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>908260a1-8597-4043-8962-82955516248a</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTS_ID">
              <baseType>
                <struct>
                  <variable name="Pts">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pts_Ptb">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pts_Ptb_Umc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pts_Ptb_Vpc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pts_Mdc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pts_Mdc_Umc">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Pts_RAX_POD">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> New Servo Drive PLC opend driver</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Pts_RAX">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> New Servo Drive</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>dcb242cc-f298-470a-9b98-0ee1351b7af7</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_PTS_IO">
              <baseType>
                <struct>
                  <variable name="In_bolPaperSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolMdc_CrossPositionSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolMdc_TablePositionSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_uinMdc_Umc_Status">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinMdc_Umc_ActualSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinMdc_Umc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinMdc_Umc_IOData1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="In_uinMdc_Umc_ECatState">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_strMdc_Umc_ECatNetId">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO AMSNETID" />
                    </type>
                  </variable>
                  <variable name="In_uinMdc_Umc_ECatPort">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="Out_uinMdc_Umc_Control">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="Out_uinMdc_Umc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtb_Umc_Status">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtb_Umc_ActualSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtb_Umc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_uinPtb_Umc_IOData1">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="In_uinPtb_Umc_ECatState">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_strPtb_Umc_ECatNetId">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO AMSNETID" />
                    </type>
                  </variable>
                  <variable name="In_uinPtb_Umc_ECatPort">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO WORD" />
                    </type>
                  </variable>
                  <variable name="Out_uinPtb_Umc_Control">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="Out_uinPtb_Umc_SetSpeed">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO UINT" />
                    </type>
                  </variable>
                  <variable name="In_bolPtb_Vpc_VacuumSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolPtb_Vpc_PumpOk">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="Out_bolPtb_Vpc_PumpOn">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                  <variable name="In_bolRax_PositionSensor">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>2ba2100c-0020-49d9-9f6f-98123c511758</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_OvenSendData">
              <baseType>
                <struct>
                  <variable name="fbDataChannel">
                    <type>
                      <derived name="FB_IdBaseSendDch" />
                    </type>
                  </variable>
                  <variable name="rDataChannelItem">
                    <type>
                      <derived name="T_Oven_DCH" />
                    </type>
                  </variable>
                  <variable name="fbFifo">
                    <type>
                      <derived name="FB_DataChannelSenderFifo" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>670bb272-b6c2-4851-a355-d8baafe795f9</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Oven_DCH">
              <baseType>
                <struct>
                  <variable name="rBaseInfo">
                    <type>
                      <derived name="T_ItemBase" />
                    </type>
                  </variable>
                  <variable name="udiIdentification">
                    <type>
                      <ULINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper ID</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bTrash">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Recipe  process parameter
 --------------------------------------------------------------
 Oven Data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="diTimeInOven_s">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="diTemperature_mc">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="diAirflow_prc">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="enable_dynamic_creation" Value="" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0c9a714c-88fd-4826-aaac-f9394c0ee232</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_IBH" pouType="functionBlock">
              <interface>
                <outputVars>
                  <variable name="Out_iStatus">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Status </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bOff">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Machine off </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bBeltOn">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Band on </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bManual">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Manual Mode </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bRun">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Standart drying process </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bSetParam">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Set Parameter </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bGetParam">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Get Parameter </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bAckError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Resetting error </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_adiTemp_dc">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual temperature in deci °C </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_adiAir_p">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Aactual airflow in % </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_diSpeed_mm_min">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual belt speed in mm/min </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_iErrorLevel">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1=Information, 2=Warning, 3=Error </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_iErrorID">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error ID (e.g. 100=temperature overflow) </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bDriverConnected">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bDriverError">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_udiDriverErrorID">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_IBH" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="iOff">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Turns oven off </xhtml>
                    </documentation>
                  </variable>
                  <variable name="iBeltOn">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Turns belt on </xhtml>
                    </documentation>
                  </variable>
                  <variable name="iManual">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Puts oven to manual  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="iRun">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Standart drying process </xhtml>
                    </documentation>
                  </variable>
                  <variable name="iSetParam">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Set Parameter </xhtml>
                    </documentation>
                  </variable>
                  <variable name="iGetParam">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Get Parameter </xhtml>
                    </documentation>
                  </variable>
                  <variable name="adiTemp_dc">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperature in deci °C </xhtml>
                    </documentation>
                  </variable>
                  <variable name="adiAir_p">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Airflow in % </xhtml>
                    </documentation>
                  </variable>
                  <variable name="diSpeed_mm_min">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Belt speed in mm/min </xhtml>
                    </documentation>
                  </variable>
                  <variable name="iAckError">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Try to reset error </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bIncrementSetParam">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bRememberIncrementSetParam">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="fbOpen">
                    <type>
                      <derived name="Tc2_S5S7Com.FB_NLinkOpen" />
                    </type>
                  </variable>
                  <variable name="fbWrite">
                    <type>
                      <derived name="Tc2_S5S7Com.FB_NLinkWrite" />
                    </type>
                  </variable>
                  <variable name="fbFetch">
                    <type>
                      <derived name="Tc2_S5S7Com.FB_NLinkFetch" />
                    </type>
                  </variable>
                  <variable name="fbClose">
                    <type>
                      <derived name="Tc2_S5S7Com.FB_NLinkClose" />
                    </type>
                  </variable>
                  <variable name="hLink">
                    <type>
                      <derived name="T_HNLINK" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Communication link handle </xhtml>
                    </documentation>
                  </variable>
                  <variable name="anReadBuffer">
                    <type>
                      <array>
                        <dimension lower="0" upper="(READ_BUFFER_LENGTH - 1)" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> read data buffer </xhtml>
                    </documentation>
                  </variable>
                  <variable name="anWriteBuffer">
                    <type>
                      <array>
                        <dimension lower="0" upper="(WRITE_BUFFER_LENGTH - 1)" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> data to write </xhtml>
                    </documentation>
                  </variable>
                  <variable name="iSimStatus">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> simulation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bSimOff">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bSimBeltOn">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bSimManual">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bSimRun">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <actions>
                <action name="setAckError">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">IF (iAckError = MAX_INT OR iAckError &lt; 0) THEN
	iAckError := 0;
END_IF

IF NOT CIf.SwCfg.bolSimulation THEN
	iAckError := iAckError + 1;
END_IF</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>44553939-dd9d-4573-96eb-714c3f62bf0d</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="setRun">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">IF (iRun = MAX_INT OR iRun &lt; 0) THEN
	iRun := 0;
END_IF

IF NOT CIf.SwCfg.bolSimulation THEN
	iRun := iRun + 1;
END_IF

// simulation
iSimStatus := 4;
bSimOff := FALSE;
bSimBeltOn := FALSE;
bSimManual := FALSE;
bSimRun := TRUE;</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>65c28abc-872d-4974-ac52-14b618da33da</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="setOff">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">IF (iOff = MAX_INT OR ioff &lt; 0) THEN
	iOff := 0;
END_IF

IF NOT CIf.SwCfg.bolSimulation THEN
	iOff := iOff + 1;
END_IF

// simulation
iSimStatus := 1;
bSimOff := TRUE;
bSimBeltOn := FALSE;
bSimManual := FALSE;
bSimRun := FALSE;</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>cf6019e3-6f56-4571-9556-7b2c8be4ce3a</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="setBeltOn">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">IF (iBeltOn = MAX_INT OR iBeltOn &lt; 0) THEN
	iBeltOn := 0;
END_IF

IF NOT CIf.SwCfg.bolSimulation THEN
	iBeltOn := iBeltOn + 1;
END_IF

// simulation
iSimStatus := 2;
bSimOff := FALSE;
bSimBeltOn := TRUE;
bSimManual := FALSE;
bSimRun := FALSE;</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>eb96f45a-ccbb-4b9d-b34a-02806c599568</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="setStandby">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">IF (iManual = MAX_INT OR iManual &lt; 0) THEN
	iManual := 0;
END_IF

IF NOT CIf.SwCfg.bolSimulation THEN
	iManual := iManual + 1;
END_IF

// simulation
iSimStatus := 3;
bSimOff := FALSE;
bSimBeltOn := FALSE;
bSimManual := TRUE;
bSimRun := FALSE;</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>ef93d172-8b44-42a4-9172-7b1faf91f740</ObjectId>
                    </data>
                  </addData>
                </action>
              </actions>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
IBH Link Connection Implementation

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.01.2014		BB			Start history
___________________________________________________________________________________________________*)

SUPER^();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="079a83bc-f368-473d-9a58-2d5eacbc7942">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		;
	END_IF
	
	// State Change Condition
	IF CIf.SwCfg.bolEnable THEN
		CASE me.intCmd OF
			// CONNECT
			IBH_CmdState.cCMD_CONNECT, IBH_CmdState.cCMD_WRITE, IBH_CmdState.cCMD_READ:
				me.StateMachine.intStateNext := IBH_CmdState.cSTA_CONNECTBusy;
		ELSE
			// DEFAULT
			;
		END_CASE
	END_IF


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="08684d9c-e6b9-47e2-aa66-b28ab5b7c8a7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		;
	END_IF
	
	// State Change Condition
	me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
	

// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="0accaec6-7a10-4d05-90a8-2093259b81bc">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CtrlInit();

// add childs
// ...</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="setTemp" ObjectId="12b4e731-abaa-42a5-a1ec-d738ad8ef065">
                    <interface>
                      <inputVars>
                        <variable name="In_adiTemp_dc">
                          <type>
                            <array>
                              <dimension lower="1" upper="MAX_NUMBER_OF_OVEN_MODULES" />
                              <baseType>
                                <DINT />
                              </baseType>
                            </array>
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperature in deci °C </xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="setTemp" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">adiTemp_dc := In_adiTemp_dc;
bIncrementSetParam := TRUE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="1e98861f-0bc6-4fd1-8c68-a6e91c74e1a0">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR uiIdx:=0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[uiIdx].intCmd=cSTA_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR

// Add configuration of own comands
CIf.Job.aCmdList[uiIdx].intCmd := IBH_CmdState.cCMD_CONNECT;
CIf.Job.aCmdList[uiIdx].strName := 'CONNECT';
CIf.Job.aCmdList[uiIdx].bolAvailable := TRUE;
uiIdx := uiIdx+1;
CIf.Job.aCmdList[uiIdx].intCmd := IBH_CmdState.cCMD_WRITE;
CIf.Job.aCmdList[uiIdx].strName := 'WRITE';
CIf.Job.aCmdList[uiIdx].bolAvailable := TRUE;
uiIdx := uiIdx+1;
CIf.Job.aCmdList[uiIdx].intCmd := IBH_CmdState.cCMD_READ;
CIf.Job.aCmdList[uiIdx].strName := 'READ';
CIf.Job.aCmdList[uiIdx].bolAvailable := TRUE;
uiIdx := uiIdx+1;
CIf.Job.aCmdList[uiIdx].intCmd := IBH_CmdState.cCMD_DISCONNECT;
CIf.Job.aCmdList[uiIdx].strName := 'DISCONNECT';
CIf.Job.aCmdList[uiIdx].bolAvailable := TRUE;

// set name of class/typ
CIf.Info.strType := 'FB_IBH';
CIf.Info.strFullName := 'IBH Link';

//*******************************************************************************
// initial values
//*******************************************************************************

// Software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// Internal Variables (Input)
iOff := 0;
iBeltOn := 0;
iManual := 0;
iRun := 0;
iSetParam := 0;
iGetParam := 0;
FOR uiIdx:=0 TO MAX_NUMBER_OF_OVEN_MODULES-1 BY 1 DO
	adiTemp_dc[uiIdx] := 0;
	adiAir_p[uiIdx] := 0;
END_FOR
diSpeed_mm_min := 0;
iAckError := 0;
bIncrementSetParam := FALSE;
bRememberIncrementSetParam := FALSE;

// simulation
iSimStatus := 1;
bSimOff := TRUE;
bSimBeltOn := FALSE;
bSimManual := FALSE;
bSimRun := FALSE;

// Configuration
SIf.Cfg.tIpAddress						:= '192.168.0.50';
SIf.Cfg.udiPortAdress					:= 1099;
SIf.Cfg.nDeviceAddress					:= 2;
SIf.Cfg.nDatablockNumber				:= 22;
SIf.Cfg.tTimeout						:= T#15S;

SIf.Cfg.nWriteStartAddress				:= 0;
SIf.Cfg.nReadStartAddress				:= 110;

SIf.Cfg.uiByteOffset_rd_iStatus			:= 0;
SIf.Cfg.uiByteOffset_rd_bOff			:= 10;
SIf.Cfg.uiBitOffset_rd_bOff				:= 0;
SIf.Cfg.uiByteOffset_rd_bBeltOn			:= 10;
SIf.Cfg.uiBitOffset_rd_bBeltOn			:= 1;
SIf.Cfg.uiByteOffset_rd_bManual			:= 10;
SIf.Cfg.uiBitOffset_rd_bManual			:= 2;
SIf.Cfg.uiByteOffset_rd_bRun			:= 10;
SIf.Cfg.uiBitOffset_rd_bRun				:= 3;
SIf.Cfg.uiByteOffset_rd_bSetParam		:= 10;
SIf.Cfg.uiBitOffset_rd_bSetParam		:= 4;
SIf.Cfg.uiByteOffset_rd_bGetParam		:= 10;
SIf.Cfg.uiBitOffset_rd_bGetParam		:= 5;
SIf.Cfg.uiByteOffset_rd_bAckError		:= 10;
SIf.Cfg.uiBitOffset_rd_bAckError		:= 6;
SIf.Cfg.uiByteOffset_rd_adiTemp_mc		:= 30;
SIf.Cfg.uiByteOffset_rd_adiAir_p		:= 62;
SIf.Cfg.uiByteOffset_rd_diSpeed_mm_min	:= 94;
SIf.Cfg.uiByteOffset_rd_iErrorLevel		:= 98;
SIf.Cfg.uiByteOffset_rd_iErrorID		:= 100;
SIf.Cfg.uiByteOffset_rd_iErrorValue		:= 102;

SIf.Cfg.uiByteOffset_wr_iOff			:= 0;
SIf.Cfg.uiByteOffset_wr_iBeltOn			:= 2;
SIf.Cfg.uiByteOffset_wr_iManual			:= 4;
SIf.Cfg.uiByteOffset_wr_iRun			:= 6;
SIf.Cfg.uiByteOffset_wr_iSetParam		:= 8;
SIf.Cfg.uiByteOffset_wr_iGetParam		:= 10;
SIf.Cfg.uiByteOffset_wr_iAckError		:= 12;
SIf.Cfg.uiByteOffset_wr_adiTemp_mc		:= 30;
SIf.Cfg.uiByteOffset_wr_adiAir_p		:= 62;
SIf.Cfg.uiByteOffset_wr_diSpeed_mm_min	:= 94;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CONNECTBusy" ObjectId="21ea10b9-d876-412b-a891-4fb2c3fb3e07">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bBusy">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="bError">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="udiErrID">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CONNECTBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		THIS^.fbOpen.stSettings.sHost			:= SIf.Cfg.tIpAddress; (* Remote (server) address. String containing an (Ipv4) Internet Protocol dotted address. *)
		THIS^.fbOpen.stSettings.nPort			:= SIf.Cfg.udiPortAdress; (* Remote (server) Internet Protocol (IP) port. *)
		THIS^.fbOpen.stSettings.eProtocol		:= eNLinkProtocol_MPI; (* Lan link protocol type *)
		THIS^.fbOpen.stSettings.eTransport		:= eNLinkTransport_TCPIP; (* Used transport protocol *)
		THIS^.fbOpen.tTimeout					:= SIf.Cfg.tTimeout; (* Maximum time allowed for the execution of the command *)
		
		IF NOT CIf.SwCfg.bolSimulation THEN
			// Open connection
			THIS^.fbOpen( hLink := hLink, bExecute := FALSE);
			THIS^.fbOpen( hLink := hLink, bExecute := TRUE);
		END_IF
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	
	// check status of fbOpen
	THIS^.fbOpen( hLink := hLink, bExecute := FALSE, bBusy=&gt;bBusy, bError=&gt;bError, nErrID=&gt;udiErrID);
	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		bBusy := FALSE;
		bError := FALSE;
		udiErrID := 0;
	END_IF
	
	// State Change Condition
	IF NOT bBusy THEN
		Out_udiDriverErrorID := udiErrID;
		IF bError THEN
			Out_bDriverError := TRUE;
			me.StateMachine.intStateNext := IBH_CmdState.cSTA_DISCONNECTBusy;
		ELSE
			Out_bDriverError := FALSE;
			me.StateMachine.intStateNext := IBH_CmdState.cSTA_CONNECT;
		END_IF
	END_IF


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="bitAccess" ObjectId="258f5bd2-1efd-436d-9211-e24d2dd2a567">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="in_byte">
                          <type>
                            <BYTE />
                          </type>
                        </variable>
                        <variable name="in_bit">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="bitAccess" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE in_bit OF
	0: bitAccess := in_byte.0;
	1: bitAccess := in_byte.1;
	2: bitAccess := in_byte.2;
	3: bitAccess := in_byte.3;
	4: bitAccess := in_byte.4;
	5: bitAccess := in_byte.5;
	6: bitAccess := in_byte.6;
	7: bitAccess := in_byte.7;
ELSE
	bitAccess := in_byte.0;
END_CASE</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_READBusy" ObjectId="2cb0706c-9fd7-431b-9abe-33bbdc307e7f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bBusy">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="bError">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="udiErrID">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_READBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		IF NOT CIf.SwCfg.bolSimulation THEN
			// Read data
			fbFetch(hLink := hLink, bExecute := FALSE );
			fbFetch(hLink := hLink, (* Communication link handle *)
					devAddr := SIf.Cfg.nDeviceAddress, (* Device address, MPI address of the remote component or its PROFIBUS address *)
					eArea:= eNLinkArea_DB, (* PLC data area *)
					nDB:= SIf.Cfg.nDatablockNumber, (* Data block number from which the data is read (DB, DX only). *)
					nOffset:= SIf.Cfg.nReadStartAddress, (* Start byte/word address from which the data are taken to *)
					cbBuffer:= SIZEOF(anReadBuffer), (* Contains the max. number of destination bytes to be received *)
					pBuffer:= ADR(anReadBuffer), (* Contains the address of the destination buffer for the received data *)
					bExecute:= TRUE); (* Rising edge at this input starts command execution *)
		END_IF
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	
	// check status of fbFetch
	fbFetch(hLink := hLink, bExecute := FALSE, bBusy=&gt;bBusy, bError=&gt;bError, nErrID=&gt;udiErrID);
	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		bBusy := FALSE;
		bError := FALSE;
		udiErrID := 0;
	END_IF
	
	// State Change Condition
	IF NOT bBusy THEN
		Out_udiDriverErrorID := udiErrID;
		IF bError THEN
			Out_bDriverError := TRUE;
			me.StateMachine.intStateNext := IBH_CmdState.cSTA_DISCONNECTBusy;
		ELSE
			Out_bDriverError := FALSE;
			me.StateMachine.intStateNext := IBH_CmdState.cSTA_READ;
		END_IF
	END_IF


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_WRITEBusy" ObjectId="38c336c1-bf31-4e72-aeaa-edfcb54fee24">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="bBusy">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="bError">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="udiErrID">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_WRITEBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		me.SubStateMachine.intState := IBH_CmdState.cSTA_SUB_1;
		me.SubStateMachine.intStateNext := IBH_CmdState.cSTA_SUB_1;
		
		// Prepare Write Buffer
		// !!!ATTENTION!!!
		// Motorola: Big-Endien: Most Significant Bits First (Siemens)
		// Intel: Little-Endien: Least Significant Bits First (Beckhoff)
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iOff		+0]	:= INT_TO_BYTE(SHR( THIS^.iOff,		1*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iOff		+1]	:= INT_TO_BYTE(SHR( THIS^.iOff,		0*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iBeltOn	+0]	:= INT_TO_BYTE(SHR( THIS^.iBeltOn,	1*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iBeltOn	+1]	:= INT_TO_BYTE(SHR( THIS^.iBeltOn,	0*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iManual	+0]	:= INT_TO_BYTE(SHR( THIS^.iManual,	1*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iManual	+1]	:= INT_TO_BYTE(SHR( THIS^.iManual,	0*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iRun		+0]	:= INT_TO_BYTE(SHR( THIS^.iRun,		1*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iRun		+1]	:= INT_TO_BYTE(SHR( THIS^.iRun,		0*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iSetParam	+0]	:= INT_TO_BYTE(SHR( THIS^.iSetParam,	1*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iSetParam	+1]	:= INT_TO_BYTE(SHR( THIS^.iSetParam,	0*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iGetParam	+0]	:= INT_TO_BYTE(SHR( THIS^.iGetParam,	1*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iGetParam	+1]	:= INT_TO_BYTE(SHR( THIS^.iGetParam,	0*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iAckError	+0]	:= INT_TO_BYTE(SHR( THIS^.iAckError,	1*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iAckError	+1]	:= INT_TO_BYTE(SHR( THIS^.iAckError,	0*8));
		FOR uiIdx:=0 TO SIf.Cfg.uiNumberOfModules-1 BY 1 DO
			anWriteBuffer[SIf.Cfg.uiByteOffset_wr_adiTemp_mc+0 + uiIdx*4] := DINT_TO_BYTE(SHR( THIS^.adiTemp_dc[uiIdx], 3*8));
			anWriteBuffer[SIf.Cfg.uiByteOffset_wr_adiTemp_mc+1 + uiIdx*4] := DINT_TO_BYTE(SHR( THIS^.adiTemp_dc[uiIdx], 2*8));
			anWriteBuffer[SIf.Cfg.uiByteOffset_wr_adiTemp_mc+2 + uiIdx*4] := DINT_TO_BYTE(SHR( THIS^.adiTemp_dc[uiIdx], 1*8));
			anWriteBuffer[SIf.Cfg.uiByteOffset_wr_adiTemp_mc+3 + uiIdx*4] := DINT_TO_BYTE(SHR( THIS^.adiTemp_dc[uiIdx], 0*8));
		END_FOR
		FOR uiIdx:=0 TO SIf.Cfg.uiNumberOfModules-1 BY 1 DO
			anWriteBuffer[SIf.Cfg.uiByteOffset_wr_adiAir_p+0 + uiIdx*4] := DINT_TO_BYTE(SHR( THIS^.adiAir_p[uiIdx], 3*8));
			anWriteBuffer[SIf.Cfg.uiByteOffset_wr_adiAir_p+1 + uiIdx*4] := DINT_TO_BYTE(SHR( THIS^.adiAir_p[uiIdx], 2*8));
			anWriteBuffer[SIf.Cfg.uiByteOffset_wr_adiAir_p+2 + uiIdx*4] := DINT_TO_BYTE(SHR( THIS^.adiAir_p[uiIdx], 1*8));
			anWriteBuffer[SIf.Cfg.uiByteOffset_wr_adiAir_p+3 + uiIdx*4] := DINT_TO_BYTE(SHR( THIS^.adiAir_p[uiIdx], 0*8));
		END_FOR
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_diSpeed_mm_min+0] := DINT_TO_BYTE(SHR( THIS^.diSpeed_mm_min, 3*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_diSpeed_mm_min+1] := DINT_TO_BYTE(SHR( THIS^.diSpeed_mm_min, 2*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_diSpeed_mm_min+2] := DINT_TO_BYTE(SHR( THIS^.diSpeed_mm_min, 1*8));
		anWriteBuffer[SIf.Cfg.uiByteOffset_wr_diSpeed_mm_min+3] := DINT_TO_BYTE(SHR( THIS^.diSpeed_mm_min, 0*8));
		
		bRememberIncrementSetParam := bIncrementSetParam;
		bIncrementSetParam := FALSE;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		me.SubStateMachine.intState := IBH_CmdState.cSTA_SUB_5;
		me.SubStateMachine.intStateNext := IBH_CmdState.cSTA_SUB_5;
	END_IF
		
	CASE me.SubStateMachine.intState OF
		
		// 1
		IBH_CmdState.cSTA_SUB_1:
			
			// Write data
			fbWrite(hLink := hLink, bExecute := FALSE );
			fbWrite(hLink := hLink,
					devAddr := SIf.Cfg.nDeviceAddress, (* Device address, MPI address of the remote component or its PROFIBUS address *)
					eArea:= eNLinkArea_DB, (* PLC data area *)
					nDB:= SIf.Cfg.nDatablockNumber, (* Data block number to which the data is written (DB, DX only) *)
					nOffset:= SIf.Cfg.nWriteStartAddress, (* Start byte/word address to which the data is send *)
					cbBuffer:= SIZEOF(anWriteBuffer), (* Contains the number of source bytes to be send *)
					pBuffer:= ADR(anWriteBuffer), (* Contains the address of the source buffer containing the data to be send *)
					bExecute:= TRUE); (* Rising edge at this input starts command execution *)
					
			me.SubStateMachine.intStateNext := IBH_CmdState.cSTA_SUB_2;
			
		// Wait and send 
		IBH_CmdState.cSTA_SUB_2:
			// check status of fbWrite
			fbWrite(hLink := hLink, bExecute := FALSE, bBusy=&gt;bBusy, bError=&gt;bError, nErrID=&gt;udiErrID);
			
			// State Change Condition
			IF NOT bBusy THEN
				Out_udiDriverErrorID := udiErrID;
				IF bError THEN
					Out_bDriverError := TRUE;
					me.StateMachine.intStateNext := IBH_CmdState.cSTA_DISCONNECTBusy;
				ELSE
					Out_bDriverError := FALSE;
					IF bRememberIncrementSetParam THEN
						me.SubStateMachine.intStateNext := IBH_CmdState.cSTA_SUB_3;
					ELSE
						me.SubStateMachine.intStateNext := IBH_CmdState.cSTA_SUB_5;
					END_IF
				END_IF
			END_IF
			
		// 3
		IBH_CmdState.cSTA_SUB_3:
			bRememberIncrementSetParam := FALSE;
			IF (iSetParam = MAX_INT OR iSetParam &lt; 0) THEN
				iSetParam := 0;
			END_IF
			iSetParam := iSetParam + 1;
		
			// Adapt Write Buffer
			anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iSetParam	+0]	:= INT_TO_BYTE(SHR( THIS^.iSetParam,	1*8));
			anWriteBuffer[SIf.Cfg.uiByteOffset_wr_iSetParam	+1]	:= INT_TO_BYTE(SHR( THIS^.iSetParam,	0*8));
			
			// Write data
			fbWrite(hLink := hLink, bExecute := FALSE );
			fbWrite(hLink := hLink,
					devAddr := SIf.Cfg.nDeviceAddress, (* Device address, MPI address of the remote component or its PROFIBUS address *)
					eArea:= eNLinkArea_DB, (* PLC data area *)
					nDB:= SIf.Cfg.nDatablockNumber, (* Data block number to which the data is written (DB, DX only) *)
					nOffset:= SIf.Cfg.nWriteStartAddress, (* Start byte/word address to which the data is send *)
					cbBuffer:= SIZEOF(anWriteBuffer), (* Contains the number of source bytes to be send *)
					pBuffer:= ADR(anWriteBuffer), (* Contains the address of the source buffer containing the data to be send *)
					bExecute:= TRUE); (* Rising edge at this input starts command execution *)
			
			me.SubStateMachine.intStateNext := IBH_CmdState.cSTA_SUB_4;
			
		// 4
		IBH_CmdState.cSTA_SUB_4:
			
			// check status of fbWrite
			fbWrite(hLink := hLink, bExecute := FALSE, bBusy=&gt;bBusy, bError=&gt;bError, nErrID=&gt;udiErrID);
			
			// State Change Condition
			IF NOT bBusy THEN
				Out_udiDriverErrorID := udiErrID;
				IF bError THEN
					Out_bDriverError := TRUE;
					me.StateMachine.intStateNext := IBH_CmdState.cSTA_DISCONNECTBusy;
				ELSE
					Out_bDriverError := FALSE;
					me.SubStateMachine.intStateNext := IBH_CmdState.cSTA_SUB_5;
				END_IF
			END_IF
			
		// 5
		IBH_CmdState.cSTA_SUB_5:
			me.StateMachine.intStateNext := IBH_CmdState.cSTA_WRITE;
			
	END_CASE
		

// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_WRITE" ObjectId="38f8544c-c647-41db-be4c-f8d9cdd1890a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_WRITE" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		;
	END_IF
	
	// State Change Condition
	CASE me.intCmd OF
		// OFF
		Base_PLC.cCMD_OFF:
			me.StateMachine.intStateNext := IBH_CmdState.cSTA_DISCONNECTBusy;
	ELSE
		// DEFAULT
		me.StateMachine.intStateNext := IBH_CmdState.cSTA_READBusy;
	END_CASE


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_DISCONNECT" ObjectId="3ee57a3d-048a-471e-8c35-53387a812277">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_DISCONNECT" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		;
	END_IF
	
	// State Change Condition
	CASE me.intCmd OF
		// OFF
		Base_PLC.cCMD_OFF:
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
	ELSE
		// DEFAULT
		me.StateMachine.intStateNext := IBH_CmdState.cSTA_CONNECTBusy;
	END_CASE


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="5d62d1c6-ef1a-4acf-8a92-c1d071f8a399">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_IBH" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_READ" ObjectId="75bf96e5-4d01-4337-b000-089b7dd4522e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_READ" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		THIS^.Out_iStatus	:= iSimStatus;
		THIS^.Out_bOff		:= bSimOff;
		THIS^.Out_bBeltOn	:= bSimBeltOn;
		THIS^.Out_bManual	:= bSimManual;
		THIS^.Out_bRun		:= bSimRun;
		THIS^.Out_bSetParam	:= FALSE;
		THIS^.Out_bGetParam	:= FALSE;
		THIS^.Out_bAckError	:= FALSE;
		
		IF bSimRun THEN
			Out_adiTemp_dc := adiTemp_dc;
			Out_adiAir_p := adiAir_p;
		ELSE
			FOR uiIdx:=0 TO SIf.Cfg.uiNumberOfModules BY 1 DO
				THIS^.Out_adiTemp_dc[uiIdx] := 0;
				THIS^.Out_adiAir_p[uiIdx] := 0;
			END_FOR
		END_IF
		
		IF bSimRun OR bSimBeltOn THEN
			Out_diSpeed_mm_min := diSpeed_mm_min;
		ELSE
			THIS^.Out_diSpeed_mm_min :=	0;
		END_IF
		
		THIS^.Out_iErrorLevel := 0;
		THIS^.Out_iErrorID := 0;
	ELSE
		// Analyse Read Buffer
		// !!!ATTENTION!!!
		// Motorola: Big-Endien: Most Significant Bits First (Siemens)
		// Intel: Little-Endien: Least Significant Bits First (Beckhoff)
		THIS^.Out_iStatus :=		SHL(BYTE_TO_INT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_iStatus+0]),1*8)
								+	SHL(BYTE_TO_INT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_iStatus+1]),0*8);
		THIS^.Out_bOff		:= bitAccess( anReadBuffer[SIf.Cfg.uiByteOffset_rd_bOff]		,SIf.Cfg.uiBitOffset_rd_bOff);
		THIS^.Out_bBeltOn	:= bitAccess( anReadBuffer[SIf.Cfg.uiByteOffset_rd_bBeltOn]		,SIf.Cfg.uiBitOffset_rd_bBeltOn);
		THIS^.Out_bManual	:= bitAccess( anReadBuffer[SIf.Cfg.uiByteOffset_rd_bManual]		,SIf.Cfg.uiBitOffset_rd_bManual);
		THIS^.Out_bRun		:= bitAccess( anReadBuffer[SIf.Cfg.uiByteOffset_rd_bRun]		,SIf.Cfg.uiBitOffset_rd_bRun);
		THIS^.Out_bSetParam	:= bitAccess( anReadBuffer[SIf.Cfg.uiByteOffset_rd_bSetParam]	,SIf.Cfg.uiBitOffset_rd_bSetParam);
		THIS^.Out_bGetParam	:= bitAccess( anReadBuffer[SIf.Cfg.uiByteOffset_rd_bGetParam]	,SIf.Cfg.uiBitOffset_rd_bGetParam);
		THIS^.Out_bAckError	:= bitAccess( anReadBuffer[SIf.Cfg.uiByteOffset_rd_bAckError]	,SIf.Cfg.uiBitOffset_rd_bAckError);
		FOR uiIdx:=0 TO SIf.Cfg.uiNumberOfModules BY 1 DO
			THIS^.Out_adiTemp_dc[uiIdx] :=		SHL(BYTE_TO_DINT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_adiTemp_mc+0 + uiIdx*4]),3*8)
											+	SHL(BYTE_TO_DINT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_adiTemp_mc+1 + uiIdx*4]),2*8)
											+	SHL(BYTE_TO_DINT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_adiTemp_mc+2 + uiIdx*4]),1*8)
											+	SHL(BYTE_TO_DINT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_adiTemp_mc+3 + uiIdx*4]),0*8);
		END_FOR
		FOR uiIdx:=0 TO SIf.Cfg.uiNumberOfModules BY 1 DO
			THIS^.Out_adiAir_p[uiIdx] :=		SHL(BYTE_TO_DINT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_adiAir_p+0 + uiIdx*4]),3*8)
											+	SHL(BYTE_TO_DINT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_adiAir_p+1 + uiIdx*4]),2*8)
											+	SHL(BYTE_TO_DINT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_adiAir_p+2 + uiIdx*4]),1*8)
											+	SHL(BYTE_TO_DINT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_adiAir_p+3 + uiIdx*4]),0*8);
		END_FOR
		THIS^.Out_diSpeed_mm_min :=		SHL(BYTE_TO_DINT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_diSpeed_mm_min+0]),3*8)
									+	SHL(BYTE_TO_DINT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_diSpeed_mm_min+1]),2*8)
									+	SHL(BYTE_TO_DINT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_diSpeed_mm_min+2]),1*8)
									+	SHL(BYTE_TO_DINT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_diSpeed_mm_min+3]),0*8);
		THIS^.Out_iErrorLevel :=		SHL(BYTE_TO_INT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_iErrorLevel+0]),1*8)
									+	SHL(BYTE_TO_INT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_iErrorLevel+1]),0*8);
		THIS^.Out_iErrorID :=			SHL(BYTE_TO_INT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_iErrorID+0]),1*8)
									+	SHL(BYTE_TO_INT(anReadBuffer[SIf.Cfg.uiByteOffset_rd_iErrorID+1]),0*8);
	END_IF
									
	// State Change Condition
	CASE me.intCmd OF
		// OFF
		Base_PLC.cCMD_OFF:
			me.StateMachine.intStateNext := IBH_CmdState.cSTA_DISCONNECTBusy;
	ELSE
		// DEFAULT
		me.StateMachine.intStateNext := IBH_CmdState.cSTA_WRITEBusy;
	END_CASE


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PONBusy" ObjectId="81d2c900-5bf7-4d3b-87af-25331d6880a6">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PONBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		;
	END_IF

	// State Change Condition
	me.StateMachine.intStateNext := Base_PLC.cSTA_PON;


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="9c944823-43df-4c10-babf-48ea7dfe4b42">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		;
	END_IF
	
	// Reset Output
	Out_bDriverError := FALSE;
	Out_udiDriverErrorID := 0;
	
	// State Change Condition
	me.StateMachine.intStateNext := Base_PLC.cCMD_OFF;


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="b6378721-e5d5-48a1-a704-766c361a5de7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	// CONNECT
    IBH_CmdState.cSTA_CONNECT: 
        THIS^.sta_CONNECT();
    IBH_CmdState.cSTA_CONNECTBusy: 
        THIS^.sta_CONNECTBusy();
	// WRITE
	IBH_CmdState.cSTA_WRITE: 
        THIS^.sta_WRITE();
    IBH_CmdState.cSTA_WRITEBusy: 
        THIS^.sta_WRITEBusy();
	// READ
	IBH_CmdState.cSTA_READ: 
        THIS^.sta_READ();
    IBH_CmdState.cSTA_READBusy: 
        THIS^.sta_READBusy();
	// DISCONNECT
	IBH_CmdState.cSTA_DISCONNECT: 
        THIS^.sta_DISCONNECT();
    IBH_CmdState.cSTA_DISCONNECTBusy: 
        THIS^.sta_DISCONNECTBusy();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="c3d516d7-ca61-4e12-ab7d-eb014c048419">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// cmd's
		CASE intCmdState OF
			IBH_CmdState.cCMD_CONNECT:
				getCmdState := 'CONNECT';
			IBH_CmdState.cCMD_WRITE:
				getCmdState := 'WRITE';
			IBH_CmdState.cCMD_READ:
				getCmdState := 'READ';
			IBH_CmdState.cCMD_DISCONNECT:
				getCmdState := 'DISCONNECT';
		ELSE
			getCmdState := 'Cmd not defined';
		END_CASE;
	ELSE
		// state's
		CASE intCmdState OF
			// CONNECT
			IBH_CmdState.cSTA_CONNECTBusy: 
				getCmdState := 'CONNECTBusy';
			IBH_CmdState.cSTA_CONNECT: 
				getCmdState := 'CONNECT';
			// WRITE
			IBH_CmdState.cSTA_WRITEBusy: 
				getCmdState := 'WRITEBusy';
			IBH_CmdState.cSTA_WRITE: 
				getCmdState := 'WRITE';
			// READ
			IBH_CmdState.cSTA_READBusy: 
				getCmdState := 'READBusy';
			IBH_CmdState.cSTA_READ: 
				getCmdState := 'READ';
			// DISCONNECT
			IBH_CmdState.cSTA_DISCONNECTBusy: 
				getCmdState := 'DISCONNECTBusy';
			IBH_CmdState.cSTA_DISCONNECT: 
				getCmdState := 'DISCONNECT';
		ELSE
			getCmdState := 'State not defined';
		END_CASE
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="setAirflow" ObjectId="cc113977-e485-4cd4-a01e-b812359ebd45">
                    <interface>
                      <inputVars>
                        <variable name="In_adiAir_p">
                          <type>
                            <array>
                              <dimension lower="1" upper="MAX_NUMBER_OF_OVEN_MODULES" />
                              <baseType>
                                <DINT />
                              </baseType>
                            </array>
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Airflow in % </xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="setAirflow" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">adiAir_p := In_adiAir_p;
bIncrementSetParam := TRUE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="ce678287-d0c0-4c11-aa96-f26232737c22">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="fbOVN">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// ----------------------------------------------------------------------------------
// Conditions Always
IF (me.bolChangeBackToAUTO=TRUE) THEN // switch mode to automatic switch off controller
	me.StateMachine.intStateNext := cSTA_OFFBusy;
	me.bolChangeBackToAUTO := FALSE;
END_IF

IF (CIf.SwCfg.bolExist=FALSE) THEN // hardware of controller does not exist
	me.StateMachine.intStateNext := cSTA_SINGLE_ANSWER;
ELSE
	IF (((me.StateMachine.intState=cSTA_INITIALIZED) OR (me.intCmd=cCMD_PON)) 
		AND (me.StateMachine.intState&lt;&gt;cSTA_PONBusy) AND (me.StateMachine.intState&lt;&gt;cSTA_PON)
		AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) 
		AND (me.StateMachine.intState&lt;&gt;cSTA_EOFF) AND (me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy)) THEN // switch after startup to PONBusy
		me.StateMachine.intStateNext := cSTA_PONBusy;
		
	ELSIF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.intCmd=cCMD_EOFF)) 
		AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) 
		AND (me.StateMachine.intState&lt;&gt;cSTA_EOFF) AND (me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy)
		AND (me.StateMachine.intState&gt;cSTA_PON)) THEN
		me.StateMachine.intStateNext := cSTA_EOFFBusy;
	
	ELSIF (((me.Alarm.eActivAlmClass=E_AlmClass.OFF) (*OR (me.intCmd=cCMD_OFF)*))
		AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit)
		AND (me.StateMachine.intState&lt;&gt;cSTA_EOFF) AND (me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy)
		AND (me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy)
		AND (me.StateMachine.intState&gt;cSTA_PON)) THEN
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	
	END_IF
	
	IF		NOT CIf.SwCfg.bolEnable
		AND (me.StateMachine.intState&lt;&gt;cSTA_OFF)
		AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy) THEN
		CIf.Job.intACmd := cCMD_OFF;
	END_IF
	
	Out_bDriverConnected := FALSE;
	IF		(me.StateMachine.intState=cSTA_WRITE) OR (me.StateMachine.intState=cSTA_WRITEBusy)
		OR	(me.StateMachine.intState=cSTA_READ) OR (me.StateMachine.intState=cSTA_READBusy) THEN
		Out_bDriverConnected := TRUE;
	END_IF
	
END_IF

// ----------------------------------------------------------------------------------
// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState = cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="setSpeed" ObjectId="e1ee721f-99f7-487d-be02-76937e33dab0">
                    <interface>
                      <inputVars>
                        <variable name="In_diSpeed_mm_min">
                          <type>
                            <DINT />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Belt speed in mm/min </xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="setSpeed" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">diSpeed_mm_min := In_diSpeed_mm_min;
bIncrementSetParam := TRUE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CONNECT" ObjectId="ee8c16a5-8b81-47d9-b812-1c3e8e6f51a5">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CONNECT" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		;
	END_IF
	
	// State Change Condition
	CASE me.intCmd OF
		// OFF
		Base_PLC.cCMD_OFF:
			me.StateMachine.intStateNext := IBH_CmdState.cSTA_DISCONNECTBusy;
	ELSE
		// DEFAULT
		me.StateMachine.intStateNext := IBH_CmdState.cSTA_WRITEBusy;
	END_CASE


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_DISCONNECTBusy" ObjectId="f12d780c-aad8-4f99-8cd6-b3f5cc2ebfc1">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bBusy">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="bError">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="udiErrID">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_DISCONNECTBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		IF NOT CIf.SwCfg.bolSimulation THEN
			// Close connection
			fbClose(hLink := hLink, bExecute := FALSE);
			fbClose(hLink := hLink, bExecute := TRUE);
		END_IF
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	
	// check status of fbClose
	fbClose(hLink := hLink, bExecute := FALSE, bBusy=&gt;bBusy, bError=&gt;bError, nErrID=&gt;udiErrID);
	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		bBusy := FALSE;
		bError := FALSE;
		udiErrID := 0;
	END_IF
	
	// State Change Condition
	IF NOT bBusy THEN
		Out_udiDriverErrorID := udiErrID;
		IF bError THEN
			Out_bDriverError := TRUE;
		ELSE
			Out_bDriverError := FALSE;
		END_IF
		me.StateMachine.intStateNext := IBH_CmdState.cSTA_DISCONNECT;
	END_IF

// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="ac1b81dd-4af3-4d7b-b0e2-b818e149d37c">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_IBH" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b0e34786-1945-4fbf-ba31-18ca8b1b1f1d</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_POD" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolHomeSwitch">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> home switch - only active if configured</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="bolInitDone">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bolActivate">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="SIf">
                    <type>
                      <derived name="T_POD" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> driver specific interface</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stAxisParameter">
                    <type>
                      <derived name="ST_AxisParameterSet" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">complete parameter set of the axis</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbAxis">
                    <type>
                      <derived name="AXIS_REF" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> axis reference (process data plc/nc)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stStateMachine">
                    <type>
                      <derived name="T_POD_StateMachine" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">	/// get direct drive state of yaskawa
	/// access over mapping!! {attribute 'TcLinkTo':='TIID^Device 1 (EtherCAT)^Box 1 (SGDV-E1 CoE Drive)^2nd Transmit PDO mapping^Status word'}
	In_worPOD_DriveState AT %I*: WORD;
	/// get direct drive inputs of yaskawa
	/// access over mapping!! {attribute 'TcLinkTo':='TIID^Device 1 (EtherCAT)^Box 1 (SGDV-E1 CoE Drive)^2nd Transmit PDO mapping^Status word'}
	In_udiPOD_DriveInputs AT %I*: UDINT;</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiCase">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">case variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiCaseScmd">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">case variable for service cmd's</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbMcPower">
                    <type>
                      <derived name="MC_Power" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> PlcOpen standard FUB's 
 enable and override</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbMcReset">
                    <type>
                      <derived name="MC_Reset" />
                    </type>
                  </variable>
                  <variable name="fbMcHalt">
                    <type>
                      <derived name="MC_Halt" />
                    </type>
                  </variable>
                  <variable name="fbMcAbsMove">
                    <type>
                      <derived name="MC_MoveAbsolute" />
                    </type>
                  </variable>
                  <variable name="fbMcModMove">
                    <type>
                      <derived name="MC_MoveModulo" />
                    </type>
                  </variable>
                  <variable name="fbMcRelMove">
                    <type>
                      <derived name="MC_MoveRelative" />
                    </type>
                  </variable>
                  <variable name="fbMcMoveVelocity">
                    <type>
                      <derived name="MC_MoveVelocity" />
                    </type>
                  </variable>
                  <variable name="fbMcJog">
                    <type>
                      <derived name="MC_Jog" />
                    </type>
                  </variable>
                  <variable name="fbMCStop">
                    <type>
                      <derived name="MC_Stop" />
                    </type>
                  </variable>
                  <variable name="fbMcHome">
                    <type>
                      <derived name="MC_Home" />
                    </type>
                  </variable>
                  <variable name="fbMCReadParameterSet">
                    <type>
                      <derived name="MC_ReadParameterSet" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">The complete parameter set of an axis can be read with the function block MC_ReadParameterSet.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbMCReadDriveAdress">
                    <type>
                      <derived name="MC_ReadDriveAddress" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> MC_ReadDriveAddress reads the ADS information that is required to access a drive device connected to an axis.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbMCWriteParameter">
                    <type>
                      <derived name="MC_WriteParameter" />
                    </type>
                  </variable>
                  <variable name="fbMCWriteBoolParameter">
                    <type>
                      <derived name="MC_WriteBoolParameter" />
                    </type>
                  </variable>
                  <variable name="fbMCReadParameter">
                    <type>
                      <derived name="MC_ReadParameter" />
                    </type>
                  </variable>
                  <variable name="fbMCReadBoolParameter">
                    <type>
                      <derived name="MC_ReadBoolParameter" />
                    </type>
                  </variable>
                  <variable name="fbMCReadAxisError">
                    <type>
                      <derived name="MC_ReadAxisError" />
                    </type>
                  </variable>
                  <variable name="fbEcCoeSdoWrite">
                    <type>
                      <derived name="FB_EcCoeSdoWrite" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ethercat standard FUB'</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbEcCoeSdoRead">
                    <type>
                      <derived name="FB_EcCoeSdoRead" />
                    </type>
                  </variable>
                  <variable name="fbEcSetSlaveState">
                    <type>
                      <derived name="FB_EcSetSlaveState" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> set ethercat mode preop/op</xhtml>
                    </documentation>
                  </variable>
                  <variable name="sinValue">
                    <type>
                      <SINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> help values for parameter handling</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intValue">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="dinValue">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="usiValue">
                    <type>
                      <USINT />
                    </type>
                  </variable>
                  <variable name="uinValue">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="udiValue">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="bolfpFirstCycleDone">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> help value for FUB handling</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbSimTON">
                    <type>
                      <derived name="TC2_STANDARD.TON" />
                    </type>
                  </variable>
                  <variable name="udiSimPosTime_ms">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="lreSimJogSpeed">
                    <type>
                      <LREAL />
                    </type>
                  </variable>
                  <variable name="lreActPos_old">
                    <type>
                      <LREAL />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
PLC open driver for servo drives.


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		18.06.2013		AVME/KVO	Start history
0.00.2		22.09.2014		AVME/MRU	Rework for Beckhoff Servo Drives
0.00.3		12.12.2014		AVME/MRU	Add cCMD_OFF
___________________________________________________________________________________________________*)


IF (bolActivate) THEN // cyclic call enabled
	
	IF (bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
		
		StateMachine_Service(); // handles asynchron service commands
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
	
END_IF;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PowerOnBusy" ObjectId="011f25cd-140c-4193-a2ba-9505be63b74e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PowerOnBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		fbMcPower.Enable := TRUE;
		
		// State Change Condition
		IF (fbMcPower.Error) THEN
			SIf.stErr.dwoErrorID := fbMcPower.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (SIf.stStatus.bolCtrlOn=TRUE) THEN
			stStateMachine.intStateNext := cPOD_STA_WaitForJob;
		END_IF
		
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sJobReadParameter" ObjectId="1c10f95a-852f-431a-85f7-e253bdbff567">
                    <interface>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sJobReadParameter" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">(*
The FB_EcCoeSdoRead function block allows data to be read from an EtherCAT slave through an SDO (Service Data Object) access. 
This requires the slave to have a mailbox and to support the "CANopen over EtherCAT" (CoE) protocol. 
The nSubIndex and nIndex parameters select the object that is to be read.*)

	fbEcCoeSdoRead.sNetId := fbMCReadDriveAdress.DriveAddress.NetID; // This is a string that contains the AMS network identifier of the EtherCAT master device.
	fbEcCoeSdoRead.nSlaveAddr := fbMCReadDriveAdress.DriveAddress.SlaveAddress; //  Fixed address of the EtherCAT slave to which the SDO download command should be sent.
	fbEcCoeSdoRead.nSubIndex  := SIf.stService.bytSubIndex;// Sub-index of the object that should be written to.
	fbEcCoeSdoRead.nIndex  := SIf.stService.worIndex; //  Index of the object that should be written to.
	fbEcCoeSdoRead.tTimeout := DEFAULT_ADS_TIMEOUT;
	
	IF (SIf.stService.dwo_pSrcBuf&lt;&gt;0) THEN // adress from value -&gt; use the external value
		fbEcCoeSdoRead.pDstBuf  := SIf.stService.dwo_pSrcBuf; // Address (pointer) of the send buffer.
		fbEcCoeSdoRead.cbBufLen  := SIf.stService.udi_cbBufLen; // Number (in bytes) of data to be sent.
	ELSE
		// use internal value - strValue from interface
		CASE SIf.stService.eValueType OF
			TYPE_SINT:
				fbEcCoeSdoRead.pDstBuf:= ADR(sinValue);
				fbEcCoeSdoRead.cbBufLen	:= SIZEOF(sinValue);
			TYPE_INT:
				fbEcCoeSdoRead.pDstBuf:= ADR(intValue);
				fbEcCoeSdoRead.cbBufLen	:= SIZEOF(intValue);
			TYPE_DINT:
				fbEcCoeSdoRead.pDstBuf:= ADR(dinValue);
				fbEcCoeSdoRead.cbBufLen	:= SIZEOF(dinValue);
			TYPE_USINT:
				fbEcCoeSdoRead.pDstBuf:= ADR(usiValue);
				fbEcCoeSdoRead.cbBufLen	:= SIZEOF(usiValue);
			TYPE_UINT:
				fbEcCoeSdoRead.pDstBuf:= ADR(uinValue);
				fbEcCoeSdoRead.cbBufLen	:= SIZEOF(uinValue);
			TYPE_UDINT:
				fbEcCoeSdoRead.pDstBuf:= ADR(udiValue);
				fbEcCoeSdoRead.cbBufLen	:= SIZEOF(udiValue);
			TYPE_STRING:
				fbEcCoeSdoRead.pDstBuf:= ADR(SIf.stService.strValue);
				fbEcCoeSdoRead.cbBufLen	:= SIZEOF(SIf.stService.strValue);
			ELSE
				fbEcCoeSdoRead.pDstBuf:= ADR(SIf.stService.strValue);
				fbEcCoeSdoRead.cbBufLen	:= SIZEOF(SIf.stService.strValue); // type not supported until now!!!!
			END_CASE
	END_IF;	
		
	// write bool value
	fbEcCoeSdoRead.bExecute := TRUE;
	fbEcCoeSdoRead();
	
	IF (fbEcCoeSdoRead.bBusy=FALSE) THEN
		IF (SIf.stService.dwo_pSrcBuf=0) THEN // adress from value -&gt; use the external value
			// use internal value - strValue from interface
			CASE SIf.stService.eValueType OF
			TYPE_SINT:
				SIf.stService.strValue	:= SINT_TO_STRING(sinValue);
			TYPE_INT:
				SIf.stService.strValue	:= INT_TO_STRING(intValue);
			TYPE_DINT:
				SIf.stService.strValue	:= DINT_TO_STRING(dinValue);
			TYPE_USINT:
				SIf.stService.strValue	:= USINT_TO_STRING(usiValue);
			TYPE_UINT:
				SIf.stService.strValue	:= UINT_TO_STRING(uinValue);
			TYPE_UDINT:
				SIf.stService.strValue	:= UDINT_TO_STRING(udiValue);
			TYPE_STRING:
				;
			ELSE
				; // type not supported until now!!!!
			END_CASE
		END_IF;
		SIf.intServiceCmd := cPOD_CMD_DONE;
	ELSIF (fbEcCoeSdoRead.bError)	THEN
		SIf.intServiceCmd := cPOD_CMD_DONE;
		SIf.stErr.dwoErrorID := fbEcCoeSdoRead.nErrId;
		stStateMachine.intStateNext := cPOD_STA_Error;
	END_IF






(*
This read command is only allowed with predefined values.....
IF (SIf.stService.bolHandleBoolValue) THEN
	// Read bool value
	fbMCReadBoolParameter.ParameterNumber := SIf.stService.intParameterNumber;
	fbMCReadBoolParameter.ReadMode := E_ReadMode.READMODE_ONCE;
	fbMCReadBoolParameter.Enable := TRUE;
	fbMCReadBoolParameter(Axis := fbAxis);
	
	IF (fbMCReadBoolParameter.Busy=FALSE) THEN
		SIf.stService.bolValue := fbMCReadBoolParameter.Value;
		SIf.intServiceCmd := cPOD_CMD_DONE;
	ELSIF (fbMCReadBoolParameter.Error)	THEN
		SIf.intServiceCmd := cPOD_CMD_DONE;
		SIf.stErr.dwoErrorID := fbMCReadBoolParameter.ErrorID;
		stStateMachine.intStateNext := cPOD_STA_Error;
	END_IF
else
	// Read real value
	fbMCReadParameter.ParameterNumber := SIf.stService.intParameterNumber;
	fbMCReadParameter.ReadMode := E_ReadMode.READMODE_ONCE;
	fbMCReadParameter.Enable := TRUE;
	fbMCReadParameter(Axis := fbAxis);
	
	IF (fbMCReadParameter.Busy=FALSE) THEN
		SIf.stService.relValue := fbMCReadParameter.Value;
		SIf.intServiceCmd := cPOD_CMD_DONE;
	ELSIF (fbMCReadParameter.Error)	THEN
		SIf.intServiceCmd := cPOD_CMD_DONE;
		SIf.stErr.dwoErrorID := fbMCReadParameter.ErrorID;
		stStateMachine.intStateNext := cPOD_STA_Error;
	END_IF
END_IF

*)

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_WaitForJob" ObjectId="1fce520a-3e05-4c62-b860-025b0942b262">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_WaitForJob" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		// State Change Condition
		IF (SIf.intCmd=cPOD_CMD_CTRL_OFF) THEN
			stStateMachine.intStateNext := cPOD_STA_PowerOff;
		ELSIF (SIf.intCmd=cPOD_CMD_CTRL_ON) THEN
			SIf.intCmd := cPOD_CMD_DONE;
		ELSIF (SIf.intCmd=cPOD_CMD_HOME) THEN
			stStateMachine.intStateNext := cPOD_STA_HomeBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_REL_MOVE) THEN
			stStateMachine.intStateNext := cPOD_STA_RelMoveBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_ABS_MOVE) THEN
			stStateMachine.intStateNext := cPOD_STA_AbsMoveBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_MOD_MOVE) THEN
			stStateMachine.intStateNext := cPOD_STA_ModMoveBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_POS_MOVE) THEN
			stStateMachine.intStateNext := cPOD_STA_PosMoveBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_NEG_MOVE) THEN
			stStateMachine.intStateNext := cPOD_STA_NegMoveBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_POS_JOG) THEN
			stStateMachine.intStateNext := cPOD_STA_PosJogBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_NEG_JOG) THEN
			stStateMachine.intStateNext := cPOD_STA_NegJogBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_STOP) THEN
			stStateMachine.intStateNext := cPOD_STA_StopBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_EMCY_STOP_CTRL_OFF) THEN
			stStateMachine.intStateNext := cPOD_STA_QStopBusy;	
		END_IF
		
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ModMoveBusy" ObjectId="21a7c9be-5961-4f35-969e-689970790486">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ModMoveBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		bolfpFirstCycleDone := FALSE;
		
		IF (SIf.stCfg.bolSimulation) THEN
			SIf.stStatus.bolInPos := FALSE;
			fbMcModMove.Position := SIf.stMove.lreSetPos;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		// Simulation
		IF (SIf.stCfg.bolSimulation) AND (fbSimTON.Q) THEN
			IF (ABS(SIf.stMove.lreActModPos-fbMcModMove.Position)&gt;((fbMcModMove.Velocity*udiSimPosTime_ms)/1000)) THEN
				IF ((fbMcModMove.Position&lt;SIf.stMove.lreSWLimitPos_mm) OR (SIf.stMove.lreSWLimitPos_mm=0)) AND (SIf.stMove.lreActModPos&lt;fbMcModMove.Position) THEN
					SIf.stMove.lreActModPos := SIf.stMove.lreActModPos + (fbMcModMove.Velocity*udiSimPosTime_ms)/1000.0;
					SIf.stMove.lreActVel := fbMcModMove.Velocity;
					SIf.stStatus.bolInPos := FALSE;
				ELSIF ((fbMcModMove.Position&gt;SIf.stMove.lreSWLimitNeg_mm) OR (SIf.stMove.lreSWLimitPos_mm=0)) AND (SIf.stMove.lreActModPos&gt;fbMcModMove.Position) THEN
					SIf.stMove.lreActModPos := SIf.stMove.lreActModPos - (fbMcModMove.Velocity*udiSimPosTime_ms)/1000.0;
					SIf.stMove.lreActVel := fbMcModMove.Velocity;
					SIf.stStatus.bolInPos := FALSE;
				ELSE
					SIf.stMove.lreActModPos := fbMcModMove.Position;
					SIf.stMove.lreActVel := 0;
					SIf.stStatus.bolInPos := TRUE;
				END_IF
			ELSE
				SIf.stMove.lreActModPos := fbMcModMove.Position;
				SIf.stMove.lreActVel := 0;
				SIf.stStatus.bolInPos := TRUE;
			END_IF
		END_IF

		// No change action
		//MC_MoveVelocity starts a continuous movement with specified velocity and direction. The movement can be stopped through a Stop command.
		IF (SIf.stMove.lreSetSpeed&gt;0) THEN
			fbMcModMove.Velocity := SIf.stMove.lreSetSpeed;
		ELSE
			fbMcModMove.Velocity := stAxisParameter.fVeloMaximum/10; // standard max / 10 Maximum travel velocity (&gt;0).
		END_IF
		
		fbMcModMove.Deceleration := SIf.stMove.lreSetDec; //  	Acceleration (≥0). If the value is 0, the standard acceleration from the axis configuration in the System Manager is used.
		fbMcModMove.Acceleration := SIf.stMove.lreSetAcc; //  	Deceleration (≥0). If the value is 0, the standard deceleration from the axis configuration in the System Manager is used.
		fbMcModMove.Jerk := SIf.stMove.lreSetJerk;
		fbMcModMove.Direction := SIf.stMove.eDirection;
		fbMcModMove.BufferMode := MC_BufferMode.MC_Aborting;
		fbMcModMove.Position := SIf.stMove.lreSetPos;
		fbMcModMove.Execute := TRUE;
		
		// State Change Condition
		IF (fbMcModMove.Error) AND (bolfpFirstCycleDone) THEN
			SIf.stErr.dwoErrorID := fbMcModMove.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (SIf.intCmd=cPOD_CMD_STOP) THEN
			stStateMachine.intStateNext := cPOD_STA_StopBusy;
		ELSIF (SIf.intCmd&lt;&gt;cPOD_CMD_MOD_MOVE) THEN
			stStateMachine.intStateNext := cPOD_STA_QStopBusy;
		ELSIF ((SIf.stCfg.bolSimulation AND SIf.stStatus.bolInPos) OR (fbMcModMove.Done)) AND (bolfpFirstCycleDone) THEN
			IF (SIf.intCmd=cPOD_CMD_MOD_MOVE) THEN
				SIf.intCmd := cPOD_CMD_DONE;
			END_IF;
			stStateMachine.intStateNext := cPOD_STA_WaitForJob;
		END_IF
		
		bolfpFirstCycleDone := TRUE; //at least one call at the end of the FUB needed!
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		fbMcModMove.Execute := FALSE;
		IF (SIf.stCfg.bolSimulation) THEN
			SIf.stMove.lreActVel := 0;
		END_IF
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PowerOff" ObjectId="237a76e0-1899-4f79-9270-ebe551dd3a3b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PowerOff" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		IF (SIf.stStatus.bolInitOk=FALSE) THEN
			fbMCReadParameterSet.Execute := TRUE;
		END_IF;

		
		fbMcPower.Enable := FALSE;
		SIf.intCmd := cPOD_CMD_DONE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		// init parameter set
		IF (SIf.stStatus.bolInitOk=FALSE)  THEN
			IF (fbMCReadParameterSet.Done=TRUE) THEN
				SIf.strAxisName := stAxisParameter.sAxisName;
				// init ads settings
				fbMCReadParameterSet.Execute := FALSE; // read parameter set done
				fbMCReadDriveAdress.Execute := TRUE;
			END_IF
			IF (fbMCReadDriveAdress.Done=TRUE) THEN
				SIf.stStatus.bolInitOk := TRUE; // read ads parameter set done
			END_IF;
		END_IF;
		
		// switch off of controller allready done!!
		IF (SIf.intCmd=cPOD_CMD_CTRL_OFF) OR (SIf.intCmd=cPOD_CMD_EMCY_STOP_CTRL_OFF) THEN
			SIf.intCmd:=cPOD_CMD_DONE;
		END_IF

		// State Change Condition
		IF (fbMcPower.Error) THEN
			SIf.stErr.dwoErrorID := fbMcPower.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (fbMCReadParameterSet.Error) THEN
			SIf.stErr.dwoErrorID := fbMCReadParameterSet.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (fbMCReadDriveAdress.Error) THEN
			SIf.stErr.dwoErrorID := fbMCReadDriveAdress.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF  (SIf.intCmd=cPOD_CMD_STORE_PARAMETER) THEN
			stStateMachine.intStateNext := cPOD_STA_StorePara;
		ELSIF (SIf.intCmd=cPOD_CMD_WRITE_PARAMETER) THEN
			stStateMachine.intStateNext := cPOD_STA_WritePara;	
		ELSIF(SIf.intCmd&lt;&gt;cPOD_CMD_DONE) THEN
			stStateMachine.intStateNext := cPOD_STA_PowerOnBusy;
		END_IF
		
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		fbMCReadParameterSet.Execute := FALSE;
		fbMCReadDriveAdress.Execute := FALSE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="313d5554-e956-47e2-8d43-c84d698c05d2">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// get string cmd/state string information in runtime
IF (bolState=FALSE) THEN
	// cmd's
	CASE intCmdState OF
		cPOD_CMD_DONE: 
			getCmdState := 'cPOD_CMD_DONE';
		cPOD_CMD_CTRL_ON: 
			getCmdState := 'cPOD_CMD_CTRL_ON';
		cPOD_CMD_CTRL_OFF: 
			getCmdState := 'cPOD_CMD_CTRL_OFF';
		cPOD_CMD_HOME: 
			getCmdState := 'cPOD_CMD_HOME';
		cPOD_CMD_REL_MOVE: 
			getCmdState := 'cPOD_CMD_REL_MOVE';
		cPOD_CMD_ABS_MOVE: 
			getCmdState := 'cPOD_CMD_ABS_MOVE';
		cPOD_CMD_MOD_MOVE: 
			getCmdState := 'cPOD_CMD_MOD_MOVE';
		cPOD_CMD_POS_MOVE: 
			getCmdState := 'cPOD_CMD_POS_MOVE';
		cPOD_CMD_NEG_MOVE: 
			getCmdState := 'cPOD_CMD_NEG_MOVE';
		cPOD_CMD_STOP: 
			getCmdState := 'cPOD_CMD_STOP';
		cPOD_CMD_EMCY_STOP_CTRL_OFF: 
			getCmdState := 'cPOD_CMD_EMCY_STOP_CTRL_OFF';
		cPOD_CMD_POS_JOG: 
			getCmdState := 'cPOD_CMD_POS_JOG';
		cPOD_CMD_NEG_JOG: 
			getCmdState := 'cPOD_CMD_NEG_JOG';
	END_CASE;
ELSE

// cmd's
	CASE intCmdState OF
		cPOD_STA_PowerOff: 
			getCmdState := 'cPOD_STA_PowerOff';
		cPOD_STA_Error: 
			getCmdState := 'cPOD_STA_Error';
		cPOD_STA_WaitForJob: 
			getCmdState := 'cPOD_STA_WaitForJob';
		cPOD_STA_PowerOnBusy: 
			getCmdState := 'cPOD_STA_PowerOnBusy';
		cPOD_STA_HomeBusy: 
			getCmdState := 'cPOD_STA_HomeBusy';
		cPOD_STA_RelMoveBusy: 
			getCmdState := 'cPOD_STA_RelMoveBusy';
		cPOD_STA_AbsMoveBusy: 
			getCmdState := 'cPOD_STA_AbsMoveBusy';
		cPOD_STA_PosMoveBusy: 
			getCmdState := 'cPOD_STA_PosMoveBusy';
		cPOD_STA_ModMoveBusy: 
			getCmdState := 'cPOD_STA_ModMoveBusy';
		cPOD_STA_NegJogBusy: 
			getCmdState := 'cPOD_STA_NegJogBusy';
		cPOD_STA_NegMoveBusy: 
			getCmdState := 'cPOD_STA_NegMoveBusy';
		cPOD_STA_PosJogBusy: 
			getCmdState := 'cPOD_STA_PosJogBusy';
		cPOD_STA_StopBusy: 
			getCmdState := 'cPOD_STA_StopBusy';
		cPOD_STA_QStopBusy: 
			getCmdState := 'cPOD_STA_QStopBusy';
		cPOD_STA_StorePara: 
			getCmdState := 'cPOD_STA_StorePara';
		cPOD_STA_WritePara: 
			getCmdState := 'cPOD_STA_WritePara';
	END_CASE;
END_IF

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sJobReadParameterNC" ObjectId="37aeaf75-c9ba-47db-8e5b-1a766ffdc49a">
                    <interface>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sJobReadParameterNC" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">(*The function block MC_ReadParameter is used to read an axis parameter.*)
IF ((fbMCReadParameter.ParameterNumber = MC_AxisParameter.EnableLimitPos) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.EnableLimitNeg) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.EnablePosLagMonitoring) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisEnMinSoftPosLimit) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisEnMaxSoftPosLimit) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisEnPositionLagMonitoring) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisEnPositionRangeMonitoring) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisEnTargetPositionMonitoring) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisEnInTargetTimeout) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisEnMotionMonitoring) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisEnLoopingDistance) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisEnBacklashCompensation) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisEnDataPersistence) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisEncoderDirectionInverse) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisEnablePosCorrection) OR
	(fbMCReadParameter.ParameterNumber = MC_AxisParameter.AxisMotorDirectionInverse)) THEN
	// Bool Parameter
	fbMCReadBoolParameter.ParameterNumber := SIf.stService.eNC_ParNumber;
	fbMCReadBoolParameter.ReadMode := E_ReadMode.READMODE_ONCE;
	fbMCReadBoolParameter.Enable := TRUE;
	fbMCReadBoolParameter(Axis := fbAxis);
ELSE
	fbMCReadParameter.ParameterNumber := SIf.stService.eNC_ParNumber;
	fbMCReadParameter.ReadMode := E_ReadMode.READMODE_ONCE;
	fbMCReadParameter.Enable := TRUE;
	fbMCReadParameter(Axis := fbAxis);
END_IF


IF (fbMCReadParameter.Busy=FALSE) AND (fbMCReadParameter.Enable) THEN
	IF (fbMCReadParameter.Valid) THEN
		SIf.stService.strValue	:= LREAL_TO_STRING(fbMCReadParameter.Value);
	ELSE
		SIf.stService.strValue := 'not valid value';
	END_IF;
	SIf.intServiceCmd := cPOD_CMD_DONE;
ELSIF (fbMCReadBoolParameter.Busy=FALSE) AND (fbMCReadBoolParameter.Enable) THEN
	IF (fbMCReadBoolParameter.Valid) THEN
		SIf.stService.strValue	:= BOOL_TO_STRING(fbMCReadBoolParameter.Value);
	ELSE
		SIf.stService.strValue := 'not valid value';
	END_IF;
	SIf.intServiceCmd := cPOD_CMD_DONE;
ELSIF (fbMCReadParameter.Error)	THEN
	SIf.intServiceCmd := cPOD_CMD_DONE;
	SIf.stErr.dwoErrorID := fbMCReadParameter.ErrorID;
	stStateMachine.intStateNext := cPOD_STA_Error;
ELSIF (fbMCReadBoolParameter.Error)	THEN
	SIf.intServiceCmd := cPOD_CMD_DONE;
	SIf.stErr.dwoErrorID := fbMCReadBoolParameter.ErrorID;
	stStateMachine.intStateNext := cPOD_STA_Error;
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_QStopBusy" ObjectId="5614d7b2-f83a-4c60-93dc-62f8eba14680">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_QStopBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
		SIf.intCmd := cPOD_CMD_DONE;
		bolfpFirstCycleDone := FALSE;
		
		IF (SIf.stCfg.bolSimulation) THEN
			SIf.stMove.lreActVel := 0;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		//MC_Stop stops an axis with a defined braking ramp and blocks the axis for any motion commands. This behavior qualifies the block for stops under special circumstances where the axis must be prevented from further motion.
		fbMCStop.Deceleration := SIf.stMove.lreSetDecFast;
		fbMCStop.Jerk := SIf.stMove.lreSetDecFast*10; //Jerk (≥0). If the value is 0, the jerk parameterised with the last Move command is used.
		fbMCStop.Execute := TRUE;
	
		// State Change Condition
		IF (fbMCStop.Error) THEN
			SIf.stErr.dwoErrorID := fbMCStop.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (fbMCStop.Done) OR (SIf.stCfg.bolSimulation) THEN
			IF (SIf.stStatus.bolNegHWSwitch) OR (SIf.stStatus.bolPosHWSwitch)THEN
				stStateMachine.intStateNext := cPOD_STA_Error;
			ELSE
				stStateMachine.intStateNext := cPOD_STA_PowerOff;
			END_IF
			
		END_IF
		bolfpFirstCycleDone := TRUE; //at least one call at the end of the FUB needed!
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		fbMCStop.Execute := FALSE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_NegMoveBusy" ObjectId="76c867bf-c27c-4cfb-9b40-249ef6609504">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_NegMoveBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		// Simulation
		IF (SIf.stCfg.bolSimulation) AND (fbSimTON.Q) THEN
			// JOG negative
			IF (SIf.stMove.lreActPos&gt;SIf.stMove.lreSWLimitNeg_mm) THEN
				SIf.stMove.lreActPos := SIf.stMove.lreActPos - (fbMcMoveVelocity.Velocity*udiSimPosTime_ms)/1000;
				SIf.stMove.lreActVel := fbMcMoveVelocity.Velocity;
			ELSE
				SIf.stMove.lreActVel := 0;
			END_IF
		END_IF

		// No change action
		//MC_MoveVelocity starts a continuous movement with specified velocity and direction. The movement can be stopped through a Stop command.
		IF (SIf.stMove.lreSetSpeed&gt;0) THEN
			fbMcMoveVelocity.Velocity := SIf.stMove.lreSetSpeed;
		ELSE
			fbMcMoveVelocity.Velocity := stAxisParameter.fVeloMaximum/10; // standard max / 10 Maximum travel velocity (&gt;0).
		END_IF
		fbMcMoveVelocity.Deceleration := SIf.stMove.lreSetDec;
		fbMcMoveVelocity.Acceleration := SIf.stMove.lreSetAcc;
		fbMcMoveVelocity.Jerk := SIf.stMove.lreSetJerk;
		fbMcMoveVelocity.Direction := TC2_MC2.MC_Direction.MC_Negative_Direction;
		fbMcMoveVelocity.Execute := TRUE;
		
		// State Change Condition
		IF (fbMcMoveVelocity.Error) THEN
			SIf.stErr.dwoErrorID := fbMcMoveVelocity.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (SIf.intCmd=cPOD_CMD_STOP) THEN
			stStateMachine.intStateNext := cPOD_STA_StopBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_POS_MOVE) THEN
			stStateMachine.intStateNext := cPOD_STA_PosMoveBusy;
		ELSIF (SIf.intCmd&lt;&gt;cPOD_CMD_NEG_MOVE) THEN
			stStateMachine.intStateNext := cPOD_STA_QStopBusy;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		fbMcMoveVelocity.Execute := FALSE;
		IF (SIf.stCfg.bolSimulation) THEN
			SIf.stMove.lreActVel := 0;
		END_IF
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleEndDuty" ObjectId="a5717383-8102-439e-9a85-e1b67dbdcf82">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleEndDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.strState := THIS^.getCmdState(intCmdState:=stStateMachine.intState,bolState:=TRUE);

IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
	stStateMachine.intState := stStateMachine.intStateNext;  // set next state for next cycle
END_IF

(***************************************************************
        Function Block Calls
***************************************************************)

// Simulation active
IF (SIf.stCfg.bolSimulation) THEN
	udiSimPosTime_ms := 50;
	lreSimJogSpeed := 500.0;
	
	IF (fbSimTON.Q) THEN
		fbSimTON.IN := FALSE;
		fbSimTON(); // reset!!!
		fbSimTON.IN := TRUE;
	ELSE
		fbSimTON.IN := TRUE;
	END_IF
	fbSimTON.PT := UDINT_TO_TIME(udiSimPosTime_ms);
	fbSimTON();
	
	SIf.stStatus.bolCtrlOn := fbMcPower.Enable;
	
	SIf.stStatus.bolPosSWSwitch := FALSE;
	SIf.stStatus.bolNegSWSwitch := FALSE;	
	IF (SIf.stMove.lreActPos&gt;SIf.stMove.lreSWLimitPos_mm) THEN
		SIf.stStatus.bolPosSWSwitch := TRUE;
	ELSIF (SIf.stMove.lreActPos&lt;SIf.stMove.lreSWLimitNeg_mm) THEN
		SIf.stStatus.bolNegSWSwitch := TRUE;
	END_IF
ELSE

	(************************** MC_POWER ****************************)
	(* enable and override *)
	fbMCPower.Enable_Positive :=fbMCPower.Enable;
	fbMCPower.Enable_Negative :=fbMCPower.Enable; 
	fbMCPower(Axis := fbAxis);
	(************************** MC_RESET ****************************)
	fbMcReset(Axis := fbAxis);
	(************************** MC_Halt ****************************)
	fbMcHalt(Axis := fbAxis);
	(************************** MC_Home ****************************)
	fbMcHome(Axis := fbAxis);
	(************************** MC_MoveAbsolute ****************************)
	fbMcAbsMove(Axis := fbAxis);
	(************************** MC_MoveModulo ****************************)
	fbMcModMove(Axis := fbAxis);
	(************************** MC_MoveRelative ****************************)
	fbMcRelMove(Axis := fbAxis);
	(************************** MC_MoveVelocity ****************************)
	fbMcMoveVelocity(Axis := fbAxis);
	(************************** MC_Jog ****************************)
	fbMcJog(Axis := fbAxis);
	(************************** MC_Stop ****************************)
	fbMCStop(Axis := fbAxis);
	(************************** MC_ReadParameterSet ****************************)
	fbMCReadParameterSet(Axis := fbAxis, Parameter:= stAxisParameter);
	(************************** MC_ReadDriveAdress ****************************)
	fbMCReadDriveAdress(Axis := fbAxis);

END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PosJogBusy" ObjectId="b04edc0b-7649-4df7-ae8d-fd4c1dff9711">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PosJogBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		// Simulation
		IF (SIf.stCfg.bolSimulation) AND (fbSimTON.Q) THEN
			// JOG positive
			IF (SIf.stMove.lreActPos&lt;SIf.stMove.lreSWLimitPos_mm) THEN
				SIf.stMove.lreActPos := SIf.stMove.lreActPos + (lreSimJogSpeed*udiSimPosTime_ms)/1000;
				SIf.stMove.lreActVel := lreSimJogSpeed;
			ELSE
				SIf.stMove.lreActVel := 0;
			END_IF
		END_IF

		// No change action
		// MC_JOGMODE_STANDARD_SLOW
		//The axis moves as long as the signal at one of the jog inputs is TRUE. The low velocity for manual functions specified in the TwinCAT System Manager and standard dynamics are used. In this mode the position, velocity and dynamics data specified in the function block have no effect.
		fbMcJog.Velocity := SIf.stMove.lreSetSpeed;
		fbMcJog.Deceleration := SIf.stMove.lreSetDec;
		fbMcJog.Acceleration := SIf.stMove.lreSetAcc;
		fbMcJog.Jerk := SIf.stMove.lreSetJerk;
		fbMcJog.Mode := TC2_MC2.E_JogMode.MC_JOGMODE_STANDARD_SLOW; //MC_JOGMODE_STANDARD_SLOW jog speed and dynamic settings from twinCat system manager!!!
		fbMcJog.JogForward := TRUE;
		fbMcJog.JogBackwards := FALSE;

		// State Change Condition
		IF (fbMcJog.Error) THEN
			SIf.stErr.dwoErrorID := fbMcJog.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (SIf.intCmd=cPOD_CMD_STOP) THEN
			stStateMachine.intStateNext := cPOD_STA_StopBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_NEG_JOG) THEN
			stStateMachine.intStateNext := cPOD_STA_NegJogBusy;
		ELSIF (SIf.intCmd&lt;&gt;cPOD_CMD_POS_JOG) THEN
			stStateMachine.intStateNext := cPOD_STA_QStopBusy;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		fbMcJog.JogForward := FALSE;
		fbMcJog.JogBackwards := FALSE;
		IF (SIf.stCfg.bolSimulation) THEN
			SIf.stMove.lreActVel := 0;
		END_IF
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PosMoveBusy" ObjectId="b0c35e41-2d9a-4508-b394-f51655701e1d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PosMoveBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		// Simulation
		IF (SIf.stCfg.bolSimulation) AND (fbSimTON.Q) THEN
			// Move positive
			IF (SIf.stMove.lreActPos&lt;SIf.stMove.lreSWLimitPos_mm) THEN
				SIf.stMove.lreActPos := SIf.stMove.lreActPos + (fbMcMoveVelocity.Velocity*udiSimPosTime_ms)/1000;
				SIf.stMove.lreActVel := fbMcMoveVelocity.Velocity;
			ELSE
				SIf.stMove.lreActVel := 0;
			END_IF
		END_IF

		// No change action
		//MC_MoveVelocity starts a continuous movement with specified velocity and direction. The movement can be stopped through a Stop command.
		IF (SIf.stMove.lreSetSpeed&gt;0) THEN
			fbMcMoveVelocity.Velocity := SIf.stMove.lreSetSpeed;
		ELSE
			fbMcMoveVelocity.Velocity := stAxisParameter.fVeloMaximum/10; // standard max / 10 Maximum travel velocity (&gt;0).
		END_IF
		fbMcMoveVelocity.Deceleration := SIf.stMove.lreSetDec;
		fbMcMoveVelocity.Acceleration := SIf.stMove.lreSetAcc;
		fbMcMoveVelocity.Jerk := SIf.stMove.lreSetJerk;
		fbMcMoveVelocity.Direction := TC2_MC2.MC_Direction.MC_Positive_Direction;
		fbMcMoveVelocity.Execute := TRUE;
		
		// State Change Condition
		IF (fbMcMoveVelocity.Error) THEN
			SIf.stErr.dwoErrorID := fbMcMoveVelocity.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (SIf.intCmd=cPOD_CMD_STOP) THEN
			stStateMachine.intStateNext := cPOD_STA_StopBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_NEG_MOVE) THEN
			stStateMachine.intStateNext := cPOD_STA_PosMoveBusy;
		ELSIF (SIf.intCmd&lt;&gt;cPOD_CMD_POS_MOVE) THEN
			stStateMachine.intStateNext := cPOD_STA_QStopBusy;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		fbMcMoveVelocity.Execute := FALSE;
		IF (SIf.stCfg.bolSimulation) THEN
			SIf.stMove.lreActVel := 0;
		END_IF
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_HomeBusy" ObjectId="bbfad2b9-4d4c-4ad0-9062-e5fc555070b3">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_HomeBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		bolfpFirstCycleDone := FALSE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		// Simulation
		IF (SIf.stCfg.bolSimulation) AND (fbSimTON.Q) THEN
			SIf.stStatus.bolHomeOk := TRUE;
		END_IF
		
		// MC_Home
		// Position when the reference cam is reached. 
		// The constant DEFAULT_HOME_POSITION can be used to make use of the Calibration Value which is defined in the TwinCAT SystemManger.
		fbMcHome.HomingMode := SIf.stCfg.eHomingMode;
		// based on config use home switch
		CASE SIf.stCfg.eUseHomeSwitch OF
			E_POD_UseHomeSwitch.HomeSwitch:
				fbMcHome.bCalibrationCam := SIf.stStatus.stDigin.bol_HomeSwitch;
			E_POD_UseHomeSwitch.SI0:
				fbMcHome.bCalibrationCam := SIf.stStatus.stDigin.bol_SI0;
			E_POD_UseHomeSwitch.SI1:
				fbMcHome.bCalibrationCam := SIf.stStatus.stDigin.bol_SI1;
			E_POD_UseHomeSwitch.SI2:
				fbMcHome.bCalibrationCam := SIf.stStatus.stDigin.bol_SI2;
			E_POD_UseHomeSwitch.SI3:
				fbMcHome.bCalibrationCam := SIf.stStatus.stDigin.bol_SI3;
			E_POD_UseHomeSwitch.SI4:
				fbMcHome.bCalibrationCam := SIf.stStatus.stDigin.bol_SI4;
			E_POD_UseHomeSwitch.SI5:
				fbMcHome.bCalibrationCam := SIf.stStatus.stDigin.bol_SI5;
			E_POD_UseHomeSwitch.SI6:
				fbMcHome.bCalibrationCam := SIf.stStatus.stDigin.bol_SI6;
		ELSE
			fbMcHome.bCalibrationCam := In_bolHomeSwitch;
		END_CASE
			
		fbMcHome.Position := SIf.stCfg.lreHomePosition;
		fbMcHome.Execute := TRUE;
		
		// State Change Condition
		IF (fbMcHome.Error) THEN
			SIf.stErr.dwoErrorID := fbMcHome.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (fbMcHome.Done) AND (bolfpFirstCycleDone) THEN
			IF (SIf.intCmd=cPOD_CMD_HOME) THEN
				SIf.intCmd := cPOD_CMD_DONE;
			END_IF;
			stStateMachine.intStateNext := cPOD_STA_WaitForJob;
		ELSIF (SIf.intCmd=cPOD_CMD_STOP) THEN
			stStateMachine.intStateNext := cPOD_STA_StopBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_CTRL_OFF) THEN
			stStateMachine.intStateNext := cPOD_STA_StopBusy;
		ELSIF (SIf.stCfg.bolSimulation AND SIf.stStatus.bolHomeOk) THEN
			IF (SIf.intCmd=cPOD_CMD_HOME) THEN
				SIf.intCmd := cPOD_CMD_DONE;
			END_IF;
			stStateMachine.intStateNext := cPOD_STA_WaitForJob;	
		END_IF
		bolfpFirstCycleDone := TRUE; //at least one call at the end of the FUB needed!
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		fbMcHome.Execute := FALSE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleStartDuty" ObjectId="cd6138c7-9e91-443a-8acf-b6aa59300a45">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleStartDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine


// Simulation active
IF (SIf.stCfg.bolSimulation) THEN
	
	SIF.stErr.bolNCError := FALSE;
	SIF.stErr.bolDriveError := FALSE;
	SIf.stStatus.bolHomeOk := TRUE; //Axis has been referenced/ homed ("Axis calibrated")
	SIf.stStatus.bolNetwOk := TRUE;
	
	SIf.stStatus.bolEnable := TRUE;
	SIf.stStatus.bolReady := TRUE;
	SIf.stStatus.bolNegHWSwitch := FALSE;
	SIf.stStatus.bolPosHWSwitch := FALSE;
	SIf.stStatus.bolNegSWSwitch := FALSE;
	SIf.stStatus.bolPosSWSwitch := FALSE;
ELSE

	(* program code at the beginning of each PLC cycle *)
	fbAxis.ReadStatus();
	SIf.stMove.lreActPos := fbAxis.NcToPlc.ActPos;
	SIf.stMove.lreActModPos := fbAxis.NcToPlc.ModuloActPos;
	SIf.stMove.lreActVel := fbAxis.NcToPlc.ActVelo;
	// [Nm] actual torque The torque actual value corresponds to the instantaneous torque in the drive motor. The value is given in units of per thousand of rated torque.
	SIf.stMove.lreActTorque := fbAxis.NcToPlc.ActTorque/1000;
	
	// ----------------------------------------------------------------------------------
	// Error FB's???
	SIF.stErr.bolNCError := F_AxisInErrorState(fbAxis.NcToPlc.StateDWord) OR (fbAxis.NcToPlc.ErrorCode &lt;&gt; 0);
	SIF.stErr.bolDriveError := fbAxis.NcToPlc.StateDWord.28;
	SIf.stStatus.bolInPos := fbAxis.NcToPlc.StateDWord.3; //Axis is in position window (physical feedback)
	SIf.stStatus.bolHomeOk := fbAxis.NcToPlc.StateDWord.1; //Axis has been referenced/ homed ("Axis calibrated")
	SIf.stStatus.bolCtrlOn := fbMCPower.Status; // fbAxis.NcToPlc.StateDWord.0 ;// Status=TRUE indicates that the axis is ready for operation. 	Axis is ready for operation - switched on
	SIf.stStatus.bolNetwOk := NOT (fbAxis.NcToPlc.StateDWord.30); //  	IO data invalid (e.g. 'WcState' or 'CdlState')
	
(*	(* additionalinformation to NC axis for Yaskawa drives
	Status word (6041h) when mode = 1 position profil
	0	Ready to Switch on =1
	1	Switched on =1
	2	Operation enabeld =1
	3	Fault/Fault Reaction
	4	MainPower on =1
	5	Quickstop inaktive =1
	6	Switch on disabled =1
	7	Warning is occurred =1
	8	
	9	Controlword is processed
	10	Target Reached
	11	
	12
	13	
	14	
	15	
	*)
	// funktioniert nicht....TC2_SYSTEM.MEMCPY(ADR(stStatusWord),ADR(In_worPOD_DriveState), SIZEOF(stStatusWord));
	stStatusWord.bolReadyToSwitchOn := In_worPOD_DriveState.0;
	stStatusWord.bolSwitchedOn := In_worPOD_DriveState.1;
	stStatusWord.bolOperationEnabled := In_worPOD_DriveState.2;
	stStatusWord.bolFault := In_worPOD_DriveState.3;
	stStatusWord.bolMainPowerOn := In_worPOD_DriveState.4;
	stStatusWord.bolQuickStopInactive := In_worPOD_DriveState.5;
	stStatusWord.bolSwitchOnDisabled := In_worPOD_DriveState.6;
	stStatusWord.bolWarning := In_worPOD_DriveState.7;
	stStatusWord.bolBit08 := In_worPOD_DriveState.8;
	// not used stStatusWord.bolControlwIsProcesssed := In_worPOD_DriveState.9;
	stStatusWord.bolTargetReached := In_worPOD_DriveState.10;
	stStatusWord.bolInternLimit := In_worPOD_DriveState.11;
	// not used stStatusWord.bolInterpolMode := In_worPOD_DriveState.12;
	// not used stStatusWord.bolBit13 := In_worPOD_DriveState.13;
	// not used stStatusWord.bolTorqueLim := In_worPOD_DriveState.14;
	// not used stStatusWord.bolEnableNotOk := In_worPOD_DriveState.15;
	
	// mpaaing digital input word to struct
	SIf.stStatus.stDigIn.bol_N_OT := In_udiPOD_DriveInputs.0;
	SIf.stStatus.stDigIn.bol_P_OT := In_udiPOD_DriveInputs.1;
	SIf.stStatus.stDigIn.bol_HomeSwitch := In_udiPOD_DriveInputs.2;
	SIf.stStatus.stDigIn.bol_SI0 := In_udiPOD_DriveInputs.16;
	SIf.stStatus.stDigIn.bol_SI1 := In_udiPOD_DriveInputs.17;
	SIf.stStatus.stDigIn.bol_SI2 := In_udiPOD_DriveInputs.18;
	SIf.stStatus.stDigIn.bol_SI3 := In_udiPOD_DriveInputs.19;
	SIf.stStatus.stDigIn.bol_SI4 := In_udiPOD_DriveInputs.20;
	SIf.stStatus.stDigIn.bol_SI5 := In_udiPOD_DriveInputs.21;
	SIf.stStatus.stDigIn.bol_SI6 := In_udiPOD_DriveInputs.22;
	// not used SIf.stStatus.stDigIn.bol_HWBB1 := In_udiPOD_DriveInputs.24;
	// not used SIf.stStatus.stDigIn.bol_HWBB2 := In_udiPOD_DriveInputs.25;
*)	
	// special state map direct from drive state
	// not used SIf.stStatus.bolEnable := NOT (stStatusWord.bolEnableNotOk) ;
	SIf.stStatus.bolReady:= fbAxis.NcToPlc.StateDWord.0; // Operational 
	SIf.stStatus.bolNegSWSwitch := fbAxis.Status.SoftLimitMinExceeded;
	SIf.stStatus.bolPosSWSwitch := fbAxis.Status.SoftLimitMaxExceeded;
	SIf.stStatus.bolEnable:= NOT (fbAxis.Status.Disabled);
	SIf.stStatus.bolMoving:= fbAxis.Status.Moving;
	
	// switch off movement to avoid following error on nc layer
	IF (fbAxis.Status.Moving) AND (fbAxis.Status.NegativeDirection=TRUE) AND (SIf.stStatus.bolNegHWSwitch) AND (stStateMachine.intState&lt;&gt;cPOD_STA_QStopBusy) THEN
		SIf.stErr.dwoErrorID := 32000; // Limit active during movement
		stStateMachine.intStateNext := cPOD_STA_QStopBusy;
	END_IF
	
	IF (fbAxis.Status.Moving) AND (fbAxis.Status.PositiveDirection=TRUE) AND (SIf.stStatus.bolPosHWSwitch) AND (stStateMachine.intState&lt;&gt;cPOD_STA_QStopBusy) THEN
		SIf.stErr.dwoErrorID := 32000; // Limit active during movement
		stStateMachine.intStateNext := cPOD_STA_QStopBusy;
	END_IF

END_IF





// always go to Error 
IF ((SIF.stErr.bolNCError) OR (SIF.stErr.bolDriveError)) AND 
	(stStateMachine.intState&lt;&gt;cPOD_STA_Error)  THEN
	stStateMachine.intStateNext := cPOD_STA_Error;
// always go to PowerOff 
ELSIF ((SIf.stStatus.bolCtrlOn=FALSE) OR (SIf.intCmd=cPOD_CMD_EMCY_STOP_CTRL_OFF)) AND 
	(stStateMachine.intState&lt;&gt;cPOD_STA_PowerOff) AND (stStateMachine.intState&lt;&gt;cPOD_STA_PowerOnBusy)  AND 
	(stStateMachine.intState&lt;&gt;cPOD_STA_WritePara) AND (stStateMachine.intState&lt;&gt;cPOD_STA_StorePara) AND 
	(stStateMachine.intState&lt;&gt;cPOD_STA_Error) THEN
	IF (SIf.stStatus.bolCtrlOn=FALSE) THEN
		stStateMachine.intStateNext := cPOD_STA_PowerOff;
	ELSE
		IF (stStateMachine.intState&lt;&gt;cPOD_STA_QStopBusy) THEN
			stStateMachine.intStateNext := cPOD_STA_QStopBusy;
		END_IF
	END_IF
END_IF

IF (stStateMachine.intState&lt;&gt;cPOD_STA_Error) THEN // positive edge in error requested
	SIf.stErr.bolErrAck := FALSE;
END_IF

SIf.strCmd := THIS^.getCmdState(intCmdState:=SIf.intCmd,bolState:=FALSE);

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sJobWriteParameterNC" ObjectId="d42fbcb8-87b3-42e8-84a0-6913380bc306">
                    <interface>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sJobWriteParameterNC" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">(*The function block MC_WriteParameter is used to Write an axis parameter.*)
IF ((fbMCWriteParameter.ParameterNumber = MC_AxisParameter.EnableLimitPos) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.EnableLimitNeg) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.EnablePosLagMonitoring) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisEnMinSoftPosLimit) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisEnMaxSoftPosLimit) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisEnPositionLagMonitoring) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisEnPositionRangeMonitoring) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisEnTargetPositionMonitoring) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisEnInTargetTimeout) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisEnMotionMonitoring) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisEnLoopingDistance) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisEnBacklashCompensation) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisEnDataPersistence) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisEncoderDirectionInverse) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisEnablePosCorrection) OR
	(fbMCWriteParameter.ParameterNumber = MC_AxisParameter.AxisMotorDirectionInverse)) THEN
	// Bool Parameter
	fbMCWriteBoolParameter.Value :=  STRING_TO_BOOL(SIf.stService.strValue);
	fbMCWriteBoolParameter.ParameterNumber := SIf.stService.eNC_ParNumber;
	fbMCWriteBoolParameter.Execute := TRUE;
	fbMCWriteBoolParameter(Axis := fbAxis);
ELSE
	fbMCWriteParameter.Value :=  STRING_TO_LREAL(SIf.stService.strValue);
	fbMCWriteParameter.ParameterNumber := SIf.stService.eNC_ParNumber;
	fbMCWriteParameter.Execute := TRUE;
	fbMCWriteParameter(Axis := fbAxis);
END_IF


IF (fbMCWriteParameter.Busy=FALSE) AND (fbMCWriteParameter.Execute) THEN
	SIf.intServiceCmd := cPOD_CMD_DONE;
ELSIF (fbMCWriteBoolParameter.Busy=FALSE) AND (fbMCWriteBoolParameter.Execute) THEN;
	SIf.intServiceCmd := cPOD_CMD_DONE;
ELSIF (fbMCWriteParameter.Error)	THEN
	SIf.intServiceCmd := cPOD_CMD_DONE;
	SIf.stErr.dwoErrorID := fbMCWriteParameter.ErrorID;
	stStateMachine.intStateNext := cPOD_STA_Error;
ELSIF (fbMCWriteBoolParameter.Error)	THEN
	SIf.intServiceCmd := cPOD_CMD_DONE;
	SIf.stErr.dwoErrorID := fbMCWriteBoolParameter.ErrorID;
	stStateMachine.intStateNext := cPOD_STA_Error;
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine_Service" ObjectId="ddf9d3ac-80a2-4ce9-8b91-c70ff780f3bd">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine_Service" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
IF (SIf.stCfg.bolSimulation) THEN
	SIf.stService.strValue := 'not available in simulation';
	SIf.intServiceCmd := cPOD_CMD_DONE;
ELSE

	// main statemachine of base controller
	CASE SIf.intServiceCmd OF
		cPOD_SCMD_WRITE_PARA: 
			THIS^.sJobWriteParameter();
		cPOD_SCMD_READ_PARA: 
			THIS^.sJobReadParameter();
		cPOD_SCMD_READ_PARA_NC: 
			THIS^.sJobReadParameterNC();
		cPOD_SCMD_WRITE_PARA_NC: 
			THIS^.sJobWriteParameterNC();
	ELSE
		SIf.intServiceCmd := POD_Cmd.cPOD_CMD_DONE;	
	END_CASE;
	
	// reset fb in same cycle as reset job -&gt; done -&gt; next job 
	IF (SIf.intServiceCmd = POD_Cmd.cPOD_CMD_DONE) THEN
		
		usiCaseScmd := 0;
		
		// reset FB calls - no cyclic calls!
		IF (fbEcCoeSdoWrite.bExecute) THEN
			fbEcCoeSdoWrite.bExecute := FALSE;
			fbEcCoeSdoWrite();
		END_IF
		IF (fbEcCoeSdoRead.bExecute) THEN
			fbEcCoeSdoRead.bExecute := FALSE;
			fbEcCoeSdoRead();
		END_IF
		IF (fbMCReadParameter.Enable) THEN
			fbMCReadParameter.Enable := FALSE;
			fbMCReadParameter(Axis := fbAxis);
		END_IF
		IF (fbMCReadBoolParameter.Enable) THEN
			fbMCReadBoolParameter.Enable := FALSE;
			fbMCReadBoolParameter(Axis := fbAxis);
		END_IF
		IF (fbMCWriteParameter.Execute) THEN
			fbMCWriteParameter.Execute := FALSE;
			fbMCWriteParameter(Axis := fbAxis);
		END_IF
		IF (fbMCWriteBoolParameter.Execute) THEN
			fbMCWriteBoolParameter.Execute := FALSE;
			fbMCWriteBoolParameter(Axis := fbAxis);
		END_IF
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RelMoveBusy" ObjectId="e1fa452e-4c76-4d9d-93ff-507d9e297524">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RelMoveBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		bolfpFirstCycleDone := FALSE;
		lreActPos_old := SIf.stMove.lreActPos;
		
		IF (SIf.stCfg.bolSimulation) THEN
			SIf.stStatus.bolInPos := FALSE;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		// Simulation
		IF (SIf.stCfg.bolSimulation) THEN
			IF (((SIf.stMove.lreActPos+fbMcRelMove.Distance)&lt;SIf.stMove.lreSWLimitPos_mm) AND (fbMcRelMove.Distance&gt;0)AND (SIf.stMove.lreActPos&lt;(lreActPos_old+fbMcRelMove.Distance))) THEN
				SIf.stMove.lreActPos := SIf.stMove.lreActPos + (fbMcRelMove.Velocity*udiSimPosTime_ms)/1000;
				SIf.stMove.lreActVel := fbMcRelMove.Velocity;
				SIf.stStatus.bolInPos := FALSE;
			ELSIF (((SIf.stMove.lreActPos+fbMcRelMove.Distance)&gt;SIf.stMove.lreSWLimitNeg_mm) AND (fbMcRelMove.Distance&lt;0)AND (SIf.stMove.lreActPos&gt;(lreActPos_old+fbMcRelMove.Distance))) THEN
				SIf.stMove.lreActPos := SIf.stMove.lreActPos - (fbMcRelMove.Velocity*udiSimPosTime_ms)/1000;
				SIf.stMove.lreActVel := fbMcRelMove.Velocity;
				SIf.stStatus.bolInPos := FALSE;
			ELSE
				SIf.stMove.lreSetSpeed := 0;
				SIf.stStatus.bolInPos := TRUE;
			END_IF
		END_IF

		// No change action
		//MC_MoveRelative starts a relative positioning procedure based on the current set position and monitors the axis movement over the whole travel path.
		fbMcRelMove.Velocity := SIf.stMove.lreSetSpeed;
		fbMcRelMove.Deceleration := SIf.stMove.lreSetDec;
		fbMcRelMove.Acceleration := SIf.stMove.lreSetAcc;
		fbMcRelMove.Jerk := SIf.stMove.lreSetJerk;
		fbMcRelMove.Distance := SIf.stMove.lreSetPos;
		fbMcRelMove.Execute := TRUE;
		
		// State Change Condition
		IF (fbMcRelMove.Error) AND (bolfpFirstCycleDone) THEN
			SIf.stErr.dwoErrorID := fbMcRelMove.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (SIf.intCmd=cPOD_CMD_STOP) THEN
			stStateMachine.intStateNext := cPOD_STA_StopBusy;
		ELSIF (SIf.intCmd&lt;&gt;cPOD_CMD_REL_MOVE) THEN
			stStateMachine.intStateNext := cPOD_STA_QStopBusy;
		ELSIF ((SIf.stCfg.bolSimulation AND SIf.stStatus.bolInPos) OR (fbMcRelMove.Done))  AND (bolfpFirstCycleDone) THEN
			IF (SIf.intCmd=cPOD_CMD_REL_MOVE) THEN
				SIf.intCmd := cPOD_CMD_DONE;
			END_IF;
			stStateMachine.intStateNext := cPOD_STA_WaitForJob;
		END_IF
		bolfpFirstCycleDone := TRUE; //at least one call at the end of the FUB needed!
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		fbMcRelMove.Execute := FALSE;
		IF (SIf.stCfg.bolSimulation) THEN
			SIf.stMove.lreActVel := 0;
		END_IF
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_StopBusy" ObjectId="e5a8ae44-5543-4998-8aa2-e795cb4cd3b6">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_StopBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
		bolfpFirstCycleDone := FALSE;
		
		IF (SIf.stCfg.bolSimulation) THEN
			SIf.stMove.lreActVel := 0;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		//MC_Stop stops an axis with a defined braking ramp and blocks the axis for any motion commands. This behavior qualifies the block for stops under special circumstances where the axis must be prevented from further motion.
		fbMcHalt.Deceleration := SIf.stMove.lreSetDec;
		fbMcHalt.Jerk := 0; //Jerk (≥0). If the value is 0, the jerk parameterised with the last Move command is used.
		fbMcHalt.Execute := TRUE;
	
		// State Change Condition
		IF (fbMcHalt.Error) THEN
			SIf.stErr.dwoErrorID := fbMcHalt.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (fbMcHalt.Done) OR (SIf.stCfg.bolSimulation) THEN
			IF (SIf.intCmd=cPOD_CMD_STOP) THEN
				SIf.intCmd := cPOD_CMD_DONE;
			END_IF;
			stStateMachine.intStateNext := cPOD_STA_WaitForJob;
		ELSIF (SIf.intCmd=cPOD_CMD_CTRL_OFF) THEN
			stStateMachine.intStateNext := cPOD_STA_QStopBusy;
		END_IF
		bolfpFirstCycleDone := TRUE; //at least one call at the end of the FUB needed!
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		fbMcHalt.Execute := FALSE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="e994bd16-0a6d-4cba-9c38-86d8f9df6463">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
// main statemachine of base controller
CASE stStateMachine.intState OF
	cPOD_STA_PowerOff: 
        THIS^.sta_PowerOff();
    cPOD_STA_PowerOnBusy: 
        THIS^.sta_PowerOnBusy();
	cPOD_STA_WaitForJob: 
        THIS^.sta_WaitForJob();
    cPOD_STA_HomeBusy: 
        THIS^.sta_HomeBusy();
	cPOD_STA_RelMoveBusy: 
        THIS^.sta_RelMoveBusy();
    cPOD_STA_AbsMoveBusy: 
        THIS^.sta_AbsMoveBusy();
	cPOD_STA_ModMoveBusy: 
        THIS^.sta_ModMoveBusy();
	cPOD_STA_PosMoveBusy: 
        THIS^.sta_PosMoveBusy();
	cPOD_STA_PosJogBusy: 
        THIS^.sta_PosJogBusy();
	cPOD_STA_NegMoveBusy: 
        THIS^.sta_NegMoveBusy();
	cPOD_STA_NegJogBusy: 
        THIS^.sta_NegJogBusy();
	cPOD_STA_QStopBusy: 
        THIS^.sta_QStopBusy();
	cPOD_STA_StopBusy: 
        THIS^.sta_StopBusy();
    cPOD_STA_Error: 
        THIS^.sta_Error();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_NegJogBusy" ObjectId="eba8d1a6-2945-4039-beef-958d84c8e2b3">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_NegJogBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		// Simulation
		IF (SIf.stCfg.bolSimulation) AND (fbSimTON.Q) THEN
			// JOG negative
			IF (SIf.stMove.lreActPos&gt;SIf.stMove.lreSWLimitNeg_mm) THEN
				SIf.stMove.lreActPos := SIf.stMove.lreActPos - (lreSimJogSpeed*udiSimPosTime_ms)/1000;
				SIf.stMove.lreActVel := lreSimJogSpeed;
			ELSE
				SIf.stMove.lreActVel := 0;
			END_IF
		END_IF

		// No change action
		// MC_JOGMODE_STANDARD_SLOW
		//The axis moves as long as the signal at one of the jog inputs is TRUE. The low velocity for manual functions specified in the TwinCAT System Manager and standard dynamics are used. In this mode the position, velocity and dynamics data specified in the function block have no effect.
		fbMcJog.Velocity := SIf.stMove.lreSetSpeed;
		fbMcJog.Deceleration := SIf.stMove.lreSetDec;
		fbMcJog.Acceleration := SIf.stMove.lreSetAcc;
		fbMcJog.Jerk := SIf.stMove.lreSetJerk;
		fbMcJog.Mode := TC2_MC2.E_JogMode.MC_JOGMODE_STANDARD_SLOW;
		fbMcJog.JogForward := FALSE;
		fbMcJog.JogBackwards := TRUE;
		
		// State Change Condition
		IF (fbMcJog.Error) THEN
			SIf.stErr.dwoErrorID := fbMcJog.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (SIf.intCmd=cPOD_CMD_STOP) THEN
			stStateMachine.intStateNext := cPOD_STA_StopBusy;
		ELSIF (SIf.intCmd=cPOD_CMD_POS_JOG) THEN
			stStateMachine.intStateNext := cPOD_STA_PosJogBusy;
		ELSIF (SIf.intCmd&lt;&gt;cPOD_CMD_NEG_JOG) THEN
			stStateMachine.intStateNext := cPOD_STA_QStopBusy;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		fbMcJog.JogForward := FALSE;
		fbMcJog.JogBackwards := FALSE;
		IF (SIf.stCfg.bolSimulation) THEN
			SIf.stMove.lreActVel := 0;
		END_IF
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sJobWriteParameter" ObjectId="ef9e92ba-f74c-4dbe-a182-01fc5f754d41">
                    <interface>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sJobWriteParameter" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
(*
The FB_EcCoeSdoWrite FUNCTION block permits an object FROM the object directory OF an EtherCAT slave TO be written BY means OF an SDO download. 
THIS requires the slave TO have a mailbox AND TO support the "CANopen over EtherCAT" (CoE) protocol. 
The nSubIndex AND nIndex parameters select the object the data should be written TO. 
Via bCompleteAccess := TRUE the parameter is being written with all SUB indexes.
*)
	fbEcCoeSdoWrite.sNetId := fbMCReadDriveAdress.DriveAddress.NetID; // This is a string that contains the AMS network identifier of the EtherCAT master device.
	fbEcCoeSdoWrite.nSlaveAddr := fbMCReadDriveAdress.DriveAddress.SlaveAddress; //  Fixed address of the EtherCAT slave to which the SDO download command should be sent.
	fbEcCoeSdoWrite.nSubIndex  := SIf.stService.bytSubIndex;// Sub-index of the object that should be written to.
	fbEcCoeSdoWrite.nIndex  := SIf.stService.worIndex; //  Index of the object that should be written to.
	fbEcCoeSdoWrite.tTimeout := DEFAULT_ADS_TIMEOUT;
	
	IF (SIf.stService.dwo_pSrcBuf&lt;&gt;0) THEN // adress from value -&gt; use the external value
		fbEcCoeSdoWrite.pSrcBuf  := SIf.stService.dwo_pSrcBuf; // Address (pointer) of the send buffer.
		fbEcCoeSdoWrite.cbBufLen  := SIf.stService.udi_cbBufLen; // Number (in bytes) of data to be sent.
	ELSE
		// use internal value - strValue from interface
		CASE SIf.stService.eValueType OF
		TYPE_SINT:
			sinValue := STRING_TO_SINT(SIf.stService.strValue);
			fbEcCoeSdoWrite.pSrcBuf		:= ADR(sinValue);
			fbEcCoeSdoWrite.cbBufLen	:= SIZEOF(sinValue);
		TYPE_INT:
			intValue := STRING_TO_INT(SIf.stService.strValue);
			fbEcCoeSdoWrite.pSrcBuf		:= ADR(intValue);
			fbEcCoeSdoWrite.cbBufLen	:= SIZEOF(intValue);
		TYPE_DINT:
			dinValue := STRING_TO_DINT(SIf.stService.strValue);
			fbEcCoeSdoWrite.pSrcBuf		:= ADR(dinValue);
			fbEcCoeSdoWrite.cbBufLen	:= SIZEOF(dinValue);
		TYPE_USINT:
			usiValue := STRING_TO_USINT(SIf.stService.strValue);
			fbEcCoeSdoWrite.pSrcBuf		:= ADR(usiValue);
			fbEcCoeSdoWrite.cbBufLen	:= SIZEOF(usiValue);
		TYPE_UINT:
			uinValue := STRING_TO_UINT(SIf.stService.strValue);
			fbEcCoeSdoWrite.pSrcBuf		:= ADR(uinValue);
			fbEcCoeSdoWrite.cbBufLen	:= SIZEOF(uinValue);
		TYPE_UDINT:
			udiValue := STRING_TO_UDINT(SIf.stService.strValue);
			fbEcCoeSdoWrite.pSrcBuf		:= ADR(udiValue);
			fbEcCoeSdoWrite.cbBufLen	:= SIZEOF(udiValue);
		TYPE_STRING:
			fbEcCoeSdoWrite.pSrcBuf		:= ADR(SIf.stService.strValue);
			fbEcCoeSdoWrite.cbBufLen	:= SIZEOF(SIf.stService.strValue);
		ELSE
			SIf.stErr.dwoErrorID:=4104; // type not supported until now!!!!
		END_CASE
	END_IF;

	// write value
	fbEcCoeSdoWrite.bExecute := TRUE;
	fbEcCoeSdoWrite();
	
	IF (fbEcCoeSdoWrite.bBusy=FALSE) THEN
		SIf.intServiceCmd := cPOD_CMD_DONE;
	ELSIF (fbEcCoeSdoWrite.bError)	THEN
		SIf.intServiceCmd := cPOD_CMD_DONE;
		SIf.stErr.dwoErrorID := fbEcCoeSdoWrite.nErrId;
		stStateMachine.intStateNext := cPOD_STA_Error;
	ELSIF (SIf.stErr.dwoErrorID=4104)	THEN// type not supported until now!!!!
		SIf.intServiceCmd := cPOD_CMD_DONE;
		stStateMachine.intStateNext := cPOD_STA_Error;
	END_IF


(*
This write command is only allowed with predefined values.....
IF (SIf.stService.bolHandleBoolValue) THEN
	// write bool value
	fbMCWriteBoolParameter.ParameterNumber := SIf.stService.intParameterNumber;
	fbMCWriteBoolParameter.Value := SIf.stService.bolValue;
	fbMCWriteBoolParameter.Execute := TRUE;
	fbMCWriteBoolParameter(Axis := fbAxis);
	
	IF (fbMCWriteBoolParameter.Done) THEN
		SIf.intServiceCmd := cPOD_CMD_DONE;
	ELSIF (fbMCWriteBoolParameter.Error)	THEN
		SIf.intServiceCmd := cPOD_CMD_DONE;
		SIf.stErr.dwoErrorID := fbMCWriteBoolParameter.ErrorID;
		stStateMachine.intStateNext := cPOD_STA_Error;
	END_IF
else
	// write real value
	fbMCWriteParameter.ParameterNumber := SIf.stService.intParameterNumber;
	fbMCWriteParameter.Value := SIf.stService.relValue;
	fbMCWriteParameter.Execute := TRUE;
	fbMCWriteParameter(Axis := fbAxis);
	
	IF (fbMCWriteParameter.Done) THEN
		SIf.intServiceCmd := cPOD_CMD_DONE;
	ELSIF (fbMCWriteParameter.Error)	THEN
		SIf.intServiceCmd := cPOD_CMD_DONE;
		SIf.stErr.dwoErrorID := fbMCWriteParameter.ErrorID;
		stStateMachine.intStateNext := cPOD_STA_Error;
	END_IF
END_IF
*)


</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_AbsMoveBusy" ObjectId="f338cde0-b095-43a7-b964-e6cdf75f5843">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_AbsMoveBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		bolfpFirstCycleDone := FALSE;
		
		IF (SIf.stCfg.bolSimulation) THEN
			SIf.stStatus.bolInPos := FALSE;
			fbMcAbsMove.Position := SIf.stMove.lreSetPos;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		// Simulation
		IF (SIf.stCfg.bolSimulation) AND (fbSimTON.Q) THEN
			IF (ABS(SIf.stMove.lreActPos-fbMcAbsMove.Position)&gt;((fbMcAbsMove.Velocity*udiSimPosTime_ms)/1000)) THEN
				IF (fbMcAbsMove.Position&lt;SIf.stMove.lreSWLimitPos_mm) AND (SIf.stMove.lreActPos&lt;fbMcAbsMove.Position) THEN
					SIf.stMove.lreActPos := SIf.stMove.lreActPos + (fbMcAbsMove.Velocity*udiSimPosTime_ms)/1000;
					SIf.stMove.lreActVel := fbMcAbsMove.Velocity;
					SIf.stStatus.bolInPos := FALSE;
				ELSIF (fbMcAbsMove.Position&gt;SIf.stMove.lreSWLimitNeg_mm) AND (SIf.stMove.lreActPos&gt;fbMcAbsMove.Position) THEN
					SIf.stMove.lreActPos := SIf.stMove.lreActPos - (fbMcAbsMove.Velocity*udiSimPosTime_ms)/1000;
					SIf.stMove.lreActVel := fbMcAbsMove.Velocity;
					SIf.stStatus.bolInPos := FALSE;
				ELSE
					SIf.stMove.lreActPos := fbMcAbsMove.Position;
					SIf.stMove.lreActVel := 0;
					SIf.stStatus.bolInPos := TRUE;
				END_IF
			ELSE
				SIf.stMove.lreActPos := fbMcAbsMove.Position;
				SIf.stMove.lreActVel := 0;
				SIf.stStatus.bolInPos := TRUE;
			END_IF
		END_IF

		// No change action
		//MC_MoveVelocity starts a continuous movement with specified velocity and direction. The movement can be stopped through a Stop command.
		IF (SIf.stMove.lreSetSpeed&gt;0) THEN
			fbMcAbsMove.Velocity := SIf.stMove.lreSetSpeed;
		ELSE
			fbMcAbsMove.Velocity := stAxisParameter.fVeloMaximum/10; // standard max / 10 Maximum travel velocity (&gt;0).
		END_IF
		fbMcAbsMove.Deceleration := SIf.stMove.lreSetDec; //  	Acceleration (≥0). If the value is 0, the standard acceleration from the axis configuration in the System Manager is used.
		fbMcAbsMove.Acceleration := SIf.stMove.lreSetAcc; //  	Deceleration (≥0). If the value is 0, the standard deceleration from the axis configuration in the System Manager is used.
		fbMcAbsMove.Jerk := SIf.stMove.lreSetJerk;
		fbMcAbsMove.Position := SIf.stMove.lreSetPos;
		fbMcAbsMove.Execute := TRUE;
		
		// State Change Condition
		IF (fbMcAbsMove.Error) AND (bolfpFirstCycleDone) THEN
			SIf.stErr.dwoErrorID := fbMcAbsMove.ErrorID;
			stStateMachine.intStateNext := cPOD_STA_Error;
		ELSIF (SIf.intCmd=cPOD_CMD_STOP) THEN
			stStateMachine.intStateNext := cPOD_STA_StopBusy;
		ELSIF (SIf.intCmd&lt;&gt;cPOD_CMD_ABS_MOVE) THEN
			stStateMachine.intStateNext := cPOD_STA_QStopBusy;
		ELSIF ((SIf.stCfg.bolSimulation AND SIf.stStatus.bolInPos) OR (fbMcAbsMove.Done)) AND (bolfpFirstCycleDone) THEN
			IF (SIf.intCmd=cPOD_CMD_ABS_MOVE) THEN
				SIf.intCmd := cPOD_CMD_DONE;
			END_IF;
			stStateMachine.intStateNext := cPOD_STA_WaitForJob;
		END_IF
		
		bolfpFirstCycleDone := TRUE; //at least one call at the end of the FUB needed!
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		fbMcAbsMove.Execute := FALSE;
		IF (SIf.stCfg.bolSimulation) THEN
			SIf.stMove.lreActVel := 0;
		END_IF
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="fd31d9c7-1fa0-425c-92a3-57a49423f194">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.intCmd := cPOD_CMD_DONE;
SIf.intServiceCmd := cPOD_CMD_DONE; // not used at the moment
stStateMachine.intStateLastCycle  := cPOD_CMD_DONE; //EntryStop of power BasePLC.OFF enable
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_Error" ObjectId="ff8a2d7e-acb2-4511-a798-0dc3f4301ae1">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_Error" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateHistory := stStateMachine.intStateLastCycle;
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
		IF (SIf.stErr.bolDriveError) THEN
			fbEcCoeSdoRead.bExecute := TRUE;
		ELSIF(SIf.stErr.bolNCError) THEN
			;
		ELSE
			IF (SIf.stErr.dwoErrorID&lt;&gt;0) AND (SIf.stErr.dwoErrorID&lt;&gt;32000) THEN // not hw limit switches!
				SIf.stErr.bolMCError := TRUE; // error from FUB
			END_IF
		END_IF
		SIf.stErr.bolErrorActive := TRUE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		
		// if axis error read out number
		(* for yaskawa drive no error number get
			fbMCReadAxisError(Axis := fbAxis);
		IF (fbMCReadAxisError.Valid=TRUE) AND (fbMCReadAxisError.Enable) THEN
			fbMCReadAxisError.Enable := FALSE;
			IF (fbMCReadAxisError.Error) THEN
				SIf.stErr.dwoErrorID := fbMCReadAxisError.ErrorID;
			ELSE
				SIf.stErr.dwoErrorID := fbMCReadAxisError.AxisErrorID;	
			END_IF
		END_IF*)
		

		IF (SIf.stErr.bolDriveError) THEN
			//fbMCReadAxisError.Enable := TRUE;
			IF (SIf.stStatus.bolInitOk=FALSE)  THEN
					fbMCReadDriveAdress.Execute := TRUE;
				IF (fbMCReadDriveAdress.Done=TRUE) THEN
					SIf.stStatus.bolInitOk := TRUE; // read ads parameter set done
				END_IF;
			ELSE
				//Error Code (603Fh) - This provides the SGDV SERVOPACK’s alarm/warning code of the last error which occurred in device
				fbEcCoeSdoRead.sNetId := fbMCReadDriveAdress.DriveAddress.NetID; // This is a string that contains the AMS network identifier of the EtherCAT master device.
				fbEcCoeSdoRead.nSlaveAddr := fbMCReadDriveAdress.DriveAddress.SlaveAddress; //  Fixed address of the EtherCAT slave to which the SDO download command should be sent.
				fbEcCoeSdoRead.nSubIndex  := 0;// Sub-index of the object that should be written to.
				fbEcCoeSdoRead.nIndex  := 16#603F; //UINT Error Code (603Fh) - This provides the SGDV SERVOPACK’s alarm/warning code of the last error which occurred in device
				fbEcCoeSdoRead.tTimeout := DEFAULT_ADS_TIMEOUT;
				fbEcCoeSdoRead.pDstBuf:= ADR(uinValue);
				fbEcCoeSdoRead.cbBufLen	:= SIZEOF(uinValue);
				
				fbEcCoeSdoRead();
				IF (fbEcCoeSdoRead.bBusy=FALSE) THEN
					fbEcCoeSdoRead.bExecute := FALSE;
					IF (fbEcCoeSdoRead.bError) THEN
						SIf.stErr.dwoErrorID := fbEcCoeSdoRead.nErrId;
					ELSE
						SIf.stErr.dwoErrorID := UINT_TO_DWORD(uinValue);	
					END_IF
				END_IF
			END_IF;
		ELSIF(SIf.stErr.bolNCError) THEN
			SIf.stErr.dwoErrorID := fbAxis.NcToPlc.ErrorCode;
		END_IF
		
		fbMcReset.Execute := SIf.stErr.bolErrAck;
		
		// State Change Condition
		IF (fbMcReset.Done) OR (fbMcReset.Error) OR(SIf.stCfg.bolSimulation) THEN
			SIf.stErr.dwoErrorID := fbMcReset.ErrorID;
			SIf.stErr.bolErrAck := FALSE;
			stStateMachine.intStateNext := cPOD_STA_PowerOff;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		fbEcCoeSdoRead.bExecute := FALSE;
		fbEcCoeSdoRead();
		SIf.stErr.bolErrorActive := FALSE;
		SIf.stErr.bolMCError := FALSE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="AD_SIf" ObjectId="0107c89c-0665-4da6-ab1e-8a8e22425ce4">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_POD" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">AD_SIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>48ed7df6-9b05-464b-ba09-66aaed082b6c</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_PTR" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_uinBeltSpeed">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="m_udiTimeBase_us">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Time base in [usec]</xhtml>
                    </documentation>
                  </variable>
                  <variable name="m_intPaperOnBelt">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> # of Paper on the belt </xhtml>
                    </documentation>
                  </variable>
                  <variable name="m_intFirstPaperIdx">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index of the leading paper on the belt</xhtml>
                    </documentation>
                  </variable>
                  <variable name="m_intLastPaperIdx">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index of the last paper on the belt</xhtml>
                    </documentation>
                  </variable>
                  <variable name="m_arBuffer">
                    <type>
                      <array>
                        <dimension lower="0" upper="(THIS^.cMAXBUFFERSIZE - 1)" />
                        <baseType>
                          <derived name="T_PTR_STRUCT" />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="m_arPositionList">
                    <type>
                      <array>
                        <dimension lower="0" upper="(THIS^.cMAXBUFFERSIZE - 1)" />
                        <baseType>
                          <derived name="T_PTR_STRUCT" />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="m_intPaperEntryOffset_mm">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="m_dinBeltLength">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="iIdx">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iNdx">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iDifference">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cMAXBUFFERSIZE">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="20" />
                    </initialValue>
                  </variable>
                  <variable name="cPAPERPOSITION_TOLERANCE_mm">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="200" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF m_intPaperOnBelt &gt; 0 THEN
	iNdx := m_intFirstPaperIdx;
	
	FOR iIdx := 0 TO m_intPaperOnBelt-1 DO
		m_arBuffer[iNdx].udiTimeOnBelt_us := m_arBuffer[iNdx].udiTimeOnBelt_us + THIS^.m_udiTimeBase_us;
		m_arBuffer[iNdx].lrePositionOnBelt_mm := m_arBuffer[iNdx].lrePositionOnBelt_mm + UDINT_TO_LREAL(THIS^.m_udiTimeBase_us) * UDINT_TO_LREAL(THIS^.In_uinBeltSpeed) / 1000000.0;
				
		CASE m_arBuffer[iNdx].eStatus OF
			E_PTR_Status.EnterBusy:
				m_arBuffer[iNdx].lrePositionOnBeltAdjusted_mm := MIN(m_intPaperEntryOffset_mm, LREAL_TO_INT(m_arBuffer[iNdx].lrePositionOnBelt_mm));
				iDifference := m_intPaperEntryOffset_mm - LREAL_TO_DINT(m_arBuffer[iNdx].lrePositionOnBelt_mm);
					
				IF 	(iDifference &lt; 0) AND (ABS(iDifference) &gt; cPAPERPOSITION_TOLERANCE_mm) THEN
					m_arBuffer[iNdx].eStatus := E_PTR_Status.ERROR;
				END_IF
			E_PTR_Status.OnBelt:
				m_arBuffer[iNdx].lrePositionOnBeltAdjusted_mm := MIN(m_dinBeltLength, LREAL_TO_DINT(m_arBuffer[iNdx].lrePositionOnBelt_mm));
				iDifference := m_dinBeltLength - LREAL_TO_DINT(m_arBuffer[iNdx].lrePositionOnBelt_mm);

				IF 	(iDifference &lt; 0) AND (ABS(iDifference) &gt; cPAPERPOSITION_TOLERANCE_mm) THEN
					m_arBuffer[iNdx].eStatus :=  E_PTR_Status.ERROR;
				END_IF
			E_PTR_Status.ExitBusy:
		END_CASE
		
		m_arPositionList[iIdx] :=  m_arBuffer[iNdx];	
		iNdx := (iNdx + 1) MOD THIS^.cMAXBUFFERSIZE;
	END_FOR
ELSE
	m_arPositionList[0].eStatus := E_PTR_Status.Gone;
END_IF</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Push" ObjectId="3bd42fac-05be-4d58-a731-e7926fc5bb2c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="In_udiItemId">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Push" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">Push := FALSE;

IF m_intPaperOnBelt &lt; THIS^.cMAXBUFFERSIZE THEN
	m_intLastPaperIdx := (m_intLastPaperIdx + 1) MOD THIS^.cMAXBUFFERSIZE;
	m_arBuffer[m_intLastPaperIdx].udiItemId := In_udiItemId;
	m_arBuffer[m_intLastPaperIdx].lrePositionOnBelt_mm := 0.0;
	m_arBuffer[m_intLastPaperIdx].lrePositionOnBeltAdjusted_mm := 0.0;
	m_arBuffer[m_intLastPaperIdx].udiTimeOnBelt_us := 0;
	m_arBuffer[m_intLastPaperIdx].eStatus := E_PTR_Status.EnterBusy;
	m_intPaperOnBelt := m_intPaperOnBelt + 1;
	Push := TRUE;
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Pop" ObjectId="782b3b04-974f-448f-98e0-75f16bcea2d3">
                    <interface>
                      <returnType>
                        <derived name="T_PTR_STRUCT" />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Pop" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">Pop.eStatus := E_PTR_Status.Gone;
Pop.lrePositionOnBelt_mm := 0.0;
Pop.lrePositionOnBeltAdjusted_mm := 0.0;
Pop.udiItemId := 0;
Pop.udiTimeOnBelt_us := 0;


IF m_intPaperOnBelt &gt; 0 THEN
	Pop := m_arBuffer[m_intFirstPaperIdx];
	m_arBuffer[m_intFirstPaperIdx].udiItemId := 0;
	m_arBuffer[m_intFirstPaperIdx].lrePositionOnBelt_mm := 0.0;
	m_arBuffer[m_intFirstPaperIdx].lrePositionOnBeltAdjusted_mm := 0.0;
	m_arBuffer[m_intFirstPaperIdx].udiTimeOnBelt_us := 0;
	m_arBuffer[m_intFirstPaperIdx].eStatus := E_PTR_Status.Gone;
	m_intPaperOnBelt := m_intPaperOnBelt - 1;

	IF m_intPaperOnBelt = 0 THEN
		m_arPositionList[0] := m_arBuffer[m_intFirstPaperIdx];
	END_IF

	m_intFirstPaperIdx := (m_intFirstPaperIdx + 1) MOD THIS^.cMAXBUFFERSIZE;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="2998101c-1561-4b49-bac3-d73080087d98">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">m_udiTimeBase_us := 2000;
m_intPaperEntryOffset_mm := 0;
Reset();</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Reset" ObjectId="bb01b83a-0aee-4ce7-b33c-c20369017ed9">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Reset" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">m_intFirstPaperIdx := 0;
m_intLastPaperIdx := -1;
m_intPaperOnBelt := 0;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Insert" ObjectId="de40f836-15e6-40ed-bacf-c50f2020fa3b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="uinPosition_mm">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="udiItemId">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="iNdx">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="iInsertIdx">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Insert" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">iInsertIdx := m_intFirstPaperIdx;
iNdx := m_intFirstPaperIdx;
iIdx := 0;
	
WHILE (iIdx &lt; m_intPaperOnBelt) AND (uinPosition_mm &lt; m_arBuffer[iNdx].lrePositionOnBelt_mm) DO
	iIdx := iIdx + 1;
	iNdx := (iNdx + 1) MOD THIS^.cMAXBUFFERSIZE;
END_WHILE


</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="EnterComplete" ObjectId="6a2fc8dd-a7b1-441b-837b-5cbf52831705">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="EnterComplete" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">m_arBuffer[m_intLastPaperIdx].eStatus := E_PTR_Status.OnBelt;
m_arBuffer[m_intLastPaperIdx].lrePositionOnBelt_mm := INT_TO_LREAL(m_intPaperEntryOffset_mm);
m_arBuffer[m_intLastPaperIdx].lrePositionOnBeltAdjusted_mm := INT_TO_LREAL(m_intPaperEntryOffset_mm);
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="TimeBase" ObjectId="d556835c-92d4-4d41-a10e-841f369ce8a1">
                    <interface>
                      <returnType>
                        <UDINT />
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">TimeBase := m_udiTimeBase_us;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">m_udiTimeBase_us := TimeBase;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="PositionList" ObjectId="65035646-2310-45c0-acb9-1e4eedf109aa">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_PTR_STRUCT" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface>
                        <localVars>
                          <variable name="iIdx">
                            <type>
                              <INT />
                            </type>
                          </variable>
                          <variable name="iNdx">
                            <type>
                              <INT />
                            </type>
                          </variable>
                        </localVars>
                      </interface>
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">PositionList := ADR(m_arPositionList);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="PaperOnBelt" ObjectId="ab4c9734-46a4-4a76-8c9c-28c14fb51474">
                    <interface>
                      <returnType>
                        <UINT />
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">PaperOnBelt := INT_TO_UINT(m_intPaperOnBelt);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="PaperEntryOffset" ObjectId="fa805dbb-2846-429a-a1d3-329aeb64010e">
                    <interface>
                      <returnType>
                        <INT />
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">PaperEntryOffset := m_intPaperEntryOffset_mm;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">m_intPaperEntryOffset_mm := PaperEntryOffset;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="BeltLength" ObjectId="7ab86a98-e878-4580-9b2a-a7a6371ad55d">
                    <interface>
                      <returnType>
                        <DINT />
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">BeltLength := m_dinBeltLength;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">m_dinBeltLength := BeltLength;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>aadcac38-f5fd-40b3-9942-862d48d96ecb</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_TCP" pouType="functionBlock">
              <interface>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_TCP" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intSendState">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="fbClientConnection">
                    <type>
                      <derived name="TC2_TCPIP.FB_ClientServerConnection" />
                    </type>
                  </variable>
                  <variable name="fbSend">
                    <type>
                      <derived name="TC2_TCPIP.FB_SocketSend" />
                    </type>
                  </variable>
                  <variable name="fbReceive">
                    <type>
                      <derived name="TC2_TCPIP.FB_SocketReceive" />
                    </type>
                  </variable>
                  <variable name="fbReceiveBuffer">
                    <type>
                      <derived name="FB_DataSetFifo" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> buffer for received messages</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbSendBuffer">
                    <type>
                      <derived name="FB_DataSetFifo" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> buffer for messages to be sent</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stNextHead">
                    <type>
                      <derived name="ST_Header" />
                    </type>
                  </variable>
                  <variable name="bReceivedAck">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bReceivedNack">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iSendSize">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="iNumSendTry">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="tonSendTime">
                    <type>
                      <derived name="TON" />
                    </type>
                  </variable>
                  <variable name="pSendHeader">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="ST_Header" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pByteSend">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="MAX_DATASET_SIZE" />
                            <baseType>
                              <BYTE />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pReceiveHead">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="ST_Header" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pByteReceive">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="MAX_DATASET_SIZE" />
                            <baseType>
                              <BYTE />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="naReceiveData">
                    <type>
                      <array>
                        <dimension lower="0" upper="MAX_DATASET_SIZE" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="pReceiveData">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="MAX_DATASET_SIZE" />
                            <baseType>
                              <BYTE />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cSendIdle">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="cSendBusy">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="1" />
                    </initialValue>
                  </variable>
                  <variable name="cSendWait">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2" />
                    </initialValue>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:



History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		21.05.2014		AVME/DSC	Start history. Based on TCP client from jetter prototyp (Sonja Segmueller)
___________________________________________________________________________________________________*)


SUPER^();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CONNECT" ObjectId="012444c2-4f4c-4e85-8562-de1e9f46c149">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CONNECT" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_TCP.SocketConnectionLost,0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
	END_IF

// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		// check if connection has been lost
		IF (fbClientConnection.eState &lt;&gt; TC2_TCPIP.E_SocketConnectionState.eSOCKET_CONNECTED) THEN 
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_TCP.SocketConnectionLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			
			IF SIf.Cfg.bolAutoReconnectEnable THEN
				me.StateMachine.intStateNext := TCP_CmdState.cSTA_CloseBusy;
			ELSE	
				me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;
			END_IF
		END_IF
		
		CASE me.intCmd OF
			TCP_CmdState.cCMD_Close:
				me.StateMachine.intStateNext := TCP_CmdState.cSTA_CloseBusy;
			TCP_CmdState.cCMD_Connect:
				me.StateMachine.intStateNext := TCP_CmdState.cSTA_CloseBusy;
		END_CASE
	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="04443b31-aa81-49ea-8367-9dea755a08ac">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// not inherite from base !!!  special behaviour for this TCP driver
// SUPER^.Always();

// Conditions Always
IF (me.bolChangeBackToAUTO=TRUE) THEN // switch mode to automatic switch off controller
	//me.StateMachine.intStateNext := cSTA_OFFBusy;
	me.bolChangeBackToAUTO := FALSE;
END_IF

IF (CIf.SwCfg.bolExist=FALSE) THEN // hardware of controller does not exist
	me.StateMachine.intStateNext := cSTA_SINGLE_ANSWER;
ELSE
	;
END_IF

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	// Cyclic call of the client connection
	fbClientConnection();	
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="3cb57e38-141e-4dd7-970e-0e4941e75bee">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	TCP_CmdState.cSTA_Close:
		THIS^.sta_CLOSE();
    TCP_CmdState.cSTA_ConnectBusy:
		THIS^.sta_CONNECTBusy();
	TCP_CmdState.cSTA_Connect:
		THIS^.sta_CONNECT();
	TCP_CmdState.cSTA_CloseBusy:
		THIS^.sta_CLOSEBusy();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CLOSE" ObjectId="47f3292b-7439-43f8-81ff-d5483f06761c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CLOSE" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		;
		
	END_IF

// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			TCP_CmdState.cCMD_Connect:
				me.StateMachine.intStateNext := TCP_CmdState.cSTA_ConnectBusy;
		END_CASE
	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CONNECTBusy" ObjectId="5e77cbec-e67c-4c84-b6f6-7e55aead2e7b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CONNECTBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Initialize and connect socket
		fbClientConnection.nMode := 0; 	// not used
		fbClientConnection.sRemoteHost := SIf.Par.strIPAdr;
		fbClientConnection.nRemotePort := SIf.Par.udiPort;
		fbClientConnection.tReconnect := SIF.Par.tTOConnection;
		fbClientConnection.bEnable:= TRUE;
	
		// clear both buffers
		fbSendBuffer.A_Reset();
		fbReceiveBuffer.A_Reset();
		
		// reset all nessecary parameters
		bReceivedAck := 0;
		bReceivedNack := 0;
		intSendState := 0;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Check about FUB error	
		IF (fbClientConnection.bError = TRUE) OR (fbClientConnection.nErrId &lt;&gt; 0) THEN		
			SIf.Cur.bolFubErrorActive:= TRUE;																			
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_TCP.FubErrorClientConnection, UDINT_TO_DINT(fbClientConnection.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);																			
			me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;	
		END_IF
				
		// Wait for socket handle ID and connection state
		IF (fbClientConnection.hSocket.handle &lt;&gt; 0) AND (fbClientConnection.eState = TC2_TCPIP.E_SocketConnectionState.eSOCKET_CONNECTED) THEN 	
			me.StateMachine.intStateNext := TCP_CmdState.cSTA_Connect;
		END_IF
		
	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="ReceiveDataSequence" ObjectId="6223387b-56c6-4f61-b93b-45a4f434992c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bSuccess">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="nLoad">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="stACK">
                          <type>
                            <derived name="ST_Header" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="ReceiveDataSequence" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// receive data if connected
IF (fbClientConnection.eState = TC2_TCPIP.E_SocketConnectionState.eSOCKET_CONNECTED) THEN
	IF fbReceive.bBusy THEN	
		fbReceive.bExecute := FALSE;
		fbReceive.sSrvNetId := '';
		fbReceive();
		
		IF NOT (fbReceive.bBusy) THEN
			// Receive is finished =&gt; see what we got
				
			// First Check about FUB error	
			IF (fbReceive.bError = TRUE) THEN
				IF NOT (SIf.Cur.bolFubErrorActive) THEN
					SIf.Cur.bolFubErrorActive:= TRUE;																				
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_TCP.FubErrorReceiveData, UDINT_TO_DINT(fbReceive.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);																						
					// Try to close the socket. Needs reconnect for socket after an error!	
					me.StateMachine.intStateNext := TCP_CmdState.cSTA_CloseBusy;					
				END_IF	
				
			// No error			
			ELSE
				// Check received data
				CASE pReceiveHead^.uinMsgId  OF
					// ACK
					// **************************
					999: 
						bReceivedAck := 1;
					
					// NACK
					// **************************
					998: 
						bReceivedNack := 1;
						
					// Valid message IDs
					// **************************
					2, 3, 4, 5, 6, 7: 
					
						fbReceiveBuffer.A_Add(in := ADR(naReceiveData), iAddSize:= UDINT_TO_INT(SIZEOF(ST_Header) + pReceiveHead^.udiMsgSize), bOk=&gt;bSuccess , nLoad =&gt; nLoad );
						IF NOT ( bSuccess ) THEN 
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_TCP.AddToReceiveBufferFailed,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;
							me.StateMachine.intState := BASE_PLC.cSTA_ERROR;
						END_IF
								
					// nothing has been received	
					// **************************
					0: 
					
				ELSE
					// send NACK Command
					IF(SIf.Cfg.bUsingAck) THEN
						stACK.uinMsgId := 998;
						fbSendBuffer.A_Add(in := ADR(stACK), bOk=&gt;bSuccess , nLoad =&gt; nLoad, iAddSize:= SIZEOF(stACK.uinMsgId) );
						IF NOT (bSuccess) THEN 
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_TCP.AddToSendBufferFailed,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;
							me.StateMachine.intState := BASE_PLC.cSTA_ERROR;
						END_IF
					END_IF
				
				END_CASE
				// empty the receive data
				pReceiveHead^.uinMsgId := 0;			
			END_IF	
			
		END_IF
		
	// Trigger the next data receive 
	ELSE
		fbReceive(bExecute := FALSE); // Needs new trigger!
		fbReceive.sSrvNetId := '';
		fbReceive.hSocket := fbClientConnection.hSocket;
		fbReceive.cbLen := SIZEOF(naReceiveData);
		fbReceive.pDest := ADR(naReceiveData);
		fbReceive.tTimeout := SIf.Par.tTOReceive;
		fbReceive.bExecute := TRUE;
		fbReceive();
	END_IF
END_IF 
fbReceive();</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="SendDataSequence" ObjectId="7678623a-1051-42f6-b7bd-f6b96cc6e55f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="intI">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="SendDataSequence" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Handle Send Data
CASE intSendState OF
	cSendIdle: 
		IF fbSendBuffer.nCount &gt; 0 AND NOT (fbSend.bBusy) AND (fbClientConnection.eState = TC2_TCPIP.E_SocketConnectionState.eSOCKET_CONNECTED) THEN // there is something in the buffer that needs to be sent
			intSendState := cSendBusy;
			
			// Remove data from buffer. Get next package.
			fbSendBuffer.A_Get(pHeader =&gt; pSendHeader);
			pByteSend := pSendHeader;
			stNextHead := pSendHeader^;
			
			IF (stNextHead.uinMsgId = 999) OR (stNextHead.uinMsgId = 998 ) THEN // ack or nack
				iSendSize := SIZEOF(stNextHead.uinMsgId);
			ELSE
				iSendSize := stNextHead.udiMsgSize + SIZEOF(ST_Header);
			END_IF
			
			// send Command
			fbSend(bExecute := FALSE, sSrvNetId := ''); 
			fbSend.sSrvNetId := ''; // SIf.Par.strIPAdr;
			fbSend.hSocket := fbClientConnection.hSocket;
			fbSend.cbLen := iSendSize;
			fbSend.pSrc := pByteSend;
			fbSend.bExecute := TRUE;
			fbSend.tTimeout := SIf.Par.tTOSend;
			fbSend(); 
		ELSE
			fbSend.bExecute := FALSE;
			fbSend.sSrvNetId := '';
			fbSend();
		END_IF	
		// *)
	cSendBusy:
		IF NOT (fbSend.bBusy) THEN // sending done
			
			// First Check about FUB error	
			IF (fbSend.bError = TRUE) THEN
				IF NOT (SIf.Cur.bolFubErrorActive) THEN
					SIf.Cur.bolFubErrorActive:= TRUE;																				
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_TCP.FubErrorSendData, UDINT_TO_DINT(fbSend.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);																						
					// Try to close the socket. Needs reconnect for socket after an error!	
					me.StateMachine.intStateNext := TCP_CmdState.cSTA_CloseBusy;					
				END_IF	
			// no error			
			ELSE
				IF (stNextHead.uinMsgId &gt; 997) OR (NOT (SIf.Cfg.bUsingAck)) THEN // the sent was ack or nack
					fbSendBuffer.A_Remove();
					intSendState := cSendIdle;
				ELSE // wair for ack
					intSendState := cSendWait;
					tonSendTime(IN := 0);
					tonSendTime.PT := SIf.Par.iMaxWaitTimeAck;
					tonSendTime(IN := 1);
				END_IF	
			END_IF
			
		END_IF
		
		fbSend.bExecute := FALSE;
		fbSend.sSrvNetId := '';
		fbSend(); // *)
		
	cSendWait:
		fbSend.bExecute := FALSE;
		fbSend.sSrvNetId := '';
		fbSend();
		tonSendTime(IN := 1);
		// Wait for the ACK
		IF bReceivedAck THEN
			fbSendBuffer.A_Remove();
			bReceivedAck := 0;
			iNumSendTry := 0; // reset for next send
			intSendState := cSendIdle;
			
		ELSIF (tonSendTime.Q) OR (bReceivedNack) THEN // timeout
			
			iNumSendTry := iNumSendTry +1;
			IF iNumSendTry &gt;= SIf.Par.iMaxSendTry THEN
				// the signal has not been acknoledged too many times =&gt; error
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_TCP.NoAckReceived,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;
			ELSE // retry sending
				fbSend.bExecute := TRUE;
				fbSend(); 
				intSendState := cSendBusy;
			END_IF
			
		END_IF
END_CASE // *)
fbSend();</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="M_Push" ObjectId="7883c642-dc3f-4d2e-8350-26171b083dbe">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="paPushMsg">
                          <type>
                            <pointer>
                              <baseType>
                                <array>
                                  <dimension lower="0" upper="MAX_DATASET_SIZE" />
                                  <baseType>
                                    <BYTE />
                                  </baseType>
                                </array>
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="pstPushMsg">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="ST_Header" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="M_Push" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// send if desired
pstPushMsg := paPushMsg;
	
fbSendBuffer.A_Add(in := paPushMsg, iAddSize := UDINT_TO_INT(pstPushMsg^.udiMsgSize + SIZEOF(ST_HEADER)) , bOk=&gt;M_Push );

IF NOT ( M_Push ) THEN 
	pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_TCP.AddToSendBufferFailed,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;
END_IF
			
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="93d2be0a-cef5-4a77-8dd0-13d55ddeeb32">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_TCP" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="97cd2621-3b4d-46ec-8472-5429b0b9a4c2">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Clear pending commands
		CIf.Job.intACmd:= Base_PLC.cCMD_DONE;
		CIf.Job.intMCmd:= Base_PLC.cCMD_DONE;
			
		iNumSendTry := 0;
				
		// clear both buffers
		fbSendBuffer.A_Reset();
		fbReceiveBuffer.A_Reset();
		// Reset Tx state
		intSendState:= cSendIdle;
	END_IF
	

// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			SIf.Cur.bolFubErrorActive:= FALSE;
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="9f31c568-7162-437c-8e00-9f15ed125f3e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// ------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := TCP_CmdState.cCMD_Close;
	CIf.Job.aCmdList[iIdx].strName := 'CLOSE'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
    iIdx := iIdx + 1;
		CIf.Job.aCmdList[iIdx].intCmd := TCP_CmdState.cCMD_Connect;
	CIf.Job.aCmdList[iIdx].strName := 'CONNECT'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
    iIdx := iIdx + 1;

ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_TCP';
CIf.Info.strFullName := 'TCP Communication Driver';

// set alarm class
SIf.Alm[E_ALM_TCP.AddToReceiveBufferFailed].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_TCP.AddToReceiveBufferFailed].strText := 'addReceiveBufferFailed'; 
SIf.Alm[E_ALM_TCP.AddToSendBufferFailed].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_TCP.AddToSendBufferFailed].strText := 'addSendBufferFailed'; 
SIf.Alm[E_ALM_TCP.GetFromReceiveBufferFailed].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_TCP.GetFromReceiveBufferFailed].strText := 'getReceiveBufferFailed'; 
SIf.Alm[E_ALM_TCP.GetFromSendBufferFailed].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_TCP.GetFromSendBufferFailed].strText := 'getSendBufferFailed'; 
SIf.Alm[E_ALM_TCP.RemoveFromReceiveBufferFailed].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_TCP.RemoveFromReceiveBufferFailed].strText := 'RemoveReceiveBufferFailed'; 
SIf.Alm[E_ALM_TCP.RemoveFromSendBufferFailed].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_TCP.RemoveFromSendBufferFailed].strText := 'RemoveSendBufferFailed'; 
SIf.Alm[E_ALM_TCP.SocketConnectionLost].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_TCP.SocketConnectionLost].strText := 'SocketLost'; 
SIf.Alm[E_ALM_TCP.NotSent].eAlmClass := BASE_PLC.E_AlmClass.INFO;
SIf.Alm[E_ALM_TCP.NotSent].strText := 'NotSent';
SIf.Alm[E_ALM_TCP.NoAckReceived].eAlmClass := BASE_PLC.E_AlmClass.INFO;
SIf.Alm[E_ALM_TCP.NoAckReceived].strText := 'NoAckReceived';
SIf.Alm[E_ALM_TCP.FubErrorClientConnection].eAlmClass := BASE_PLC.E_AlmClass.INFO;
SIf.Alm[E_ALM_TCP.FubErrorClientConnection].strText := 'FUB error - client connection. Note add. info number';
SIf.Alm[E_ALM_TCP.FubErrorSendData].eAlmClass := BASE_PLC.E_AlmClass.INFO;
SIf.Alm[E_ALM_TCP.FubErrorSendData].strText := 'FUB error - send data. Note add. info number';
SIf.Alm[E_ALM_TCP.FubErrorReceiveData].eAlmClass := BASE_PLC.E_AlmClass.INFO;
SIf.Alm[E_ALM_TCP.FubErrorReceiveData].strText := 'FUB error - receive data. Note add. info number';


// *******************************************************************************
// initial values
// *******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation :=  FALSE;

// configuration
SIf.Cfg.bolAutoReconnectEnable  := TRUE;


// parameter
SIF.Par.strIPAdr := '192.168.2.182'; 
SIF.Par.udiPort := 7443;
SIF.Par.tTOConnection := T#10S;
SIF.Par.tTOReceive := T#5S;
SIF.Par.tTOSend := T#5S;
SIf.Par.iMaxWaitTimeAck := T#4S; // wait for Ack before declaring it not received
SIf.Par.iMaxSendTry := 5;

SIf.Cfg.bUsingAck := TRUE;

pReceiveData := ADR(naReceiveData);
pReceiveHead := pReceiveData;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CLOSEBusy" ObjectId="a785f369-92e3-4aee-a34d-b351690afae6">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CLOSEBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Reset Tx state
		intSendState:= cSendIdle;
		fbSend.bExecute:= FALSE;
		fbReceive.bExecute:= FALSE;
		iNumSendTry := 0;
		
		// Close socket
		fbClientConnection.bEnable:= FALSE;
		
		IF me.intCmd = TCP_CmdState.cCMD_Close THEN
			// clear both buffers
			fbSendBuffer.A_Reset();
			fbReceiveBuffer.A_Reset();
		END_IF
	END_IF

// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Check about FUB error	
		IF (fbClientConnection.bError = TRUE) OR (fbClientConnection.nErrId &lt;&gt; 0) THEN
			SIf.Cur.bolFubErrorActive:= TRUE;																					
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_TCP.FubErrorClientConnection, UDINT_TO_DINT(fbClientConnection.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);																			
			me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;	
		END_IF
					
		// Wait until socket is closed	
		IF (fbClientConnection.eState = TC2_TCPIP.E_SocketConnectionState.eSOCKET_DISCONNECTED) THEN 	
			IF me.intCmd = TCP_CmdState.cCMD_Close THEN
				me.StateMachine.intStateNext := TCP_CmdState.cSTA_Close;
			ELSE
				me.StateMachine.intStateNext := TCP_CmdState.cSTA_ConnectBusy;
			END_IF

		ELSIF (SIf.Cur.bolFubErrorActive) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;	
		END_IF
		
	END_IF
	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleEndDuty" ObjectId="c30c6ca9-5d88-4952-9272-3ecf84574e81">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleEndDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CycleEndDuty();

SendDataSequence();</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="c4893612-b17e-49b2-a4fe-fe76eec50cbf">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		;
	END_IF

// -------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			// Needs reconnect for socket after an error!	
			me.StateMachine.intStateNext := TCP_CmdState.cSTA_CloseBusy;
		END_IF
	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="ca134720-35a0-4cc7-b397-1701408cae06">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime	
	IF (bolState=FALSE) THEN
		// States's
		CASE intCmdState OF
			TCP_CmdState.cCMD_Connect: 
				getCmdState := 'cCMD_CONNECT';
			TCP_CmdState.cCMD_Close: 
				getCmdState := 'cCMD_CLOSE';

		END_CASE;
	ELSE
		// States's
		CASE intCmdState OF
			TCP_CmdState.cSTA_Close: 
				getCmdState := 'cSTA_CLOSE';
			TCP_CmdState.cSTA_CloseBusy: 
				getCmdState := 'cSTA_CLOSEBusy';
			TCP_CmdState.cSTA_Connect: 
				getCmdState := 'cSTA_CONNECT';
			TCP_CmdState.cSTA_ConnectBusy: 
				getCmdState := 'cSTA_CONNECTBusy';			
		END_CASE;
	END_IF 
END_IF 
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="d3032c55-8d3a-4753-8283-b1aeab934c50">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// one time first cyclic call
// The socket is closed
SUPER^.CtrlInit();

me.StateMachine.intStateNext := TCP_CmdState.cSTA_Close;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleStartDuty" ObjectId="e5befbef-7a13-4c15-81d6-9234fa61bb5a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleStartDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CycleStartDuty();

ReceiveDataSequence();</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="M_Pop" ObjectId="ec84a9f0-340d-48b3-8bd3-8828de31544b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <outputVars>
                        <variable name="naPopMsg">
                          <type>
                            <array>
                              <dimension lower="0" upper="MAX_DATASET_SIZE" />
                              <baseType>
                                <BYTE />
                              </baseType>
                            </array>
                          </type>
                        </variable>
                        <variable name="bPop">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </outputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="M_Pop" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">IF fbReceiveBuffer.nCount &gt; 0 THEN // there is something in the receive buffer
	fbReceiveBuffer.A_Remove( pHeader =&gt; pByteReceive );
	naPopMsg := pByteReceive^;
	M_Pop := 1;
	bPop := 1;
ELSE
	M_Pop := 0;
	bPop := 0;
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="61395e9e-4929-4e3c-b49a-241234675ebf">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_TCP" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>609a1fce-4485-45bf-bed3-527e862ab814</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_GRR" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolSystemOk">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolMainPressureError">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolEoffOrFuseOk">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolPowderLowWarning">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolAutoMode">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_intState">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="In_bolToggleBitGrn">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_intMainPressure">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_intCommand">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Out_intConveyorBelt">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Out_intPowderVibrator">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Out_intConveyorVibrator">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="Out_uinFilterClearingCycleTime_min">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="Out_bolToggleBitGrr">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_intAnalogValue">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_Grr" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiToggleBitGrrTimer_ms">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiToggleBitGrnTimer_ms">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="bToggleBitGrnOld">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bToggleBitOK">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		05.11.2014		BB			Start history
0.00.2		06.02.2015		BB			changed name from GRN to GRR
___________________________________________________________________________________________________*)

SUPER^();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="01abf0d9-cea3-434a-9ff2-b96aa3138c02">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF me.intCmd=Base_PLC.cCMD_RUN AND SIf.In.bolSystemOk.intern THEN
		me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="0d8f7722-1d1f-4a5e-9267-711c5ab50a30">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
	cSTA_RUN: 
        THIS^.sta_RUN();
END_CASE</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="3ca0e0d9-d2da-4930-bd5a-734a38a26e0a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState &lt;&gt; cSTA_SINGLE_ANSWER) THEN
	
	// Toggle Bit Grr
	udiToggleBitGrrTimer_ms := udiToggleBitGrrTimer_ms + me.FUBInfo.udiSample_ms;
	IF (udiToggleBitGrrTimer_ms &gt; 200) THEN
		SIf.Out.bolToggleBitGrr.intern := NOT SIf.Out.bolToggleBitGrr.intern;
		udiToggleBitGrrTimer_ms := 0;
	END_IF
	
	// check Toggle Bit Grn
	udiToggleBitGrnTimer_ms := udiToggleBitGrnTimer_ms + me.FUBInfo.udiSample_ms;
	IF (SIf.In.bolToggleBitGrn.intern &lt;&gt; bToggleBitGrnOld) THEN
		bToggleBitGrnOld := SIf.In.bolToggleBitGrn.intern;
		udiToggleBitGrnTimer_ms := 0;
	END_IF
	bToggleBitOK := FALSE;
	IF (udiToggleBitGrnTimer_ms &lt; 1000) THEN
		bToggleBitOK := TRUE;
	END_IF
	
	IF NOT bToggleBitOK THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.LostConnection,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	END_IF
	
	IF SIf.In.bolPowderLowWarning.intern AND bToggleBitOK THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.LowPowderWarning,0,ADR(SIf.Alm),E_AlmState.SET,CIf.Job.eMe_ActivAlmClass);
	ELSE
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.LowPowderWarning,0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
	END_IF
	
	IF NOT SIf.In.bolAutoMode.intern AND bToggleBitOK THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.ManualOperation,0,ADR(SIf.Alm),E_AlmState.SET,CIf.Job.eMe_ActivAlmClass);
	ELSE
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.ManualOperation,0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
	END_IF
	
	// reasons are either bolMainPressureError or bolEoffOrFuseOk
	IF NOT SIf.In.bolSystemOk.intern AND bToggleBitOK THEN
		IF SIf.In.bolMainPressureError.intern THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.MainPressureError,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := cSTA_EOFFBusy;
		ELSE
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_GRR.SystemError,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := cSTA_EOFFBusy;
		END_IF
	END_IF
	
	// Check Parameters
	// Conveyor Belt
	IF (SIf.Par.rConveyorBelt_Hz&gt;SIf.Cfg.rMaxFreq_Hz) THEN
		SIf.Par.rConveyorBelt_Hz := SIf.Cfg.rMaxFreq_Hz;
	ELSIF (SIf.Par.rConveyorBelt_Hz&lt;0) THEN
		SIf.Par.rConveyorBelt_Hz := 0;
	END_IF
	// Conveyor Vibrator
	IF (SIf.Par.rConveyorVibrator_Hz&gt;SIf.Cfg.rMaxFreq_Hz) THEN
		SIf.Par.rConveyorVibrator_Hz := SIf.Cfg.rMaxFreq_Hz;
	ELSIF (SIf.Par.rConveyorVibrator_Hz&lt;0) THEN
		SIf.Par.rConveyorVibrator_Hz := 0;
	END_IF
	// Powder Virbrator
	IF (SIf.Par.rPowderVibrator_Hz&gt;SIf.Cfg.rMaxFreq_Hz) THEN
		SIf.Par.rPowderVibrator_Hz := SIf.Cfg.rMaxFreq_Hz;
	ELSIF (SIf.Par.rPowderVibrator_Hz&lt;0) THEN
		SIf.Par.rPowderVibrator_Hz := 0;
	END_IF
	// Analog Value
	IF (SIf.Par.rAnalogValue_p&gt;100) THEN
		SIf.Par.rAnalogValue_p := 100;
	ELSIF (SIf.Par.rAnalogValue_p&lt;0) THEN
		SIf.Par.rAnalogValue_p := 0;
	END_IF
	
	// Set Outputs
	SIf.Out.intConveyorBelt.intern := REAL_TO_INT(MAX_INT/SIf.Cfg.rMaxFreq_Hz*SIf.Par.rConveyorBelt_Hz);
	SIf.Out.intConveyorVibrator.intern := REAL_TO_INT(MAX_INT/SIf.Cfg.rMaxFreq_Hz*SIf.Par.rConveyorVibrator_Hz);
	SIf.Out.intPowderVibrator.intern := REAL_TO_INT(MAX_INT/SIf.Cfg.rMaxFreq_Hz*SIf.Par.rPowderVibrator_Hz);
	SIf.Out.intAnalogValue.intern := REAL_TO_INT(MAX_INT/100*SIf.Par.rAnalogValue_p);
	SIf.Out.uinFilterClearingCycleTime_min.intern := SIf.Par.uinFilterClearingCycleTime_min;
	
	// Set Current Values
	SIf.Cur.intMainPressure := SIf.In.intMainPressure.intern;

END_IF

// ----------------------------------------------------------------------------------
// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState = cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="53670b8d-47c2-43a7-9bdc-52283635755d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutInt(CIf.Job.bolIoForce ,ADR(SIf.Out.intCommand));
	setOutInt(CIf.Job.bolIoForce ,ADR(SIf.Out.intConveyorBelt));
	setOutInt(CIf.Job.bolIoForce ,ADR(SIf.Out.intConveyorVibrator));
	setOutInt(CIf.Job.bolIoForce ,ADR(SIf.Out.intPowderVibrator));
	setOutUint(CIf.Job.bolIoForce ,ADR(SIf.Out.uinFilterClearingCycleTime_min));
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolToggleBitGrr));
	setOutUint(CIf.Job.bolIoForce ,ADR(SIf.Out.intAnalogValue));
	
	THIS^.Out_intCommand := SIf.Out.intCommand.map;
	THIS^.Out_intConveyorBelt := SIf.Out.intConveyorBelt.map;
	THIS^.Out_intConveyorVibrator := SIf.Out.intConveyorVibrator.map;
	THIS^.Out_intPowderVibrator := SIf.Out.intPowderVibrator.map;
	THIS^.Out_uinFilterClearingCycleTime_min := SIf.Out.uinFilterClearingCycleTime_min.map;
	THIS^.Out_bolToggleBitGrr := SIf.Out.bolToggleBitGrr.map;
	THIS^.Out_intAnalogValue := SIf.Out.intAnalogValue.map;
ELSE
	THIS^.Out_intCommand := 0;
	THIS^.Out_intConveyorBelt := 0;
	THIS^.Out_intConveyorVibrator := 0;
	THIS^.Out_intPowderVibrator := 0;
	THIS^.Out_uinFilterClearingCycleTime_min := 0;
	THIS^.Out_bolToggleBitGrr := SIf.Out.bolToggleBitGrr.map;
	THIS^.Out_intAnalogValue := 0;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="74d2b513-0985-4a05-a74d-8d4e67c5adf4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		SIf.Out.intCommand.intern := cCMD_OFF;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action

	// State Change Condition
	IF (CIf.Job.bolAlmReset = TRUE) THEN
		me.StateMachine.intStateNext := cSTA_ERRORQuit;
	END_IF

	
//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="9345503d-702c-4a29-8854-949d9b17de96">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		SIf.Out.intCommand.intern := cCMD_RUN;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF me.intCmd=Base_PLC.cCMD_OFF THEN
		me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
	ELSIF SIf.In.intState.intern=cSTA_RUN THEN
		me.StateMachine.intStateNext := Base_PLC.cSTA_RUN;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="93e78208-4a34-41d7-bf95-5e0ff37fb835">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.IoInBridge();
// digitale and analoge inputs read from hardware or forcing
SIf.In.bolSystemOk.map	:= THIS^.In_bolSystemOk;
SIf.In.bolMainPressureError.map	:= THIS^.In_bolMainPressureError;
SIf.In.bolEoffOrFuseOk.map	:= THIS^.In_bolEoffOrFuseOk;
SIf.In.bolPowderLowWarning.map	:= THIS^.In_bolPowderLowWarning;
SIf.In.bolAutoMode.map	:= THIS^.In_bolAutoMode;
SIf.In.intState.map	:= THIS^.In_intState;
SIf.In.bolToggleBitGrn.map	:= THIS^.In_bolToggleBitGrn;
SIf.In.intMainPressure.map	:= THIS^.In_intMainPressure;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolSystemOk));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolMainPressureError));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolEoffOrFuseOk));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPowderLowWarning));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolAutoMode));
	BASE_PLC.getInInt(CIf.Job.bolIoForce,ADR(SIf.In.intState));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolToggleBitGrn));
	BASE_PLC.getInInt(CIf.Job.bolIoForce,ADR(SIf.In.intMainPressure));
ELSE
	//simulation of global IO
	SIf.In.bolSystemOk.intern	:= TRUE;
	SIf.In.bolMainPressureError.intern	:= FALSE;
	SIf.In.bolEoffOrFuseOk.intern	:= TRUE;
	SIf.In.bolPowderLowWarning.intern	:= FALSE;
	SIf.In.bolAutoMode.intern	:= TRUE;
	SIf.In.intState.intern	:= SIf.Out.intCommand.intern;
	SIf.In.bolToggleBitGrn.intern	:= SIf.Out.bolToggleBitGrr.intern;
	SIf.In.intState.intern	:= 0;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="b65d2b03-ae1a-44e1-b1b8-0d2cfc836112">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// --------------------------------------------------------------------------------------
// Cyclic action

	IF me.intCmd&gt;Base_PLC.cCMD_PON THEN				
		me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
	END_IF
	
	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="be96e68e-10ee-4bec-8003-10de61798d4d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF me.intCmd=Base_PLC.cCMD_OFF THEN
		me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="c1bad505-2d26-4880-8acc-2cfc54839da4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	
	// State Change Condition
	IF (CIf.Job.bolAlmReset = FALSE) THEN
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
	

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PONBusy" ObjectId="d09c0836-06ff-4257-9794-36fdc29c9264">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PONBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
	IF SIf.In.intState.intern&lt;=cSTA_PON THEN
		SIf.Out.intCommand.intern := cCMD_PON;
	ELSE
		SIf.Out.intCommand.intern := cCMD_OFF;
	END_IF
END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF SIf.In.intState.intern=cSTA_PON OR SIf.In.intState.intern=cSTA_OFF THEN
		me.StateMachine.intStateNext := cSTA_PON;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="d2b04e50-1223-4a10-acbd-066da6e3b25d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// ------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'RUN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
    iIdx := iIdx + 1;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_GRR';
CIf.Info.strFullName := 'Granulate Remote';

// set alarm class
SIf.Alm[E_ALM_GRR.SystemError].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_GRR.SystemError].strText := 'System Error';
SIf.Alm[E_ALM_GRR.MainPressureError].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_GRR.MainPressureError].strText := 'Main Pressure Error';
SIf.Alm[E_ALM_GRR.EoffOrFuseError].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_GRR.EoffOrFuseError].strText := 'Eoff or Fuse Error';
SIf.Alm[E_ALM_GRR.LowPowderWarning].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_GRR.LowPowderWarning].strText := 'Low Powder';
SIf.Alm[E_ALM_GRR.ManualOperation].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_GRR.ManualOperation].strText := 'Manual Operation';
SIf.Alm[E_ALM_GRR.LostConnection].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_GRR.LostConnection].strText := 'Lost Connection to the Granulate Machine';

// *******************************************************************************
// initial values
// *******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation :=  FALSE;

// configuration
SIf.Cfg.rMaxFreq_Hz := 50.0;

// parameter
SIf.Par.rConveyorBelt_Hz		:= SIf.Cfg.rMaxFreq_Hz/2;
SIf.Par.rConveyorVibrator_Hz	:= SIf.Cfg.rMaxFreq_Hz/2;
SIf.Par.rPowderVibrator_Hz		:= SIf.Cfg.rMaxFreq_Hz/2;
SIf.Par.rAnalogValue_p			:= 0;
SIf.Par.uinFilterClearingCycleTime_min	:= 4*60;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="e19a1372-56b7-4fad-b15f-d75fbb96101f">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_GRR" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="f8a302e7-6b01-4806-8faf-6811e11ecba7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		SIf.Out.intCommand.intern := cCMD_OFF;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF (SIf.In.intState.intern=cSTA_OFF OR NOT SIf.In.bolAutoMode.intern) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	END_IF

	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="7a4e8331-ad47-4ba5-b879-cea967c63058">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_GRR" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>e59aaea5-7c5d-4e22-a01a-aa7ca2d8a38d</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_JCL" pouType="functionBlock">
              <interface>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_JCL" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="p_fbTCP">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_TCP" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> pointer to function block</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pTCP_CIF">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="BASE_PLC.T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="fbStateLookup">
                    <type>
                      <derived name="FB_LookupTable" />
                    </type>
                  </variable>
                  <variable name="fbCommandLookup">
                    <type>
                      <derived name="FB_LookupTable" />
                    </type>
                  </variable>
                  <variable name="bolServerConnectionError">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="m_naNextMsg">
                    <type>
                      <array>
                        <dimension lower="0" upper="MAX_DATASET_SIZE" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> variables for receiving msgs</xhtml>
                    </documentation>
                  </variable>
                  <variable name="m_paNextMsg">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="MAX_DATASET_SIZE" />
                            <baseType>
                              <BYTE />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="m_puNextMsg">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="U_JCL_Message" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
ToDo: DSC...

History:
Version		Date			Author				Comment
---------------------------------------------------------------------------------------------------
0.00.1		20.05.2014		AVME/DSC			Start history. Insert all basic functionalities.
0.00.2		28.04.2015		VP/RE				Added bolMaintenanceInProgress.
___________________________________________________________________________________________________*)

SUPER^();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="296d8e44-410f-44e7-8197-7f282e489a38">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_JCL" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="cmdSTANDBY" ObjectId="36a43e8f-6bb6-4396-981e-6aec547a8539">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="cmdSTANDBY" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// -----------------------------------------
// Prepare telegram for STANDBY
// -----------------------------------------
// Define header
stNextCommand.stHeader.uinMsgId := JCL_MsgId_Command;
stNextCommand.stHeader.udiMsgSize := SIZEOF(T_JCL_Command) - SIZEOF(ST_Header);
// Set jetter CMD
stNextCommand.usiCommand := JCL_CMD_Standby;
// Push telegram to send buffer
pNextCommand := ADR(stNextCommand);
p_fbTCP^.M_Push(paPushMsg := pNextCommand);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CLEANINGBusy" ObjectId="515bb4f2-62b4-4509-b6d7-9bd12ca30a58">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CLEANINGBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Simulation
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := T#5S;
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
				
		IF CIf.SwCfg.bolSimulation THEN
			;
		ELSE
			cmdCLEAN();
		END_IF

		me.SubStateMachine.intState := cSUB_WaitForCleaningToStart;		
		me.SubStateMachine.intStateNext := cSUB_WaitForCleaningToStart;		
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.Cur.intJETState  := JCL_CmdState.cSTA_CleanPrintHeads;
			END_IF
		END_IF	
		
		CASE me.SubStateMachine.intState OF
			cSUB_WaitForCleaningToStart:
				IF SIf.Cur.intJETState = cSTA_CleanPrintHeadsBusy THEN
					me.SubStateMachine.intStateNext := cSUB_CleaningBusy;
				END_IF
				
				IF me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiCleaningStartTimeout_ms THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.CleaningError,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
				END_IF
			cSUB_CleaningBusy:
				// Wait for feedback -&gt; maintenance automatic done	
				IF (SIf.Cur.intJETState = JCL_CmdState.cSTA_CleanPrintHeads) THEN
					me.StateMachine.intStateNext := JCL_CmdState.cSTA_CleanPrintHeads;
				END_IF
		END_CASE
		
		IF SIf.Cur.intJETState = cSTA_ERROR THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.CleaningError,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.SubStateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF

		IF p_fbTCP^.CtrlCIf^.Job.intState &lt;&gt; TCP_CmdState.cSTA_Connect THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterCommunicationLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF
	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="5308f54e-fe8d-4221-9034-66ae07629cb3">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	JCL_CmdState.cSTA_ConnectBusy: 
        THIS^.sta_CONNECTBusy();
	cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
	cSTA_RUN: 
        THIS^.sta_RUN();
	JCL_CmdState.cSTA_StandbyBusy: 
        THIS^.sta_STANDBYBusy();
	JCL_CmdState.cSTA_Standby: 
        THIS^.sta_STANDBY();	
	JCL_CmdState.cSTA_CleanPrintHeadsBusy: 
        THIS^.sta_CLEANINGBusy();
	JCL_CmdState.cSTA_CleanPrintHeads: 
        THIS^.sta_CLEANING();	
	JCL_CmdState.cSTA_CalibrationBusy:
		THIS^.sta_CALIBRATIONBusy();
	JCL_CmdState.cSTA_Calibration:
		THIS^.sta_CALIBRATION();
	JCL_CmdState.cSTA_MANUALMODE:
		THIS^.sta_MANUALMODE();
END_CASE</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="556f1e63-60be-4b6b-bf31-c9ae7fe1ee9f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	
		CASE me.intCmd OF
			Base_PLC.cCMD_RUN: 				
				me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;	
			JCL_CmdState.cCMD_Standby, Base_PLC.cCMD_STOP: 				
				me.StateMachine.intStateNext := JCL_CmdState.cSTA_StandbyBusy;
			JCL_CmdState.cCMD_CleanPrintHeads: 				
				me.StateMachine.intStateNext := JCL_CmdState.cSTA_CleanPrintHeadsBusy;
		END_CASE
		
		IF p_fbTCP^.CtrlCIf^.Job.intState &lt;&gt; TCP_CmdState.cSTA_Connect THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterCommunicationLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF

	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_MANUALMODE" ObjectId="57b21fe2-6d88-4268-b531-a2b3efb37588">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_MANUALMODE" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle;
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		SIf.Cur.bolNeedsCleaning := FALSE;
		
		// set Warning
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterManualWarning,0,ADR(SIf.Alm),E_AlmState.SET,CIf.Job.eMe_ActivAlmClass);
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		IF SIf.Cfg.bolJetterManualModeAllowed THEN
			IF SIf.Cur.bolIsRemoteControlled THEN
				me.StateMachine.intStateNext := cSTA_OFFBusy;
			END_IF
		ELSE
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterManualError,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF
		
		IF p_fbTCP^.CtrlCIf^.Job.intState &lt;&gt; TCP_CmdState.cSTA_Connect THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterCommunicationLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF

	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		
		// clear Warning
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterManualWarning,0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
		
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="58a1a65a-6b15-458d-bfde-693fdee9bd47">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CtrlInit();

// one time first cyclic call!
// Open the TCP communication to jetter remote server to get the actual machine state
me.StateMachine.intStateNext := JCL_CmdState.cSTA_ConnectBusy;

// get child if
pTCP_CIF 	:= AddChild(p_fbTCP^);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="cmdOFF" ObjectId="59dfe850-7730-45f1-8cac-9075556df3da">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="cmdOFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// -----------------------------------------
// Prepare telegram for OFF
// -----------------------------------------
// Define header
stNextCommand.stHeader.uinMsgId := JCL_MsgId_Command;
stNextCommand.stHeader.udiMsgSize := SIZEOF(T_JCL_Command) - SIZEOF(ST_Header);
// Set jetter CMD
stNextCommand.usiCommand := JCL_CMD_Off;
// Push telegram to send buffer
pNextCommand := ADR(stNextCommand);
p_fbTCP^.M_Push(paPushMsg := pNextCommand);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PONBusy" ObjectId="654f0c39-c043-40ea-8aa5-b5bce8072d53">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PONBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		IF NOT (CIf.SwCfg.bolSimulation) THEN
			// If the socket is already connected, trigger a reconnet.
			IF (pTCP_CIF^.Job.intState = TCP_CmdState.cSTA_Connect) OR (pTCP_CIF^.Job.intState = Base_PLC.cSTA_ERROR) THEN
				// Initialize sub state machine
				me.SubStateMachine.intStateNext:= JCL_CmdState.cSUB_WaitingSocketClosed;		
				me.SubStateMachine.intState:= me.SubStateMachine.intStateNext-1;
				// Connect to jetter server
				pTCP_CIF^.Job.intACmd:= TCP_CmdState.cCMD_Close;	
			ELSE		
				// Initialize sub state machine
				me.SubStateMachine.intStateNext:= JCL_CmdState.cSUB_WaitingForConnection;		
				me.SubStateMachine.intState:= me.SubStateMachine.intStateNext-1;
				// Connect to jetter server
				pTCP_CIF^.Job.intACmd:= TCP_CmdState.cCMD_Connect;	
			END_IF
		ELSE
			SIf.Cur.bolReadyForProduction:= TRUE;			
			SIf.Cur.bolRunning:= FALSE;		
			SIf.Cur.bolNeedsAttention:= FALSE;			
			SIf.Cur.bolError:= FALSE;			
			SIf.Cur.bolCleaningIncomplete:= FALSE;			
			SIf.Cur.bolIsLocalControlled:= FALSE;		
			SIf.Cur.bolIsRemoteControlled:= TRUE;
			SIf.Cur.intJETState := BASE_PLC.cSTA_PON;
		END_IF
		
	END_IF

	
// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		CASE me.SubStateMachine.intState OF
				
			// -----------------------------------------		
			JCL_CmdState.cSUB_WaitingSocketClosed:	
				IF (CIf.SwCfg.bolSimulation) THEN
					me.SubStateMachine.intStateNext:= JCL_CmdState.cSUB_WaitingForConnection;	
				ELSE							
					// Wait for socket closed
					IF (pTCP_CIF^.Job.intState = TCP_CmdState.cSTA_Close) THEN			
						me.SubStateMachine.intStateNext:= JCL_CmdState.cSUB_WaitingForConnection;	
					END_IF		
				END_IF
		
			// -----------------------------------------		
			JCL_CmdState.cSUB_WaitingForConnection:		
				IF (CIf.SwCfg.bolSimulation) THEN
					me.SubStateMachine.intStateNext:= JCL_CmdState.cSUB_SendPon;	
				ELSE							
					// Connect to jetter server
					pTCP_CIF^.Job.intACmd:= TCP_CmdState.cCMD_Connect;	
						
					// Wait for connection
					IF (pTCP_CIF^.Job.intState = TCP_CmdState.cSTA_Connect) THEN			
						me.SubStateMachine.intStateNext:= JCL_CmdState.cSUB_SendPon;	
					END_IF		
				END_IF
			
			// -----------------------------------------		
			JCL_CmdState.cSUB_SendPon:
				IF (me.intCmd = cCMD_PON) THEN
					cmdPON();
				END_IF
				me.SubStateMachine.intStateNext:= JCL_CmdState.cSUB_Done;
						
			// -----------------------------------------		
			JCL_CmdState.cSUB_Done:
				me.StateMachine.intStateNext := cSTA_PON;
		
		END_CASE
		
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="RequestState" ObjectId="6c821a16-9064-48b5-9392-ee72e76d8011">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="RequestState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Request jetter state
IF NOT (CIf.SwCfg.bolSimulation) THEN
	stNextCommand.stHeader.uinMsgId := JCL_MsgId_Command;
	stNextCommand.stHeader.udiMsgSize := SIZEOF(T_JCL_Command) - SIZEOF(ST_Header);
	stNextCommand.usiCommand := JCL_CMD_RequestState;
	pNextCommand := ADR(stNextCommand);	
	p_fbTCP^.M_Push(paPushMsg := pNextCommand);		
END_IF	</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="cmdCALIBRATION" ObjectId="76030ac2-b263-4e17-9080-2aac7f7b88b4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="cmdCALIBRATION" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// -----------------------------------------
// Prepare telegram for CALIBRATION
// -----------------------------------------
// Define header
stNextCommand.stHeader.uinMsgId := JCL_MsgId_Command;
stNextCommand.stHeader.udiMsgSize := SIZEOF(T_JCL_Command) - SIZEOF(ST_Header);
// Set jetter CMD
stNextCommand.usiCommand := JCL_CMD_Calibration;
// Push telegram to send buffer
pNextCommand := ADR(stNextCommand);
p_fbTCP^.M_Push(paPushMsg := pNextCommand);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="791ac03d-e850-4050-ae04-95c6b9eb127d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF
	

// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN	
		
		IF (SIf.Cur.intJETState = cSTA_EOFF) OR (SIf.Cur.intJETState = cSTA_EOFFBusy) THEN
			me.StateMachine.intStateNext := cSTA_EOFFBusy;
		ELSIF SIf.Cur.bolIsLocalControlled THEN
			me.StateMachine.intStateNext := cSTA_MANUALMODE;
		ELSE
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
	
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CALIBRATIONBusy" ObjectId="8a54be7c-6900-4651-bb67-5b804ef8e913">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CALIBRATIONBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Simulation
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := T#5S;
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
				
		IF CIf.SwCfg.bolSimulation THEN
			;
		ELSE
			cmdCALIBRATION();
		END_IF
		
	END_IF

// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.Cur.intJETState  := JCL_CmdState.cSTA_Calibration;
			END_IF
		END_IF	
	
		// Wait for feedback -&gt; maintenance automatic done	
		IF (SIf.Cur.intJETState = JCL_CmdState.cSTA_Calibration) THEN
			me.StateMachine.intStateNext := JCL_CmdState.cSTA_Calibration;
		END_IF
		
		IF p_fbTCP^.CtrlCIf^.Job.intState &lt;&gt; TCP_CmdState.cSTA_Connect THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterCommunicationLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF

		
	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EOFF" ObjectId="8c5a4ef0-e6c0-44f4-bbef-a93d76be3e6c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EOFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	
		IF (SIf.Cur.intJETState &lt;&gt; cSTA_EOFF) AND (SIf.Cur.intJETState &lt;&gt; cSTA_EOFFBusy) THEN
			IF SIf.Cur.bolIsLocalControlled THEN
				me.StateMachine.intStateNext := cSTA_MANUALMODE;
			ELSE
				me.StateMachine.intStateNext := cSTA_OFFBusy;
			END_IF
		END_IF
		
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterEOff,0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
		CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CLEANING" ObjectId="8f09f170-5512-41a3-9c39-bd9116033caf">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CLEANING" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		SIf.Cur.bolNeedsCleaning:= FALSE;			
	END_IF

// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		CASE me.intCmd OF	
			Base_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;	
			JCL_CmdState.cCMD_Standby, Base_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := JCL_CmdState.cSTA_StandbyBusy;			
		END_CASE

		IF p_fbTCP^.CtrlCIf^.Job.intState &lt;&gt; TCP_CmdState.cSTA_Connect THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterCommunicationLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF

	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="checkChildAlmClass" ObjectId="90ddf29a-ca4a-4017-9fc1-27742aa7e5f1">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="checkChildAlmClass" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// If there is a TCP connection problem to the server
IF (pTCP_CIF^.Job.eMe_ActivAlmClass &gt;= E_AlmClass.TSTOP) THEN
	bolServerConnectionError:= TRUE;
	// set me alarm class OFF
	CIf.Job.eMe_ActivAlmClass := E_AlmClass.OFF;
	me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="cmdCLEAN" ObjectId="c1e87bbb-d38a-4493-8c2d-ba54ea97a57f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="cmdCLEAN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// -----------------------------------------
// Prepare telegram for CLEAN
// -----------------------------------------
// Define header
stNextCommand.stHeader.uinMsgId := JCL_MsgId_Command;
stNextCommand.stHeader.udiMsgSize := SIZEOF(T_JCL_Command) - SIZEOF(ST_Header);
// Set jetter CMD
stNextCommand.usiCommand := JCL_CMD_CleanPrintHeads;
// Push telegram to send buffer
pNextCommand := ADR(stNextCommand);
p_fbTCP^.M_Push(paPushMsg := pNextCommand);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="c336f897-42f5-4a0b-ae9b-7540dcddc531">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// not inherite from base !!!  special behaviour for this controller
// SUPER^.Always();

// Conditions Always
IF (me.bolChangeBackToAUTO=TRUE) THEN // switch mode to automatic switch off controller
	//me.StateMachine.intStateNext := cSTA_OFFBusy;
	me.bolChangeBackToAUTO := FALSE;
END_IF

IF (CIf.SwCfg.bolExist=FALSE) THEN // hardware of controller does not exist
	me.StateMachine.intStateNext := cSTA_SINGLE_ANSWER;
ELSE
	// Handle command PON
	IF (me.intCmd=cCMD_PON) 
		AND (me.StateMachine.intState&lt;&gt;cSTA_PONBusy) AND (me.StateMachine.intState&lt;&gt;cSTA_PON)
		AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) 
		AND (me.StateMachine.intState&lt;&gt;cSTA_EOFF) AND (me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy) THEN
		me.StateMachine.intStateNext := cSTA_PONBusy;
	ELSIF (me.intCmd=cCMD_OFF) 
		AND (me.StateMachine.intState&lt;&gt;cSTA_PONBusy) AND (me.StateMachine.intState&lt;&gt;cSTA_PON)
		AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy) AND (me.StateMachine.intState&lt;&gt;cSTA_OFF)
		AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) 
		AND (me.StateMachine.intState&lt;&gt;cSTA_EOFF) AND (me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy)
		AND (me.StateMachine.intState&lt;&gt;JCL_CmdState.cSTA_MANUALMODE) THEN
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF
		
// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		;
	END_IF
	
	// Always handle recieve data from jetter server
	IF NOT CIf.SwCfg.bolSimulation THEN
		THIS^.HandleReceiveData();
	END_IF
	
	// Request state
	// ------------------------------
	IF (me.intCmd=cCMD_RequestState) THEN
		// Request state one time
		CIf.Job.intACmd := Base_PLC.cCMD_DONE;
		CIf.Job.intMCmd := Base_PLC.cCMD_DONE;
		THIS^.RequestState();
	END_IF
	
	// Reset Jetter alarms
	// ------------------------------
	// Can be done over command "cCMD_ResetAlarm" or normal global AlmReset
	IF (me.intCmd=cCMD_ResetAlarm) OR ((CIf.Job.bolAlmReset = TRUE) AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit)) THEN
		CIf.Job.bolAlmReset := FALSE;
		IF (me.intCmd=cCMD_ResetAlarm) THEN
			CIf.Job.intACmd := Base_PLC.cCMD_DONE;
			CIf.Job.intMCmd := Base_PLC.cCMD_DONE;
		END_IF
		// Reset Jetter alarms one time
		THIS^.ResetAlarms();
	END_IF
	
	// EOFF and MANUAL
	IF (me.StateMachine.intState&lt;&gt;cSTA_EOFF) AND (me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy) AND (me.StateMachine.intState&gt;cSTA_PON)
	  AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit)  THEN
		IF (SIf.Cur.intJETState = cSTA_EOFF) OR (SIf.Cur.intJETState = cSTA_EOFFBusy) THEN
			me.StateMachine.intStateNext := cSTA_EOFFBusy;
		ELSIF (SIf.Cur.bolIsLocalControlled) AND (me.StateMachine.intState&lt;&gt;cSTA_MANUALMODE) AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) THEN
			me.StateMachine.intStateNext := cSTA_MANUALMODE;
		END_IF
	END_IF
		
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EOFFBusy" ObjectId="c5edad98-30e5-41ef-9adf-477110a900d8">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EOFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterEOff,0,ADR(SIf.Alm),E_AlmState.SET,CIf.Job.eMe_ActivAlmClass);
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateNext := cSTA_EOFF;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="c8e413b0-cba2-470b-9102-95d7a8fea93e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		IF (CIf.SwCfg.bolSimulation) THEN 
			SIf.Cur.bolReadyForProduction:= TRUE;			
			SIf.Cur.bolRunning:= FALSE;		
			SIf.Cur.bolNeedsAttention:= FALSE;			
			SIf.Cur.bolError:= FALSE;			
			SIf.Cur.bolCleaningIncomplete:= FALSE;			
			SIf.Cur.bolIsLocalControlled:= FALSE;		
			SIf.Cur.bolIsRemoteControlled:= TRUE;
			SIf.Cur.intJETState := BASE_PLC.cSTA_OFF;
		ELSE 
			SIf.Cur.bolNeedsCleaning := FALSE;
			cmdOFF();
		END_IF
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Wait for feedback -&gt; OFF
		IF (SIf.Cur.intJETState = BASE_PLC.cSTA_OFF) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
		
		IF p_fbTCP^.CtrlCIf^.Job.intState &lt;&gt; TCP_CmdState.cSTA_Connect THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterCommunicationLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF

	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="ca7f9e3f-63f4-4555-b1e8-2b882bfddf30">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		IF CIf.SwCfg.bolSimulation THEN
			SIf.Cur.bolReadyForProduction:= TRUE;			
			SIf.Cur.bolRunning:= TRUE;		
			SIf.Cur.bolNeedsAttention:= FALSE;			
			SIf.Cur.bolError:= FALSE;			
			SIf.Cur.bolCleaningIncomplete:= FALSE;			
			SIf.Cur.bolIsLocalControlled:= FALSE;		
			SIf.Cur.bolIsRemoteControlled:= TRUE;
			SIf.Cur.intJETState := cSTA_RUN;
		ELSE
			cmdRUN();
		END_IF
			 
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Wait for feedback -&gt; RUN
		IF (SIf.Cur.intJETState = cSTA_RUN) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
		END_IF
		
		IF p_fbTCP^.CtrlCIf^.Job.intState &lt;&gt; TCP_CmdState.cSTA_Connect THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterCommunicationLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF

	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STANDBYBusy" ObjectId="d928f2ad-c37d-490e-a6a7-2b24c6411c3b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STANDBYBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Simulation
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := T#5S;
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
				
		IF CIf.SwCfg.bolSimulation THEN
			;
		ELSE
			cmdSTANDBY();
		END_IF
		
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.Cur.bolReadyForProduction:= TRUE;			
				SIf.Cur.bolRunning:= TRUE;		
				SIf.Cur.bolNeedsAttention:= FALSE;			
				SIf.Cur.bolError:= FALSE;			
				SIf.Cur.bolCleaningIncomplete:= FALSE;			
				SIf.Cur.bolIsLocalControlled:= FALSE;		
				SIf.Cur.bolIsRemoteControlled:= TRUE;
				SIf.Cur.intJETState  := JCL_CmdState.cSTA_Standby;
			END_IF
		END_IF	
	
		// Wait for feedback -&gt; standby	
		IF (SIf.Cur.intJETState  = JCL_CmdState.cSTA_Standby) THEN
			me.StateMachine.intStateNext := JCL_CmdState.cSTA_Standby;
		END_IF
		
		IF p_fbTCP^.CtrlCIf^.Job.intState &lt;&gt; TCP_CmdState.cSTA_Connect THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterCommunicationLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF

	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CONNECTBusy" ObjectId="d9f12384-1f30-48ca-9331-c1298072043c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CONNECTBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
		// **********************************************************************************
		// This state will be executed one time after startup or after an error ack.
		// State open the TCP communication to jetter remote server to get the actual machine state
		// **********************************************************************************
		// Reset state 
		SIf.Cur.intJETState:= 0;
		
		// Connect to the jetter server
		pTCP_CIF^.Job.intACmd:= TCP_CmdState.cCMD_Connect;
		
		// Initialize sub state machine
		me.SubStateMachine.intStateNext:= JCL_CmdState.cSUB_WaitingForConnection;		
		me.SubStateMachine.intState:= me.SubStateMachine.intStateNext-1;
	END_IF

// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// -----------------------------------------------
		// Sub state machine handle 
		// -----------------------------------------------
		CASE me.SubStateMachine.intState OF
			
			JCL_CmdState.cSUB_WaitingForConnection:			
				// Wait for connection
				IF (pTCP_CIF^.Job.intState = TCP_CmdState.cSTA_Connect) THEN	
					// Request jetter states the first time after TCP client connected				
					THIS^.RequestState();		
					me.SubStateMachine.intStateNext:= JCL_CmdState.cSUB_WaitingForState;	
				END_IF
			
			JCL_CmdState.cSUB_WaitingForState:
				// Wait for first status msg 
				IF (SIf.Cur.intJETState &gt; 0) THEN 
					me.SubStateMachine.intStateNext:= JCL_CmdState.cSUB_Done;
				END_IF	

			JCL_CmdState.cSUB_Done:
				// Change to the init state
				me.StateMachine.intStateNext := SIf.Cur.intJETState;
			
		END_CASE
			
	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="e00be5f7-dd05-4b46-b2b0-9660f35afb71">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		IF (SIf.Cfg.bolJetterManualModeAllowed) THEN
			IF SIf.Cur.bolIsLocalControlled THEN
				me.StateMachine.intStateNext := JCL_CmdState.cSTA_MANUALMODE;
			END_IF			
			
			IF p_fbTCP^.CtrlCIf^.Job.intState &lt;&gt; TCP_CmdState.cSTA_Connect THEN
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterCommunicationLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
			END_IF
		ELSE
			IF (SIf.Cur.intJETState &lt;&gt; cSTA_RUN) THEN
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterNotRun,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
			END_IF
				
			IF SIf.Cur.bolIsLocalControlled THEN
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterManualError,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
			END_IF
		END_IF
		
		IF p_fbTCP^.CtrlCIf^.Job.intState &lt;&gt; TCP_CmdState.cSTA_Connect THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterCommunicationLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF

		IF (me.StateMachine.intStateNext&lt;&gt;Base_PLC.cSTA_ERROR) AND (me.StateMachine.intStateNext&lt;&gt;JCL_CmdState.cSTA_MANUALMODE)THEN
			CASE me.intCmd OF
				Base_PLC.cCMD_RUN:
					me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;
				JCL_CmdState.cCMD_CleanPrintHeads:
					me.StateMachine.intStateNext := JCL_CmdState.cSTA_CleanPrintHeadsBusy;
				JCL_CmdState.cCMD_Standby, Base_PLC.cCMD_STOP:
					me.StateMachine.intStateNext := JCL_CmdState.cSTA_StandbyBusy;
			END_CASE
		END_IF
		
	END_IF
	

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="e1c312d7-a67c-4057-b56c-13f76f80f10c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF

	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="cmdPON" ObjectId="e7846860-4b92-4abf-a39b-2e23b2a42de9">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="cmdPON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// -----------------------------------------
// Prepare telegram for PON
// -----------------------------------------
// Define header
stNextCommand.stHeader.uinMsgId := JCL_MsgId_Command;
stNextCommand.stHeader.udiMsgSize := SIZEOF(T_JCL_Command) - SIZEOF(ST_Header);
// Set jetter CMD
stNextCommand.usiCommand := JCL_CMD_PowerOn;
// Push telegram to send buffer
pNextCommand := ADR(stNextCommand);
p_fbTCP^.M_Push(paPushMsg := pNextCommand);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STANDBY" ObjectId="e992415a-6e20-4037-b48f-d90709c0e0f9">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STANDBY" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		;
	END_IF

// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		CASE me.intCmd OF
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
			JCL_CmdState.cCMD_Standby:
				me.StateMachine.intStateNext := JCL_CmdState.cSTA_StandbyBusy;
			JCL_CmdState.cCMD_CleanPrintHeads: 				
				me.StateMachine.intStateNext := JCL_CmdState.cSTA_CleanPrintHeadsBusy;
			JCL_CmdState.cCMD_Calibration: 				
				me.StateMachine.intStateNext := JCL_CmdState.cSTA_CalibrationBusy;	
		END_CASE

		IF p_fbTCP^.CtrlCIf^.Job.intState &lt;&gt; TCP_CmdState.cSTA_Connect THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterCommunicationLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF

	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="eab34da0-1294-4781-ab7c-e523a624984f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (pTCP_CIF^.Job.bolAlmReset = FALSE) THEN
			IF pTCP_CIF^.Job.intState = TCP_CmdState.cSTA_Connect THEN
				IF SIf.Cfg.bolJetterManualModeAllowed THEN
					IF SIf.Cur.bolIsLocalControlled THEN
						me.StateMachine.intStateNext := JCL_CmdState.cSTA_MANUALMODE;
					ELSE
						me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
					END_IF
				ELSE
					IF SIf.Cur.bolIsLocalControlled THEN
						me.StateMachine.intStateNext := JCL_CmdState.cSTA_MANUALMODE;
					ELSE
						me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
					END_IF
				END_IF
			ELSE
				// If the error was triggered because of an TCP connection problem to the server
				IF (bolServerConnectionError) AND (pTCP_CIF^.Job.eMe_ActivAlmClass = E_AlmClass.NONE) THEN
					bolServerConnectionError:= FALSE;
					// Try to reopen the connection to server
					me.StateMachine.intStateNext := JCL_CmdState.cSTA_ConnectBusy;
				END_IF
			END_IF
		END_IF
	END_IF

	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="ecda697d-3315-4078-829a-5c07a7917a21">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime	
	IF (bolState=FALSE) THEN
		// States's
		CASE intCmdState OF
			JCL_CmdState.cCMD_Standby: 
				getCmdState := 'Standby';
			JCL_CmdState.cCMD_CleanPrintHeads: 
				getCmdState := 'CleanPrintHeads';		
				
		END_CASE;
	ELSE
		// States's
		CASE intCmdState OF			
			// Main states
			JCL_CmdState.cSTA_StandbyBusy: 
				getCmdState := 'StandbyBusy'; 
			JCL_CmdState.cSTA_Standby:
				getCmdState := 'Standby';			
			JCL_CmdState.cSTA_ConnectBusy:
				getCmdState := 'ConnectBusy';
			JCL_CmdState.cSTA_CleanPrintHeadsBusy: 
				getCmdState := 'CleanPrintHeadsBusy'; 
			JCL_CmdState.cSTA_CleanPrintHeads:
				getCmdState := 'CleanPrintHeads';		
			JCL_CmdState.cSTA_CalibrationBusy:
				getCmdState := 'CalibrationBusy';	
			JCL_CmdState.cSTA_Calibration:
				getCmdState := 'Calibration';	
			JCL_CmdState.cSTA_MANUALMODE:
				getCmdState := 'Jetter Manual';	
						
			// Sub states
			JCL_CmdState.cSUB_WaitingForConnection:
				getCmdState := 'WaitingForConnection';
			JCL_CmdState.cSUB_WaitingForState:
				getCmdState := 'WaitingForState';
			JCL_CmdState.cSUB_Done:
				getCmdState := 'Done';			
			JCL_CmdState.cSUB_WaitForCleaningToStart:
				getCmdState := 'WaitForCleaningToStart';
			JCL_CmdState.cSUB_CleaningBusy:
				getCmdState := 'CleaningBusy';			
		END_CASE;
	END_IF 
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="cmdRUN" ObjectId="f461cd4d-8c10-4203-b54b-f65d70f699d7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="cmdRUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// -----------------------------------------
// Prepare telegram for RUN
// -----------------------------------------
// Define header
stNextCommand.stHeader.uinMsgId := JCL_MsgId_Command;
stNextCommand.stHeader.udiMsgSize := SIZEOF(T_JCL_Command) - SIZEOF(ST_Header);
// Set jetter CMD
stNextCommand.usiCommand := JCL_CMD_Run;
// Push telegram to send buffer
pNextCommand := ADR(stNextCommand);
p_fbTCP^.M_Push(paPushMsg := pNextCommand);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CALIBRATION" ObjectId="f4c7a7ff-10f9-490e-999b-fe4298d5acb3">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CALIBRATION" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		;
	END_IF

// --------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		CASE me.intCmd OF		
			JCL_CmdState.cCMD_Standby, Base_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := JCL_CmdState.cSTA_StandbyBusy;			
		END_CASE

		IF p_fbTCP^.CtrlCIf^.Job.intState &lt;&gt; TCP_CmdState.cSTA_Connect THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_JCL.JetterCommunicationLost,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF

	END_IF

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="f609fb77-8c5d-4bf2-96c1-8df113779cc5">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// ------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'RUN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
    iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := JCL_CmdState.cCMD_Standby;
	CIf.Job.aCmdList[iIdx].strName := 'STANDBY'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := JCL_CmdState.cCMD_CleanPrintHeads;
	CIf.Job.aCmdList[iIdx].strName := 'CLEANING'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := JCL_CmdState.cCMD_Calibration;
	CIf.Job.aCmdList[iIdx].strName := 'CALIBRATION'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := JCL_CmdState.cCMD_ResetAlarm;
	CIf.Job.aCmdList[iIdx].strName := 'RESET ALARM'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := JCL_CmdState.cCMD_RequestState;
	CIf.Job.aCmdList[iIdx].strName := 'REQUEST STATE'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_JCL';
CIf.Info.strFullName := 'Jetter Client';

// set alarm class
SIf.Alm[E_ALM_JCL.JetterNotRun].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_JCL.JetterNotRun].strText := 'Jetter is not in RUN';
SIf.Alm[E_ALM_JCL.JetterManualWarning].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_JCL.JetterManualWarning].strText := 'Manual Operation';
SIf.Alm[E_ALM_JCL.JetterManualError].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_JCL.JetterManualError].strText := 'Manual Operation';
SIf.Alm[E_ALM_JCL.JetterEOff].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_JCL.JetterEOff].strText := 'Jetter in EOFF';
SIf.Alm[E_ALM_JCL.JetterCommunicationLost].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_JCL.JetterCommunicationLost].strText := 'Jetter Communication Lost';
SIf.Alm[E_ALM_JCL.CleaningError].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_JCL.CleaningError].strText := 'Cleaning Error';


// *******************************************************************************
// initial values
// *******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation :=  FALSE;

// Fill the lookup table with all valid jetter states
fbStateLookup.A_Add(iAddKey := Base_PLC.cSTA_EOFFBusy, iAddValue:= 3);
fbStateLookup.A_Add(iAddKey := Base_PLC.cSTA_EOFF, iAddValue:= 4);
fbStateLookup.A_Add(iAddKey := Base_PLC.cSTA_PONBusy, iAddValue:= 1);
fbStateLookup.A_Add(iAddKey := Base_PLC.cSTA_PON, iAddValue:= 2);
fbStateLookup.A_Add(iAddKey := BASE_PLC.cSTA_OFFBusy, iAddValue:= 5);
fbStateLookup.A_Add(iAddKey := BASE_PLC.cSTA_OFF, iAddValue:= 6);
fbStateLookup.A_Add(iAddKey := JCL_CmdState.cSTA_ParkBusy, iAddValue:= 211);
fbStateLookup.A_Add(iAddKey := BASE_PLC.cSTA_INITBusy, iAddValue:= 7);
fbStateLookup.A_Add(iAddKey := BASE_PLC.cSTA_INIT, iAddValue:= 8);
fbStateLookup.A_Add(iAddKey := JCL_CmdState.cSTA_StandbyBusy, iAddValue:= 201);
fbStateLookup.A_Add(iAddKey := JCL_CmdState.cSTA_Standby, iAddValue:= 202);
fbStateLookup.A_Add(iAddKey := BASE_PLC.cSTA_RUNBusy, iAddValue:= 9);
fbStateLookup.A_Add(iAddKey := BASE_PLC.cSTA_RUN, iAddValue:= 10);
fbStateLookup.A_Add(iAddKey := JCL_CmdState.cSTA_CalibrationBusy, iAddValue:= 203);
fbStateLookup.A_Add(iAddKey := JCL_CmdState.cSTA_Calibration, iAddValue:= 204);
fbStateLookup.A_Add(iAddKey := JCL_CmdState.cSTA_CleanPrintHeadsBusy, iAddValue:= 205);
fbStateLookup.A_Add(iAddKey := JCL_CmdState.cSTA_CleanPrintHeads, iAddValue:= 206);
fbStateLookup.A_Add(iAddKey := JCL_CmdState.cSTA_MaintenanceBusy, iAddValue:= 208);
fbStateLookup.A_Add(iAddKey := JCL_CmdState.cSTA_MaintenanceInWork, iAddValue:= 209);
fbStateLookup.A_Add(iAddKey := JCL_CmdState.cSTA_MaintenanceDone, iAddValue:= 210);

// prepare to recieve data
m_paNextMsg := ADR(m_naNextMsg);
m_puNextMsg := m_paNextMsg;

SIf.Par.udiCleaningStartTimeout_ms := 5000;

SIf.Cur.bolNeedsCleaning:= FALSE;	
SIf.Cur.intJETState:= 0;  // current state not yet known
SIf.Cfg.bolJetterManualModeAllowed := FALSE;

	</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="HandleReceiveData" ObjectId="f9e56544-6ded-4fbe-a304-532bff156f35">
                    <interface>
                      <localVars>
                        <variable name="bPop">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="ii">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="HandleReceiveData" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// get next message
p_fbTCP^.M_Pop(naPopMsg =&gt; m_naNextMsg, bPop =&gt; bPop);

IF bPop THEN // something has been recieved
	CASE m_puNextMsg^.State.stHeader.uinMsgId OF

		// -----------------------------------------------
		// Handle received state
		// -----------------------------------------------
		// Note: The Status is send on Request and on Status Change
		JCL_MsgId_State:
			
			// Update the main state
			fbStateLookup.A_LookupByValue(iLookupValue := m_puNextMsg^.State.usiMainState, iFoundKey =&gt; SIf.Cur.intJETState);
	
			// Prepare additional states
			(*
			State					BIT		Description
			-------------------------------------------------------------------------------------------------
			ReadyForProduction		0		Jetter ready for production
			Running					1		Print running, in production
			NeedsAttention			2		System needs attention. Info or warning active
			Error					3		General error active
			CleaningIncomplete		4		Cleaning cycle was aborted before finishing. Production not possible.
			MaintenanceInProgress	5	 	TRUE if a maintenance work is in progress. Independent if auto or manual maintenance is in progress.
			IsLocalControlled		6		Local control active. Commands from Client are ignored
			IsRemoteControlled		7		Remote control active. Commands from Client are accepted
			*)
	
			SIf.Cur.bolReadyForProduction:= m_puNextMsg^.State.usiAddState.0;			
			SIf.Cur.bolRunning:= m_puNextMsg^.State.usiAddState.1;		
			SIf.Cur.bolNeedsAttention:= m_puNextMsg^.State.usiAddState.2;			
			SIf.Cur.bolError:= m_puNextMsg^.State.usiAddState.3;			
			SIf.Cur.bolCleaningIncomplete:= m_puNextMsg^.State.usiAddState.4;
			SIf.Cur.bolMaintenanceInProgress:= m_puNextMsg^.State.usiAddState.5;
			SIf.Cur.bolIsLocalControlled:= m_puNextMsg^.State.usiAddState.6;
			SIf.Cur.bolIsRemoteControlled:= m_puNextMsg^.State.usiAddState.7;
			
		// -----------------------------------------------
		// Handle received print info (print done)
		// -----------------------------------------------		
		JCL_MsgId_PrintDone:
			;
		
		// -----------------------------------------------
		// Handle received alarm message
		// -----------------------------------------------
		JCL_MsgId_Alarm:
			;
			
		// -----------------------------------------------
		// Handle received request for cleaning
		// -----------------------------------------------
		JCL_MsgId_ReqCleaning:
				
			SIf.Cur.bolNeedsCleaning:= TRUE;			
			SIf.Cur.strDTOfLastCleaningCycle:= m_puNextMsg^.ReqCleaning.strDTLastClean;
		
		// nothing received	
		0:
			; 
	ELSE
		; // To do: Add error	
	END_CASE
	
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="ResetAlarms" ObjectId="fc16c660-044c-4219-9c22-fdf6339ad93d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stNextCommand">
                          <type>
                            <derived name="T_JCL_Command" />
                          </type>
                        </variable>
                        <variable name="pNextCommand">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_JCL_Command" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="ResetAlarms" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Request jetter state
IF NOT (CIf.SwCfg.bolSimulation) THEN
	stNextCommand.stHeader.uinMsgId := JCL_MsgId_Command;
	stNextCommand.stHeader.udiMsgSize := SIZEOF(T_JCL_Command) - SIZEOF(ST_Header);
	stNextCommand.usiCommand := JCL_CMD_ResetAlarm;
	pNextCommand := ADR(stNextCommand);	
	p_fbTCP^.M_Push(paPushMsg := pNextCommand);		
END_IF	</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="6abba3ed-3c06-4eaa-81e7-6325df6e6121">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_JCL" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="TCP" ObjectId="6da83431-622b-4c04-b4af-aff27d6d87be">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_TCP" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">TCP := p_fbTCP;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbTCP := TCP;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>653d1efa-6adf-4284-8977-9316a5e2dba4</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_RAX" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_pAD_SIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_POD" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_RAX" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ii">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> internal variables</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cSUB_INITIALIZED">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="500" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> ctrl specific substates definitions</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cSUB_WriteSW">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="501" />
                    </initialValue>
                  </variable>
                  <variable name="cSUB_Home">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="502" />
                    </initialValue>
                  </variable>
                  <variable name="cSUB_MoveToInitPos">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="503" />
                    </initialValue>
                  </variable>
                  <variable name="cSUB_Finished">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="504" />
                    </initialValue>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Rotary axis controller based on Deg unit system.

- position POS moved with absolute positioning
- nc settings base unit in Degree!!
- REL_POS -&gt; relative positioning for single command

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		12.09.2014		AVME/KVO	Start history
0.00.2		22.09.2014		AVME/MRU	Copy of LAX, renamed to RAX, changed mm to Degree,
										Added Turn

_______________________________________________________________________________________________*)

IF (me.bolActivate) AND (In_pAD_SIf&lt;&gt;0) THEN // cyclic call enabled
	
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_REL_POSBusy" ObjectId="0377a83a-c4f6-40aa-bdd4-82ca60c1426a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_REL_POSBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		In_pAD_SIf^.stMove.lreSetPos := DINT_TO_LREAL(SIf.Par.dinRelDist_0_1deg)/10.0; // for rel movement used also SetPos
		In_pAD_SIf^.intCmd := cPOD_CMD_REL_MOVE;	// start move with absolute target position 
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		
		// State Change Condition
		IF (In_pAD_SIf^.intCmd=cPOD_CMD_DONE) AND (In_pAD_SIf^.stStatus.bolInPos) THEN
			me.StateMachine.intStateNext := RAX_CmdState.cSTA_REL_POS;
		ELSIF (me.Alarm.eActivAlmClass=E_AlmClass.STOP) OR ((me.intCmd&lt;&gt;RAX_CmdState.cCMD_REL_POS) AND (me.intCmd&lt;&gt;cCMD_DONE)) THEN 
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOPBusy" ObjectId="0a4c90f8-4580-4d2a-8683-1d4842c61e7c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOPBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		In_pAD_SIf^.intCmd := cPOD_CMD_STOP;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		
		
		// State Change Condition
		IF (In_pAD_SIf^.intCmd=cPOD_CMD_DONE) THEN
			me.StateMachine.intStateNext := cSTA_STOP;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_POSBusy" ObjectId="0e46b232-13b9-44cb-a548-d646006dff62">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_POSBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		In_pAD_SIf^.stMove.lreSetPos := DINT_TO_LREAL(SIf.Par.dinPos_0_1Deg)/10.0;
		In_pAD_SIf^.intCmd := cPOD_CMD_ABS_MOVE;	// start move with absolute target position 
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		
		// State Change Condition
		IF (In_pAD_SIf^.intCmd=cPOD_CMD_DONE) AND (In_pAD_SIf^.stStatus.bolInPos) THEN
			me.StateMachine.intStateNext := RAX_CmdState.cSTA_POS;
		ELSIF (me.Alarm.eActivAlmClass=E_AlmClass.STOP) OR ((me.intCmd&lt;&gt;RAX_CmdState.cCMD_POS) AND (me.intCmd&lt;&gt;cCMD_DONE)) THEN 
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="0e65f7e0-c59f-42a6-bb29-bc8457ae1567">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="udiTaskCnt">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR
CIf.Job.aCmdList[ii].intCmd := cCMD_INIT;
CIf.Job.aCmdList[ii].strName := 'Init'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := RAX_CmdState.cCMD_POS;
CIf.Job.aCmdList[ii].strName := 'Position absolute';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := RAX_CmdState.cCMD_JOG_NEG;
CIf.Job.aCmdList[ii].strName := 'jogging negativ direction';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := RAX_CmdState.cCMD_JOG_POS;
CIf.Job.aCmdList[ii].strName := 'jogging positive direction';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := RAX_CmdState.cCMD_HOME;
CIf.Job.aCmdList[ii].strName := 'Home';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := RAX_CmdState.cCMD_REL_POS;
CIf.Job.aCmdList[ii].strName := 'Relative move';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := RAX_CmdState.cCMD_TURN;
CIf.Job.aCmdList[ii].strName := 'Turn';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;

// set name of class/typ
CIf.Info.strType := 'FB_RAX';
CIf.Info.strFullName := 'Rotative Axis';

// set alarm class
SIf.Alm[E_ALM_RAX.GeneralDrive].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_RAX.GeneralDrive].strText := 'general drive failure -&gt; info number'; 
SIf.Alm[E_ALM_RAX.GeneralNc].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_RAX.GeneralNc].strText := 'general nc failure -&gt; info number';
SIf.Alm[E_ALM_RAX.SwLimit].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_RAX.SwLimit].strText := 'software limit reached';
SIf.Alm[E_ALM_RAX.NegHwLimit].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_RAX.NegHwLimit].strText := 'neg. hardware switch detected';
SIf.Alm[E_ALM_RAX.PosHwLimit].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_RAX.PosHwLimit].strText := 'pos. hardware switch detected';
SIf.Alm[E_ALM_RAX.InterlockNegMove].eAlmClass := E_AlmClass.EOFF;
SIf.Alm[E_ALM_RAX.InterlockNegMove].strText := 'interlock neg. movement - movement stopped';
SIf.Alm[E_ALM_RAX.InterlockPosMove].eAlmClass := E_AlmClass.EOFF;
SIf.Alm[E_ALM_RAX.InterlockPosMove].strText := 'interlock pos. movement  - movement stopped';
SIf.Alm[E_ALM_RAX.GeneralMCFUB].eAlmClass := E_AlmClass.STOP;
SIf.Alm[E_ALM_RAX.GeneralMCFUB].strText := 'MC fub error -&gt; info number';

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// cfg
//SIf.Cfg.eHomingMode := MC_HomingMode.MC_Direct;
SIf.Cfg.eHomingMode := MC_HomingMode.MC_DefaultHoming;
SIf.Cfg.lreShortestWayWindow_deg := 20.0; //20.0°

// parmeter
SIf.Par.dinHomeOffset_0_1deg := -900;
SIf.Par.dinPos_0_1deg := 0;
SIf.Par.dinRelDist_0_1deg := 10;
SIf.Par.dinPositionInit_0_1deg := 0;
SIf.Par.dintAccDec_0_1deg_s2 := 4000;
SIf.Par.dinAcc_per := 100;
SIf.Par.dinDec_per := 100;
SIf.Par.dinSetDecFast_0_1deg_s2 := 4000;
SIf.Par.dinSpeed_0_1deg_s := 200;
SIf.Par.dinSpeed_per := 200;
SIf.Par.dinSWLimitNeg_0_1deg := 0;
SIf.Par.dinSWLimitPos_0_1deg := 360;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EOFF" ObjectId="107e77c3-5d0b-4cc9-985d-dcf2cda06cf7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EOFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// State Change Condition
		IF (me.intCmd&lt;&gt;cCMD_EOFF) AND (me.intCmd&lt;&gt;cCMD_DONE)  AND (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.EOFF) THEN
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="1cb9b272-f8b8-4e66-ae2d-f3347c3e1236">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	// check interlocks to prevent damages
	IF (CIf.Job.bolIlkOverwrite=FALSE) THEN
		IF (SIf.Ilk.bolMovePos) AND (In_pAD_SIf^.stStatus.bolCtrlOn)  AND ((In_pAD_SIf^.intCmd=cPOD_CMD_POS_JOG) OR (In_pAD_SIf^.intCmd=cPOD_CMD_POS_MOVE) OR
			((In_pAD_SIf^.stMove.lreSetPos &gt; In_pAD_SIf^.stMove.lreActPos) AND (In_pAD_SIf^.intCmd=cPOD_CMD_ABS_MOVE)) OR
			((In_pAD_SIf^.intCmd=cPOD_CMD_REL_MOVE) AND (In_pAD_SIf^.stMove.lreSetPos&gt;0)) OR (SIf.Cur.dinSpeed_0_1deg_s&gt;5)  )THEN	
			// SIf.Alm[8].strText := 'interlock pos. movement  - movement stopped';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_RAX.InterlockPosMove,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			In_pAD_SIf^.intCmd:=cPOD_CMD_EMCY_STOP_CTRL_OFF;
		END_IF
		IF (SIf.Ilk.bolMoveNeg) AND (In_pAD_SIf^.stStatus.bolCtrlOn)  AND ((In_pAD_SIf^.intCmd=cPOD_CMD_NEG_JOG) OR (In_pAD_SIf^.intCmd=cPOD_CMD_NEG_MOVE) OR
		 	(In_pAD_SIf^.intCmd=cPOD_CMD_HOME) OR
			((In_pAD_SIf^.stMove.lreSetPos &lt; In_pAD_SIf^.stMove.lreActPos) AND (In_pAD_SIf^.intCmd=cPOD_CMD_ABS_MOVE)) OR
			((In_pAD_SIf^.intCmd=cPOD_CMD_REL_MOVE) AND (In_pAD_SIf^.stMove.lreSetPos&lt;0)) OR (SIf.Cur.dinSpeed_0_1deg_s&lt;-5)  )THEN		
			// 'interlock neg. movement - movement stopped';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_RAX.InterlockNegMove,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			In_pAD_SIf^.intCmd:=cPOD_CMD_EMCY_STOP_CTRL_OFF;
		END_IF	
	END_IF

END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="2c8b1cd8-aeca-423d-b68f-e9b5d4bc3f75">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	cSTA_INITBusy: 
        THIS^.sta_INITBusy();
    cSTA_INIT: 
        THIS^.sta_INIT();
    RAX_CmdState.cSTA_JOG_NEG: 
        THIS^.sta_JOG_NEG();
    RAX_CmdState.cSTA_JOG_POS: 
        THIS^.sta_JOG_POS();
    RAX_CmdState.cSTA_POSBusy: 
        THIS^.sta_POSBusy();
    RAX_CmdState.cSTA_POS: 
        THIS^.sta_POS();
	RAX_CmdState.cSTA_REL_POSBusy: 
        THIS^.sta_REL_POSBusy();
    RAX_CmdState.cSTA_REL_POS: 
        THIS^.sta_REL_POS();
    RAX_CmdState.cSTA_TURNBusy: 
        THIS^.sta_TurnBusy();
    RAX_CmdState.cSTA_TURN: 
        THIS^.sta_Turn();
	cSTA_STOPBusy: 
        THIS^.sta_STOPBusy();
    cSTA_STOP: 
        THIS^.sta_STOP();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="35756167-7bf1-4a34-b1ec-d2ee8c95bfa6">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		// State Change Condition
		// check if no important alarm activ
		IF (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.OFF) THEN
			IF ((me.intCmd&lt;&gt;cCMD_OFF) AND (me.intCmd&lt;&gt;cCMD_DONE)) THEN 
				me.StateMachine.intStateNext := cSTA_INITBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_INIT" ObjectId="3da47070-75d7-4ab8-83f6-9bce02760ef2">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_INIT" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		// State Change Condition
		// check if no important alarm activ
		IF (me.intCmd=RAX_CmdState.cCMD_POS) THEN 
			me.StateMachine.intStateNext := RAX_CmdState.cSTA_POSBusy;
		ELSIF(me.intCmd=RAX_CmdState.cCMD_REL_POS) THEN
				me.StateMachine.intStateNext := RAX_CmdState.cSTA_REL_POSBusy;
		ELSIF(me.intCmd=RAX_CmdState.cCMD_JOG_NEG) THEN
			me.StateMachine.intStateNext := RAX_CmdState.cSTA_JOG_NEG;
		ELSIF(me.intCmd=RAX_CmdState.cCMD_JOG_POS) THEN
			me.StateMachine.intStateNext := RAX_CmdState.cSTA_JOG_POS;
		ELSIF (me.intCmd=RAX_CmdState.cCMD_TURN) THEN 
			me.StateMachine.intStateNext := RAX_CmdState.cSTA_TURNBusy;
		ELSIF (me.intCmd=cCMD_STOP) THEN 
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_POS" ObjectId="3ee8fe20-6b49-472c-a2fc-6ad001bad3fc">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_POS" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass=E_AlmClass.STOP) OR	((me.intCmd&lt;&gt;RAX_CmdState.cCMD_POS) AND (me.intCmd&lt;&gt;cCMD_DONE)) THEN 
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="47c447e4-43f3-4434-8ed1-0a3e80ab5fb3">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	// always
	SIf.Cur.dinPosition_0_1deg := LREAL_TO_DINT(In_pAD_SIf^.stMove.lreActPos)*10;
	SIf.Cur.dinModPosition_0_1deg := LREAL_TO_DINT(In_pAD_SIf^.stMove.lreActModPos)*10;
	SIf.Cur.dinSpeed_0_1deg_s := LREAL_TO_DINT(In_pAD_SIf^.stMove.lreActVel)*10;
	SIf.Cur.dinTorque_0_1Nm := LREAL_TO_DINT(In_pAD_SIf^.stMove.lreActTorque)*10;
	SIf.Cur.bol_di1 := In_pAD_SIf^.stStatus.stDigIn.bol_SI0;
	SIf.Cur.bol_di2 := In_pAD_SIf^.stStatus.stDigIn.bol_SI1;
	SIf.Cur.bol_di3 := In_pAD_SIf^.stStatus.stDigIn.bol_SI2;
	SIf.Cur.bol_di4 := In_pAD_SIf^.stStatus.stDigIn.bol_SI3; // used for homing.....

	// info message 'software limit reached'
	IF ((In_pAD_SIf^.stStatus.bolNegSWSwitch) OR (In_pAD_SIf^.stStatus.bolPosSWSwitch)) THEN 
		IF (SIf.Alm[E_ALM_RAX.SwLimit].bol=FALSE)THEN
			// 'software limit reached';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_RAX.SwLimit,0,ADR(SIf.Alm),E_AlmState.SET,CIf.Job.eMe_ActivAlmClass);
			SIf.Alm[E_ALM_RAX.SwLimit].bol:= TRUE;
		END_IF;
	ELSE
		IF (SIf.Alm[E_ALM_RAX.SwLimit].bol) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,4,0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
			SIf.Alm[E_ALM_RAX.SwLimit].bol:= FALSE;
		END_IF
	END_IF
	
	//------------------------------------------------------------------------------------------------------------------------------------
	// set parameter
	// in Manual set % speed to 100% for single cmd's
	IF (CIf.Job.eMode=E_Mode.MANU) THEN
		SIf.Par.dinSpeed_per := 100;
		SIf.Par.dinAcc_per := 100;
		SIf.Par.dinDec_per := 100;
	END_IF	
	
	In_pAD_SIf^.stMove.lreSetSpeed := fSetPar(SIf.Par.dinSpeed_0_1deg_s,SIf.Par.dinSpeed_per);
	In_pAD_SIf^.stMove.lreSetAcc := fSetPar(SIf.Par.dintAccDec_0_1deg_s2,SIf.Par.dinAcc_per);
	In_pAD_SIf^.stMove.lreSetDec := fSetPar(SIf.Par.dintAccDec_0_1deg_s2,SIf.Par.dinDec_per);
	IF (SIf.Par.dinSetDecFast_0_1deg_s2&gt;0) THEN
		In_pAD_SIf^.stMove.lreSetDecFast := DINT_TO_LREAL(SIf.Par.dinSetDecFast_0_1deg_s2)/10.0;
	ELSE
		In_pAD_SIf^.stMove.lreSetDecFast := In_pAD_SIf^.stMove.lreSetDec;
	END_IF
	In_pAD_SIf^.stCfg.bolSimulation := CIf.SwCfg.bolSimulation;
	
	// ----------------------------------------------------------------------------------
	// Conditions Always
	IF (me.StateMachine.intState&gt;cSTA_PON) THEN	
		IF ((In_pAD_SIf^.stErr.bolErrorActive) AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit)) THEN
			// detect drive error
			me.StateMachine.intStateNext := cSTA_ERROR;
		END_IF
	END_IF
END_IF




</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="57274842-7936-4cc4-968f-82a39c04981d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			In_pAD_SIf^.stErr.bolErrAck := TRUE; // reset drive error
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (In_pAD_SIf^.stErr.bolErrAck = FALSE) THEN // reset done on drive
			IF (me.StateMachine.intStateHistory&lt;=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PONBusy;
			ELSE
				me.StateMachine.intStateNext := cSTA_OFFBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EOFFBusy" ObjectId="59914de7-a7a1-4b41-8a57-f23c67be8e13">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EOFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
				
		In_pAD_SIf^.intCmd := cPOD_CMD_EMCY_STOP_CTRL_OFF;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
	
		// no change action
	
		// State Change Condition
		IF (In_pAD_SIf^.intCmd=cPOD_CMD_DONE) AND (In_pAD_SIf^.stStatus.bolCtrlOn=FALSE) THEN
			me.StateMachine.intStateNext := cSTA_EOFF;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="84353448-f703-49d7-807c-2a68756144ab">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
				
		In_pAD_SIf^.intCmd := cPOD_CMD_CTRL_OFF;	//1004;		// Switch controller off 
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
	
		// no change action
	
		// State Change Condition
		IF (In_pAD_SIf^.intCmd=cPOD_CMD_DONE) AND (In_pAD_SIf^.stStatus.bolCtrlOn=FALSE) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="a31f3e24-3d7b-421c-b031-ea538afe6281">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states
IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// cmd's
		CASE intCmdState OF
			RAX_CmdState.cCMD_HOME: 
				getCmdState := 'cCMD_HOME';
			RAX_CmdState.cCMD_POS: 
				getCmdState := 'cCMD_POS';
			RAX_CmdState.cCMD_JOG_NEG: 
				getCmdState := 'cCMD_JOG_NEG';
			RAX_CmdState.cCMD_JOG_POS: 
				getCmdState := 'cCMD_JOG_POS';
			RAX_CmdState.cCMD_REL_POS: 
				getCmdState := 'cCMD_REL_POS';
			RAX_CmdState.cCMD_TURN: 
				getCmdState := 'cCMD_TURN';
		ELSE
				getCmdState := 'not defined';
		END_CASE;
	ELSE
	
	// cmd's
		CASE intCmdState OF
			RAX_CmdState.cSTA_POSBusy: 
				getCmdState := 'cSTA_POSBusy';
			RAX_CmdState.cSTA_POS: 
				getCmdState := 'cSTA_POS';
			RAX_CmdState.cSTA_JOG_NEG: 
				getCmdState := 'cSTA_JOG_NEG';
			RAX_CmdState.cSTA_JOG_POS: 
				getCmdState := 'cSTA_JOG_POS';
			RAX_CmdState.cSTA_REL_POSBusy: 
				getCmdState := 'cSTA_REL_POSBusy';
			RAX_CmdState.cSTA_REL_POS: 
				getCmdState := 'cSTA_REL_POS';
			RAX_CmdState.cSTA_TURNBusy: 
				getCmdState := 'cSTA_TURNBusy';
			RAX_CmdState.cSTA_TURN: 
				getCmdState := 'cSTA_TURN';			
			cSUB_WriteSW: 
				getCmdState := 'cSUB_WriteSW';
			cSUB_Home: 
				getCmdState := 'cSUB_Home';
			cSUB_MoveToInitPos: 
				getCmdState := 'cSUB_MoveToInitPos';
			cSUB_Finished: 
				getCmdState := 'cSUB_Finished';
			cSUB_INITIALIZED:
				getCmdState := 'cSUB_INITIALIZED';
		ELSE
				getCmdState := 'not defined';
		END_CASE;
	END_IF
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_INITBusy" ObjectId="a52477a7-05e3-4787-9f30-7673c625fce7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_INITBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		me.SubStateMachine.intState := cSUB_INITIALIZED; // reset sub statemachine
		me.SubStateMachine.intStateLastCycle := me.SubStateMachine.intState-1;
		me.SubStateMachine.intStateNext := me.SubStateMachine.intState;	
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
	
		// no change action
		// ---------------------------------------------------------------------------------------------------------------------------
		// sub state machine for sequence
		CASE me.SubStateMachine.intState OF
			//--------------------------------------------------------------------------------------
			cSUB_INITIALIZED:
				// Entry action
				IF (me.SubStateMachine.intState&lt;&gt;me.SubStateMachine.intStateLastCycle) THEN
					me.SubStateMachine.intStateLastCycle := me.SubStateMachine.intState;
				END_IF	
				
				// -------------------------------- State Change Condition
				IF(TRUE) THEN
					me.SubStateMachine.intStateNext := cSUB_WriteSW;
				END_IF
					
			//--------------------------------------------------------------------------------------
			cSUB_WriteSW:
				// Entry action
				IF (me.SubStateMachine.intState&lt;&gt;me.SubStateMachine.intStateLastCycle) THEN
					me.SubStateMachine.intStateLastCycle := me.SubStateMachine.intState;
				END_IF	
				
				(*
				// write sw offset to nc system offset to real axis system/encoder!!!!!!!!
				IF ((SIf.Par.lreHomeOffset_mm&lt;&gt;In_pAD_SIf^.stcfg.lreHomePosition) AND (In_pAD_SIf^.intServiceCmd=cPOD_CMD_DONE)) THEN
					In_pAD_SIf^.stService.eNC_ParNumber := MC_AxisParameter.AxisEncoderOffset;
					In_pAD_SIf^.stService.strValue := LREAL_TO_STRING(SIf.Par.lreHomeOffset_mm);
					In_pAD_SIf^.intServiceCmd := cPOD_SCMD_WRITE_PARA_NC;
					In_pAD_SIf^.stcfg.lreHomePosition := SIf.Par.lreHomeOffset_mm;
				END_IF
				
				// write sw-limits to nc system
				IF ((SIf.Par.lreSWLimitNeg_mm&lt;&gt;In_pAD_SIf^.stMove.lreSWLimitNeg_mm) AND (In_pAD_SIf^.intServiceCmd=cPOD_CMD_DONE)) THEN
					In_pAD_SIf^.stService.eNC_ParNumber := MC_AxisParameter.SWLimitNeg;
					In_pAD_SIf^.stService.strValue := LREAL_TO_STRING(SIf.Par.lreSWLimitNeg_mm);
					In_pAD_SIf^.intServiceCmd := cPOD_SCMD_WRITE_PARA_NC;
					In_pAD_SIf^.stMove.lreSWLimitNeg_mm := SIf.Par.lreSWLimitNeg_mm;
				END_IF
				
				IF ((SIf.Par.lreSWLimitPos_mm&lt;&gt;In_pAD_SIf^.stMove.lreSWLimitPos_mm) AND (In_pAD_SIf^.intServiceCmd=cPOD_CMD_DONE)) THEN
					In_pAD_SIf^.stService.eNC_ParNumber := MC_AxisParameter.SWLimitPos;
					In_pAD_SIf^.stService.strValue := LREAL_TO_STRING(SIf.Par.lreSWLimitPos_mm);
					In_pAD_SIf^.intServiceCmd := cPOD_SCMD_WRITE_PARA_NC;
					In_pAD_SIf^.stMove.lreSWLimitPos_mm := SIf.Par.lreSWLimitPos_mm;
				END_IF
*)
				// -------------------------------- State Change Condition
				IF (In_pAD_SIf^.intServiceCmd=cPOD_CMD_DONE) THEN
					IF ((me.intCmd=RAX_CmdState.cCMD_HOME) OR (In_pAD_SIf^.stStatus.bolHomeOk=FALSE)) THEN
						me.SubStateMachine.intStateNext := cSUB_Home;
					ELSIF (me.intCmd=cCMD_INIT) THEN
						me.SubStateMachine.intStateNext := cSUB_MoveToInitPos;
					ELSE
						me.SubStateMachine.intStateNext := cSUB_Finished; // no movement to init position no cmd INIT or HOME
					END_IF;
				END_IF
					
			//--------------------------------------------------------------------------------------
			cSUB_Home:
				// Entry action
				IF (me.SubStateMachine.intState&lt;&gt;me.SubStateMachine.intStateLastCycle) THEN
					me.SubStateMachine.intStateLastCycle := me.SubStateMachine.intState;
		
					In_pAD_SIf^.stCfg.eHomingMode := SIf.Cfg.eHomingMode;
					In_pAD_SIf^.stCfg.lreHomePosition := DINT_TO_LREAL(SIf.Par.dinHomeOffset_0_1deg)/10.0;
					In_pAD_SIf^.intCmd := cPOD_CMD_HOME;	// start homing
	
				END_IF
					
				// State Change Condition
				IF (In_pAD_SIf^.stStatus.bolHomeOk) AND (In_pAD_SIf^.intCmd=cPOD_CMD_DONE) THEN
					me.SubStateMachine.intStateNext := cSUB_MoveToInitPos;
				END_IF
				
			//--------------------------------------------------------------------------------------
			cSUB_MoveToInitPos:
				// Entry action
				IF (me.SubStateMachine.intState&lt;&gt;me.SubStateMachine.intStateLastCycle) THEN
					me.SubStateMachine.intStateLastCycle := me.SubStateMachine.intState;
				
					In_pAD_SIf^.stMove.lreSetPos := DINT_TO_LREAL(SIf.Par.dinPositionInit_0_1deg)/10.0;
					In_pAD_SIf^.stMove.eDirection := getDirection(dinActualPosition:=SIf.Cur.dinModPosition_0_1deg,lreSetPosition:=In_pAD_SIf^.stMove.lreSetPos);
					//In_pAD_SIf^.intCmd := cPOD_CMD_MOD_MOVE;	// absolute position
					In_pAD_SIf^.intCmd := cPOD_CMD_ABS_MOVE;	// absolute position
				END_IF
						
				// State Change Condition
				IF (In_pAD_SIf^.stStatus.bolInPos) AND (In_pAD_SIf^.intCmd=cPOD_CMD_DONE) THEN
					me.SubStateMachine.intStateNext := cSUB_Finished;
				END_IF
				
			//--------------------------------------------------------------------------------------
			cSUB_Finished:
				// Entry action
				IF (me.SubStateMachine.intState&lt;&gt;me.SubStateMachine.intStateLastCycle) THEN
					me.SubStateMachine.intStateLastCycle := me.SubStateMachine.intState;
				END_IF
		END_CASE
		
		// State Change Condition
		IF (me.SubStateMachine.intState =cSUB_Finished) THEN
			me.StateMachine.intStateNext := cSTA_INIT;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		CIf.Job.strSubState := '';
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_JOG_POS" ObjectId="ac865721-f27f-4cb4-919c-6530bb58d836">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_JOG_POS" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		//no change action
		In_pAD_SIf^.intCmd := cPOD_CMD_POS_JOG;
		
		// State Change Condition
		IF (me.intCmd=RAX_CmdState.cCMD_JOG_NEG) THEN
			me.StateMachine.intStateNext := RAX_CmdState.cSTA_JOG_NEG;
		ELSIF (me.intCmd&lt;&gt;RAX_CmdState.cCMD_JOG_POS) AND (me.intCmd&lt;&gt;cCMD_DONE) THEN
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_JOG_NEG" ObjectId="b3f7d9ff-43aa-42d4-b54c-191b40af9261">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_JOG_NEG" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		In_pAD_SIf^.intCmd := cPOD_CMD_NEG_JOG;
		
		// State Change Condition
		IF (me.intCmd=RAX_CmdState.cCMD_JOG_POS) THEN
			me.StateMachine.intStateNext := RAX_CmdState.cSTA_JOG_POS;
		ELSIF (me.intCmd&lt;&gt;RAX_CmdState.cCMD_JOG_NEG) AND (me.intCmd&lt;&gt;cCMD_DONE) THEN
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="c0533c34-4a67-42ac-a5d0-b8a72b291177">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		
		IF (In_pAD_SIf^.stErr.bolNCError) THEN
			// := 'general nc failure -&gt; info number';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_RAX.GeneralNc,DWORD_TO_DINT(In_pAD_SIf^.stErr.dwoErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		ELSIF (In_pAD_SIf^.stErr.bolMCError) THEN // to define
			//'MC fub error -&gt; info number';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_RAX.GeneralMCFUB,DWORD_TO_DINT(In_pAD_SIf^.stErr.dwoErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		ELSIF(In_pAD_SIf^.stErr.dwoErrorID=32000) THEN // Limit switch during movement
			IF (In_pAD_SIf^.stStatus.bolNegHWSwitch) THEN
				// 'neg. hardware switch detected';
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_RAX.NegHwLimit,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			ELSE
				// 'pos. hardware switch detected';
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_RAX.PosHwLimit,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
		ELSE
			// 'general drive failure -&gt; info number'; 
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_RAX.GeneralDrive,DWORD_TO_DINT(In_pAD_SIf^.stErr.dwoErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		END_IF
			
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOP" ObjectId="c17e605b-93ab-4039-9cff-7fc4026629eb">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOP" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.STOP) THEN
			IF ((me.intCmd=RAX_CmdState.cCMD_HOME) OR (me.intCmd=cCMD_INIT)) THEN
				me.StateMachine.intStateNext := cSTA_INITBusy;
			ELSIF (me.intCmd=RAX_CmdState.cCMD_POS) THEN 
				me.StateMachine.intStateNext := RAX_CmdState.cSTA_POSBusy;
			ELSIF(me.intCmd=RAX_CmdState.cCMD_REL_POS) THEN
				me.StateMachine.intStateNext := RAX_CmdState.cSTA_REL_POSBusy;
			ELSIF(me.intCmd=RAX_CmdState.cCMD_JOG_NEG) THEN
				me.StateMachine.intStateNext := RAX_CmdState.cSTA_JOG_NEG;
			ELSIF(me.intCmd=RAX_CmdState.cCMD_JOG_POS) THEN
				me.StateMachine.intStateNext := RAX_CmdState.cSTA_JOG_POS;
			ELSIF(me.intCmd=RAX_CmdState.cCMD_TURN) THEN
				me.StateMachine.intStateNext := RAX_CmdState.cSTA_TURNBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getDirection" ObjectId="c85ee9df-cc93-49af-8e72-744de0bff247">
                    <interface>
                      <returnType>
                        <derived name="MC_Direction" />
                      </returnType>
                      <inputVars>
                        <variable name="dinActualPosition">
                          <type>
                            <DINT />
                          </type>
                        </variable>
                        <variable name="lreSetPosition">
                          <type>
                            <LREAL />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="Direction">
                          <type>
                            <derived name="MC_Direction" />
                          </type>
                        </variable>
                        <variable name="lreActualPosition">
                          <type>
                            <LREAL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getDirection" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">Direction := MC_Positive_Direction;	// MC_Shortest_Way, MC_Negative_Direction, 
lreActualPosition := DINT_TO_LREAL(dinActualPosition)/10.0;
IF (ABS(ABS(lreActualPosition) - ABS(lreSetPosition)) &lt;= SIf.Cfg.lreShortestWayWindow_deg) THEN
	Direction := MC_Shortest_Way;
ELSIF (lreActualPosition &lt; 0) THEN
	Direction := MC_Negative_Direction;
END_IF;

getDirection := Direction;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_REL_POS" ObjectId="d435c19e-9fe7-47a6-ad92-e438bae89375">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_REL_POS" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass=E_AlmClass.STOP) OR	((me.intCmd&lt;&gt;RAX_CmdState.cCMD_REL_POS) AND (me.intCmd&lt;&gt;cCMD_DONE)) THEN 
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_Turn" ObjectId="db4ccf37-ea3d-42c3-b3a3-3db100d2d4ee">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_Turn" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass=E_AlmClass.STOP) OR	((me.intCmd&lt;&gt;RAX_CmdState.cCMD_POS) AND (me.intCmd&lt;&gt;cCMD_DONE)) THEN 
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_TurnBusy" ObjectId="fe6b38c5-6ec5-47f1-b4de-d9a0669e7a42">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_TurnBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		In_pAD_SIf^.stMove.lreSetPos := ABS(DINT_TO_LREAL(SIf.Par.dinPos_0_1deg)/10.0); // sign only for direction!!!!
		In_pAD_SIf^.stMove.eDirection := getDirection(dinActualPosition:=SIf.Cur.dinModPosition_0_1deg,lreSetPosition:=In_pAD_SIf^.stMove.lreSetPos);
//		In_pAD_SIf^.intCmd := cPOD_CMD_MOD_MOVE;	// start move with absolute target position 
		In_pAD_SIf^.intCmd := cPOD_CMD_ABS_MOVE;	// start move with absolute target position 
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
	
		// State Change Condition
		IF (In_pAD_SIf^.intCmd=cPOD_CMD_DONE) AND (In_pAD_SIf^.stStatus.bolInPos) THEN
			me.StateMachine.intStateNext := RAX_CmdState.cSTA_TURN;
		ELSIF (me.Alarm.eActivAlmClass=E_AlmClass.STOP) OR ((me.intCmd&lt;&gt;RAX_CmdState.cCMD_TURN) AND (me.intCmd&lt;&gt;cCMD_DONE)) THEN 
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="2db2a783-c62d-4fdd-b68b-65450c8c6487">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_RAX" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1ba66dca-9f6b-4b33-9c14-53cbd4cf9f57</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="fSetPar" pouType="function">
              <interface>
                <returnType>
                  <LREAL />
                </returnType>
                <inputVars>
                  <variable name="In_dinSetValue">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">factor * SetValue</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_dinSetValue_per">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> % from SetValue</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="dinFactor">
                    <type>
                      <DINT />
                    </type>
                    <initialValue>
                      <simpleValue value="10" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> every value is scaled with 10</xhtml>
                    </documentation>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">fSetPar := DINT_TO_LREAL((In_dinSetValue*In_dinSetValue_per) /(10*100));</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>254c1726-95bb-4634-9e35-6b1cde5fd766</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_BCH" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolSensorTrigScan">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_Barcode">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="Out_ChangeEvent">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_BCH" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="p_fbBcc">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_BCC" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Barcode Reader Variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pBccCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pBccSIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_SIf_BCC" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="m_pDataChannel">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_DataChannelSenderFifo" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> DataChannel</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
ToDo: DSC...

History:
Version		Date			Author				Comment
---------------------------------------------------------------------------------------------------
0.00.1		20.05.2014		AVME/DSC			Start history. Insert all basic functionalities.
___________________________________________________________________________________________________*)


SUPER^();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="059bfe4c-1d9f-4b82-85ff-b701bf32ec9d">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_BCH" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="066e1867-386b-43b1-86aa-1a62e5b87ca5">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		pBccCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF (pBccCIf^.Job.intState = BASE_PLC.cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	END_IF

	
// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="106a229c-825d-48ee-b288-b2da97fc5034">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		CASE intCmdState OF
			BCH_CmdState.cCMD_READ: 
				getCmdState := 'READ';
			BCH_CmdState.cCMD_TESTSEQUENCE: 
				getCmdState := 'TESTSEQUENCE';
		END_CASE;
	ELSE
		// States's
		CASE intCmdState OF
			BCH_CmdState.cSTA_TESTSEQUENCE: 
				getCmdState := 'TESTSEQUENCE';
			BCH_CmdState.cSUB_BARCODEREADstart: 
				getCmdState := 'BARCODEREADstart';
			BCH_CmdState.cSUB_BARCODREREAD: 
				getCmdState := 'BARCODREREAD';
			BCH_CmdState.cSUB_BARCODREREADbusy: 
				getCmdState := 'BARCODREREADbusy';
			BCH_CmdState.cSUB_WAITPAPER: 
				getCmdState := 'WAITPAPER';
			BCH_CmdState.cSUB_WAITPAPERGONE: 
				getCmdState := 'WAITPAPERGONE';
			BCH_CmdState.cSUB_WAITPAPERGONEDELAY: 
				getCmdState := 'WAITPAPERGONEDELAY';
		END_CASE;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_TestSequence" ObjectId="298e2b24-404f-44bf-bd24-f8ef62d0ca59">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_TestSequence" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;	

	me.SubStateMachine.intState		:= BCH_CmdState.cSUB_WAITPAPER;
	me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPER;
END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

sub_BarcodeReading(TRUE);

IF me.SubStateMachine.intState = BCH_CmdState.cSUB_WAITPAPER THEN
	IF me.intCmd = cCMD_RUN THEN
		me.StateMachine.intStateNext := cSTA_RUNBusy;
	END_IF
END_IF

IF me.intCmd=Base_PLC.cCMD_OFF THEN
	me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
END_IF


// --------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="532527d0-c678-4587-a80f-56f9e0762432">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CtrlInit();

pBccCIf := AddChild(p_fbBcc^);
pBccSIf := p_fbBcc^.getCtrlSIf();




</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="571c222c-8fc7-4b9c-b4f1-594f806c4a0c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	CASE me.intCmd OF
		cCMD_RUN:
			me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;
		cCMD_TESTSEQUENCE:
			me.StateMachine.intStateNext := cSTA_TESTSEQUENCE;
	END_CASE

// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="7a19cfd8-0df5-4789-9802-e740c4de89fc">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// ------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'RUN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
    iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := BCH_CmdState.cCMD_READ;
	CIf.Job.aCmdList[iIdx].strName := 'READ'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
    iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := BCH_CmdState.cCMD_TESTSEQUENCE;
	CIf.Job.aCmdList[iIdx].strName := 'Test Sequence'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
    iIdx := iIdx + 1;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_BCH';
CIf.Info.strFullName := 'Barcode with DataChannel';

// set alarm class
SIf.Alm[E_ALM_BCH.DataChannelMissing].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_BCH.DataChannelMissing].strText := 'DataChannel is missing';
SIf.Alm[E_ALM_BCH.DataChannelBufferFull].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_BCH.DataChannelBufferFull].strText := 'DataChannel Buffer is full';
SIf.Alm[E_ALM_BCH.BarcodeNotReadCorrectly].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_BCH.BarcodeNotReadCorrectly].strText := 'Barcode not detected';

// *******************************************************************************
// initial values
// *******************************************************************************

// software configuration
CIf.SwCfg.bolExist := FALSE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation :=  FALSE;

SIf.Cfg.bolEnableDataChannel := FALSE;
SIf.Cfg.bolNegativeTriggerSignal := FALSE;

SIf.Par.udiPaperGoneDelay_ms := 500;
SIf.Par.udiTestReadCylceTime_ms := 3600;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="8a4ccd7c-9661-4c75-bb2e-e32fdc0f2ee0">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// not inherite from base !!!  special behaviour for this controller
// SUPER^.Always();

// Conditions Always
IF (me.bolChangeBackToAUTO=TRUE) THEN // switch mode to automatic switch off controller
	//me.StateMachine.intStateNext := cSTA_OFFBusy;
	me.bolChangeBackToAUTO := FALSE;
END_IF

IF (CIf.SwCfg.bolExist=FALSE) THEN // hardware of controller does not exist
	me.StateMachine.intStateNext := cSTA_SINGLE_ANSWER;
ELSE
	// Handle command PON
	IF (me.intCmd=cCMD_PON) 
		AND (me.StateMachine.intState&lt;&gt;cSTA_PONBusy) AND (me.StateMachine.intState&lt;&gt;cSTA_PON)
		AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) 
		AND (me.StateMachine.intState&lt;&gt;cSTA_EOFF) AND (me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy) THEN
		me.StateMachine.intStateNext := cSTA_PONBusy;
	END_IF
END_IF
		
// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	;
END_IF

// ----------------------------------------------------------------------------------
// Always change actions in Base Library
// ----------------------------------------------------------------------------------
// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF

// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF))
		 AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) AND
		(me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="987d2d63-fa5c-4fac-9ed3-6e19abb4e578">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
	cSTA_RUN: 
        THIS^.sta_RUN();
	cSTA_TESTSEQUENCE: 
        THIS^.sta_TestSequence();
END_CASE</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="afcf114c-08eb-48a0-8413-11ccb8967cf5">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;	

	me.SubStateMachine.intState		:= BCH_CmdState.cSUB_WAITPAPER;
	me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPER;
END_IF


// --------------------------------------------------------------------------------------
// Cyclic action
sub_BarcodeReading(FALSE);

IF me.SubStateMachine.intState = BCH_CmdState.cSUB_WAITPAPER THEN
	IF me.intCmd = cCMD_TESTSEQUENCE THEN
		me.StateMachine.intStateNext := cSTA_TESTSEQUENCE;
	END_IF
END_IF

IF me.intCmd=Base_PLC.cCMD_OFF THEN
	me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
END_IF


// --------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="dae2e508-4fbf-467c-aaaf-bc0034a3438a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action

	// State Change Condition
	IF (CIf.Job.bolAlmReset = TRUE) THEN
		me.StateMachine.intStateNext := cSTA_ERRORQuit;
	END_IF

	
//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="e01dbd7b-2b28-4435-9a3a-97cb1f6d2ac0">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	
	// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
	IF (CIf.Job.bolAlmReset = TRUE) THEN
		CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
		CIf.Job.bolAlmReset := FALSE;
		
		IF (me.StateMachine.intStateHistory=cSTA_RUN) OR (me.StateMachine.intStateHistory=cSTA_RUNBusy) THEN
			me.StateMachine.intStateNext := cSTA_RUNBusy;
		ELSE
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
		
	END_IF

	
//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sub_BarcodeReading" ObjectId="e7906fc3-ca38-4b54-a38a-29d8239d4989">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bolTestSequence">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="uliBarcode">
                          <type>
                            <ULINT />
                          </type>
                        </variable>
                        <variable name="pItem">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_IdBase_DCH" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sub_BarcodeReading" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE me.SubStateMachine.intState OF
	// Wait for the paper
	// ------------------------------------------------------------------------
	BCH_CmdState.cSUB_WAITPAPER:
		IF SIf.In.bolSensorTrigScan.intern OR (me.intCmd = BCH_CmdState.cCMD_READ) OR bolTestSequence THEN
			IF (me.intCmd = BCH_CmdState.cCMD_READ) THEN
				CIf.Job.intACmd := cCMD_DONE;			
				CIf.Job.intMCmd := cCMD_DONE;			
			END_IF

			me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_BARCODEREADstart;
		END_IF

	// substate Start Reading Barcode
	// ------------------------------------------------------------------------
	BCH_CmdState.cSUB_BARCODEREADstart:
		pBccCIf^.Job.intACmd := BCC_CmdState.cBCC_CMD_READ;

		CASE pBccCIf^.Job.intState OF
			BCC_CmdState.cBCC_STA_READBusy:
				me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_BARCODREREADbusy;
			cSTA_ERROR:
				me.StateMachine.intStateNext := cSTA_ERROR;
		END_CASE

	// substate Busy Reading Barcode
	// ------------------------------------------------------------------------
	BCH_CmdState.cSUB_BARCODREREADbusy:
		CASE pBccCIf^.Job.intState OF
			BCC_CmdState.cBCC_STA_READ:
				me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_BARCODREREAD;
			cSTA_ERROR:
				me.StateMachine.intStateNext := cSTA_ERROR;
		END_CASE

	// substate Reading Barcode Done
	// ------------------------------------------------------------------------
	BCH_CmdState.cSUB_BARCODREREAD:
		IF SIf.Cfg.bolEnableDataChannel THEN
			IF pBccSIf^.Cur.stData.uliBarCode &gt; 0 THEN
				uliBarcode := pBccSIf^.Cur.stData.uliBarCode;
				Out_Barcode := uliBarcode;
				Out_ChangeEvent := Out_ChangeEvent + 1;

				IF (m_pDataChannel &lt;&gt; NULL) AND (SIf.Cfg.bolEnableDataChannel) THEN
					IF UINT_TO_INT(m_pDataChannel^.ItemCount) &gt;= m_pDataChannel^.MaxFifoSize THEN
						pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_BCH.DataChannelBufferFull,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					ELSE
						pItem := __NEW(T_IdBase_DCH);
						pItem^.rBaseInfo.eHealth := E_ItemHealth.Healthy;
						pItem^.rBaseInfo.uinModuleId := 1;
						pItem^.rBaseInfo.uinActualPosition := 1;
						pItem^.udiIdentification := pBccSIf^.Cur.stData.uliBarCode;
						m_pDataChannel^.Push(pItem);					
					END_IF
				END_IF
			END_IF

			me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPERGONE;
		END_IF
		
	// Wait Until the Paper is gone
	// ------------------------------------------------------------------------
	BCH_CmdState.cSUB_WAITPAPERGONE:
		IF NOT SIf.In.bolSensorTrigScan.intern OR bolTestSequence THEN
			me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPERGONEDELAY;
		END_IF

	// Wait Until the Paper is gone
	// ------------------------------------------------------------------------
	BCH_CmdState.cSUB_WAITPAPERGONEDELAY:
		IF bolTestSequence THEN
			IF me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiTestReadCylceTime_ms THEN
				me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPER;
			END_IF
		ELSE
			IF me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiPaperGoneDelay_ms THEN
				me.SubStateMachine.intStateNext := BCH_CmdState.cSUB_WAITPAPER;
			END_IF
		END_IF
END_CASE
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="f3be96ce-5b92-4429-8a5c-a03481bf0983">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF SIf.Cfg.bolNegativeTriggerSignal THEN
	SIf.In.bolSensorTrigScan.map			:= NOT THIS^.In_bolSensorTrigScan				;
ELSE
	SIf.In.bolSensorTrigScan.map			:= THIS^.In_bolSensorTrigScan				;
END_IF

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolSensorTrigScan));
ELSE
;	//simulation of global IO
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="f5999d3e-aed9-4d7e-bfbb-45181535c06b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
// --------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
	END_IF


// --------------------------------------------------------------------------------------
// Cyclic action

	IF me.intCmd=Base_PLC.cCMD_OFF THEN
		me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
	ELSE
		me.StateMachine.intStateNext := Base_PLC.cSTA_RUN;
	END_IF


// --------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="BarcodeReader" ObjectId="5331155f-5172-4619-aefd-236a4be06b42">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_BCC" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">BarcodeReader := p_fbBcc;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbBcc := BarcodeReader;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="DataChannel" ObjectId="70ea4189-18d2-4bf2-9c05-1e47a31f413a">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_DataChannelSenderFifo" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">m_pDataChannel := DataChannel;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="96aea3a2-a2b1-4983-a565-a3260914589b">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_BCH" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a692388c-4305-475f-ae8e-9d89dea2875c</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_MDC" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolCrossPositionSensor">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolTablePositionSensor">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_intActualPosition">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Position Output to the higher controller</xhtml>
                    </documentation>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_MDC" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="p_fbMotor">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_UMC" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to function block</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pMotor_CIF">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="BASE_PLC.T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Vacuum Pump implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		PC			Start history
0.00.2		19.02.2014		AVME/MRU	Changes in sta_TurnBusy for simulation
0.00.3		24.02.2014		AVME/MRU	sta_OFFBusy reworked

___________________________________________________________________________________________________*)

SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="06b79ec6-0420-451b-9e43-ff78d67d9b45">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := MDC_CmdState.cCMD_INITIALIZE;
	CIf.Job.aCmdList[iIdx].strName := 'Initialize'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := MDC_CmdState.cCMD_TURN;
	CIf.Job.aCmdList[iIdx].strName := 'Turn'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'Run'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := MDC_CmdState.cCMD_PREPOSITION;
	CIf.Job.aCmdList[iIdx].strName := 'PrePosition'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_MDC';
CIf.Info.strFullName := 'Malteser Drive Controller';

// set alarm class
SIf.Alm[E_ALM_MDC.TableSensorTimeout].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_MDC.TableSensorTimeout].strText := 'Table Sensor Timeout'; 
SIf.Alm[E_ALM_MDC.CrossSensorTimeout].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_MDC.CrossSensorTimeout].strText := 'Cross Sensor Timeout';
SIf.Alm[E_ALM_MDC.PositionSame].eAlmClass := Base_PLC.E_AlmClass.WARNING;
SIf.Alm[E_ALM_MDC.PositionSame].strText := 'New Position is the same as the actual position';

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parameter
SIf.Cfg.uintPositionPerTurn			:= 4;
SIf.Par.intTurnDirection			:= 0;
SIf.Par.uinPositionToGo				:= 0;
SIf.Par.uinPositionSpeed_rpm		:= 1400;
SIf.Par.uinPrePositionSpeed_rpm		:= 450;
SIf.Par.udiInitializationTime_ms 	:= 16000;
SIf.Par.udiStepRotationTime_ms 		:= 2000;
SIf.Par.udiSimInitializationTime_ms := SIf.Par.udiInitializationTime_ms / 2;
SIf.Par.udiSimStepRotationTime_ms := SIf.Par.udiStepRotationTime_ms / 2;
SIf.Par.udiSimStartRotationTime_ms := SIf.Par.udiStepRotationTime_ms / 10;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="07f39eb2-ed36-4fb5-b1c9-2c6e2047c899">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	; // always error supervision
	
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF))
		 AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) AND
		(me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PREPOSITIONbusy" ObjectId="0a756157-e369-43b7-980d-ce5376ee5939">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="eOldDirection">
                          <type>
                            <derived name="BASE_ELEMENTS.E_TURN_DIRECTION" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PREPOSITIONbusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
	IF SIf.Par.uinPositionToGo &lt;&gt; SIf.Cur.uintActualPosition THEN
		eOldDirection := SIf.Cur.eActualTurningDirection;
		SIf.Cur.eActualTurningDirection := GetTurningDirection();

		// Set Speed
		p_fbMotor^.CtrlSIf^.Par.uinSpeed_rpm := SIf.Par.uinPrePositionSpeed_rpm;
		
		// Send the comand
		CASE SIf.Cur.eActualTurningDirection OF
			E_TURN_DIRECTION.LEFT:
				pMotor_CIF^.Job.intACmd := cCMD_LEFT;		
			E_TURN_DIRECTION.RIGHT:
				pMotor_CIF^.Job.intACmd := cCMD_RIGHT;		
		END_CASE

		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimStartRotationTime_ms);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
		IF eOldDirection = SIf.Cur.eActualTurningDirection THEN
			me.SubStateMachine.intState	    := MDC_CmdState.cSUB_TURNbusy;
			me.SubStateMachine.intStateNext := MDC_CmdState.cSUB_TURNbusy;
		ELSE
			me.SubStateMachine.intState	    := MDC_CmdState.cSUB_FINDHOLEbusy;
			me.SubStateMachine.intStateNext := MDC_CmdState.cSUB_FINDHOLEbusy;
		END_IF
	ELSE
		me.StateMachine.intStateNext := MDC_CmdState.cSTA_PREPOSITION;
	END_IF
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	IF (CIf.SwCfg.bolSimulation) THEN
		fbSimulationTimer(); // simulation time

		IF (fbSimulationTimer.Q) THEN
			SIf.In.bolCrossPositionSensor.intern := FALSE;
			SIf.In.bolTablePositionSensor.intern := FALSE;
		END_IF
	END_IF
	
	CASE me.SubStateMachine.intState OF
		MDC_CmdState.cSUB_FINDHOLEbusy:
			IF SIf.In.bolCrossPositionSensor.intern THEN
				me.SubStateMachine.intStateNext := MDC_CmdState.cSUB_TURNbusy;
			END_IF
		MDC_CmdState.cSUB_TURNbusy:
			IF NOT SIf.In.bolCrossPositionSensor.intern THEN
				pMotor_CIF^.Job.intACmd := BASE_PLC.cCMD_STOP;		
				me.SubStateMachine.intStateNext := MDC_CmdState.cSUB_STOPbusy;
			END_IF
		MDC_CmdState.cSUB_STOPbusy:
			IF pMotor_CIF^.Job.intState = BASE_PLC.cSTA_STOP THEN
				me.StateMachine.intStateNext := MDC_CmdState.cSTA_PREPOSITION;
			END_IF
	END_CASE
	
	IF me.intCmd = MDC_CmdState.cCMD_TURN THEN
		IF SIf.Par.uinPositionToGo &lt;&gt; SIf.Cur.uintActualPosition THEN
			me.StateMachine.intStateNext := MDC_CmdState.cSTA_StartTurnBusy;
		ELSE
			CIf.Job.intACmd := cCMD_DONE;
			CIf.Job.intMCmd := cCMD_DONE;
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_MDC.PositionSame),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		END_IF
	END_IF

	IF (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiStepRotationTime_ms) THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_MDC.CrossSensorTimeout),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
	END_IF
	
	
END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_StartTurnBusy" ObjectId="0b7a5a6f-a052-4d75-bece-e8cd4f8f2b1e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="iDifference">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="eOldDirection">
                          <type>
                            <derived name="BASE_ELEMENTS.E_TURN_DIRECTION" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_StartTurnBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		IF SIf.Par.uinPositionToGo &lt;&gt; SIf.Cur.uintActualPosition THEN
			eOldDirection := SIf.Cur.eActualTurningDirection;
			SIf.Cur.eActualTurningDirection := GetTurningDirection();

			// Set Speed
			p_fbMotor^.CtrlSIf^.Par.uinSpeed_rpm := SIf.Par.uinPositionSpeed_rpm;
			
			// Send the comand
			CASE SIf.Cur.eActualTurningDirection OF
				E_TURN_DIRECTION.LEFT:
					pMotor_CIF^.Job.intACmd := cCMD_LEFT;		
				E_TURN_DIRECTION.RIGHT:
					pMotor_CIF^.Job.intACmd := cCMD_RIGHT;		
			END_CASE

			IF eOldDirection = SIf.Cur.eActualTurningDirection THEN
				me.SubStateMachine.intState	    := MDC_CmdState.cSUB_TURNbusy;
				me.SubStateMachine.intStateNext := MDC_CmdState.cSUB_TURNbusy;
			ELSE
				me.SubStateMachine.intState	    := MDC_CmdState.cSUB_FINDHOLEbusy;
				me.SubStateMachine.intStateNext := MDC_CmdState.cSUB_FINDHOLEbusy;
			END_IF
			
			fbSimulationTimer.IN := FALSE;
			fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimStartRotationTime_ms);
			fbSimulationTimer(); // set time/reset timer
			fbSimulationTimer.IN := TRUE; // start timer
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time

			IF (fbSimulationTimer.Q) THEN
				SIf.In.bolCrossPositionSensor.intern := FALSE;
				SIf.In.bolTablePositionSensor.intern := FALSE;
			END_IF
		END_IF
		
		CASE me.SubStateMachine.intState OF
			MDC_CmdState.cSUB_FINDHOLEbusy:
				IF SIf.In.bolCrossPositionSensor.intern THEN
					me.SubStateMachine.intStateNext := MDC_CmdState.cSUB_TURNbusy;
				END_IF
			MDC_CmdState.cSUB_TURNbusy:
				IF NOT SIf.In.bolCrossPositionSensor.intern THEN
					me.StateMachine.intStateNext := MDC_CmdState.cSTA_TurnBusy;
				END_IF
		END_CASE

		IF SIf.Par.uinPositionToGo = SIf.Cur.uintActualPosition THEN
			me.StateMachine.intStateNext := MDC_CmdState.cSTA_TURNDONE;
		END_IF 
		
		IF (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiStepRotationTime_ms) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_MDC.CrossSensorTimeout),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="14f18958-7ce3-452a-be2a-23fbae64e135">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		pMotor_CIF^.Job.intACmd := BASE_PLC.cCMD_OFF;		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="SetPositionToGo" ObjectId="288c345b-c408-445a-b778-aa4878202e04">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="uinPositionToGo">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="SetPositionToGo" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.Par.uinPositionToGo := uinPositionToGo;

SetPositionToGo := uinPositionToGo = SIf.Cur.uintActualPosition;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IncrementPosition" ObjectId="3d60a3ff-3196-4c1d-a783-63224888d106">
                    <interface>
                      <returnType>
                        <UINT />
                      </returnType>
                      <inputVars>
                        <variable name="uinPosition">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="eDirection">
                          <type>
                            <derived name="E_TURN_DIRECTION" />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iNewPosition">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IncrementPosition" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">IF eDirection = E_TURN_DIRECTION.RIGHT THEN
	iNewPosition := UINT_TO_INT((uinPosition + 1) MOD SIf.Cfg.uintPositionPerTurn);
ELSE
	iNewPosition := UINT_TO_INT(uinPosition) - 1;
	
	IF (iNewPosition &lt; 0) THEN
		iNewPosition := UINT_TO_INT(SIf.Cfg.uintPositionPerTurn) - 1;
	END_IF
END_IF

IncrementPosition := INT_TO_UINT(iNewPosition);
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="GetTurningDirection" ObjectId="448116ec-067f-4a4a-aa15-1cf64676dce3">
                    <interface>
                      <returnType>
                        <derived name="E_TURN_DIRECTION" />
                      </returnType>
                      <localVars>
                        <variable name="iDifference">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="GetTurningDirection" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">GetTurningDirection := E_TURN_DIRECTION.RIGHT;

// Determine the turning direction depending on set value or on shortest distance
CASE SIf.Par.intTurnDirection OF
	E_TURN_DIRECTION.LEFT	:
		GetTurningDirection := E_TURN_DIRECTION.LEFT;
	E_TURN_DIRECTION.AUTOMATIC 	:
		GetTurningDirection := E_TURN_DIRECTION.RIGHT;
		
		IF (SIf.Cur.uintActualPosition = 1) AND (SIf.Par.uinPositionToGo = 0) THEN
			iDifference := 0;
		END_IF

		iDifference := UINT_TO_INT(SIf.Par.uinPositionToGo - SIf.Cur.uintActualPosition);
		iDifference := ABS(iDifference);
		
		IF (    (SIf.Par.uinPositionToGo &lt; SIf.Cur.uintActualPosition) AND (iDifference &lt; UINT_TO_INT(SIf.Cfg.uintPositionPerTurn / 2)) 
			 OR (SIf.Par.uinPositionToGo &gt; SIf.Cur.uintActualPosition) AND (iDifference &gt; UINT_TO_INT(SIf.Cfg.uintPositionPerTurn / 2))) THEN
			GetTurningDirection := E_TURN_DIRECTION.LEFT;
		END_IF;
	E_TURN_DIRECTION.RIGHT	:
		GetTurningDirection := E_TURN_DIRECTION.RIGHT;
END_CASE;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_TurnBusy" ObjectId="7cbd8d5e-f43d-46b2-b435-8d2e205dbbdf">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_TurnBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimStepRotationTime_ms);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer

		me.SubStateMachine.intState 	:= MDC_CmdState.cSUB_TURNbusy;
		me.SubStateMachine.intStateNext := MDC_CmdState.cSUB_TURNbusy;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time

			IF (fbSimulationTimer.Q) THEN
				SIf.In.bolCrossPositionSensor.intern := TRUE;
			END_IF
		END_IF
		
		CASE me.SubStateMachine.intState OF
			MDC_CmdState.cSUB_TURNbusy:
				IF SIf.In.bolCrossPositionSensor.intern THEN
					SIf.Cur.uintActualPosition := IncrementPosition(SIf.Cur.uintActualPosition,SIf.Cur.eActualTurningDirection);
					
					IF (CIf.SwCfg.bolSimulation) THEN
						IF SIf.Cur.uintActualPosition = 0 THEN
							SIf.In.bolTablePositionSensor.intern := TRUE;
						END_IF
					END_IF
					
					IF SIf.Par.uinPositionToGo = SIf.Cur.uintActualPosition THEN
						pMotor_CIF^.Job.intACmd := BASE_PLC.cCMD_STOP;		
						me.SubStateMachine.intStateNext := MDC_CmdState.cSUB_STOPbusy;
					ELSE
						me.StateMachine.intStateNext := MDC_CmdState.cSTA_StartTurnBusy;
					END_IF 
				END_IF
				
			MDC_CmdState.cSUB_STOPbusy:
				IF pMotor_CIF^.Job.intState = BASE_PLC.cSTA_STOP THEN
					me.StateMachine.intStateNext := MDC_CmdState.cSTA_TURNDONE;
				END_IF
		END_CASE


		IF (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiStepRotationTime_ms) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_MDC.CrossSensorTimeout),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="870bd253-b05d-4e39-9dca-47dd6109ef1f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		;
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="87e20e42-50e8-41c7-a97a-0c01bc682c83">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf.In.bolCrossPositionSensor.map := NOT THIS^.In_bolCrossPositionSensor;
SIf.In.bolTablePositionSensor.map := THIS^.In_bolTablePositionSensor;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolCrossPositionSensor));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolTablePositionSensor));
ELSE
	//simulation of global IO
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="8d8b328d-dc07-43e2-ac84-ce6c09cbbac8">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		pMotor_CIF^.Job.intACmd := BASE_PLC.cCMD_OFF;		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		// Set commandos not only in entry action because of possible errors or manual/auto changes
		pMotor_CIF^.Job.intACmd := BASE_PLC.cCMD_OFF;		

		IF pMotor_CIF^.Job.intState = BASE_PLC.cSTA_OFF THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="8f0d5e14-4c61-4a7f-a73d-5a11076e3bac">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.intActualPosition));

	THIS^.Out_intActualPosition := SIf.Out.intActualPosition.map;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_InPositionBusy" ObjectId="988cd228-4892-4b69-9f98-49da6800f2b9">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_InPositionBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		pMotor_CIF^.Job.intACmd := BASE_PLC.cCMD_STOP;		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF pMotor_CIF^.Job.intState = BASE_PLC.cSTA_STOP THEN
			me.StateMachine.intStateNext := MDC_CmdState.cSTA_InPosition;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="bcf7a119-b9c3-451f-a4f1-583f2b4865a3">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_MDC" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="be44a038-54cd-43f4-bf1e-a4b9428ea3f2">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF me.intCmd = MDC_CmdState.cCMD_INITIALIZE THEN
			me.StateMachine.intStateNext := MDC_CmdState.cSTA_InitializeBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="c0f1c325-edf6-4b5d-a093-a6e6d51bba4a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory&lt;=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PONBusy;
			ELSIF(me.intCmd=cCMD_OFF) THEN
				me.StateMachine.intStateNext := cSTA_OFFBusy;
			ELSIF(me.intCmd=cCMD_STOP) THEN
				me.StateMachine.intStateNext := cSTA_STOPBusy;
			ELSIF(me.intCmd=MDC_CmdState.cCMD_INITIALIZE) THEN
				me.StateMachine.intStateNext := MDC_CmdState.cSTA_InitializeBusy;
			ELSIF(me.intCmd=MDC_CmdState.cCMD_TURN) THEN
				me.StateMachine.intStateNext := MDC_CmdState.cSTA_InitializeBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_InPosition" ObjectId="c773541f-2782-4a90-8a4a-29754a6ec314">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_InPosition" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		IF CIf.Job.intACmd = BASE_PLC.cCMD_RUN THEN
			CIf.Job.intACmd := cCMD_DONE;
		END_IF

		IF CIf.Job.intMCmd = BASE_PLC.cCMD_RUN THEN
			CIf.Job.intMCmd := cCMD_DONE;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			MDC_CmdState.cCMD_TURN,
			MDC_CmdState.cCMD_PREPOSITION:
//				IF SIf.Par.uinPositionToGo &lt;&gt; SIf.Cur.uintActualPosition THEN
//					SIf.Cur.eActualTurningDirection := GetTurningDirection();

					CASE me.intCmd OF
						MDC_CmdState.cCMD_TURN:
							me.StateMachine.intStateNext := MDC_CmdState.cSTA_StartTurnBusy;
						MDC_CmdState.cCMD_PREPOSITION:
							me.StateMachine.intStateNext := MDC_CmdState.cSTA_PREPOSITIONbusy;
					END_CASE
//				ELSE
//					CIf.Job.intACmd := cCMD_DONE;
//					CIf.Job.intMCmd := cCMD_DONE;
//					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_MDC.PositionSame),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
//				END_IF
				
			MDC_CmdState.cCMD_INITIALIZE:	
				me.StateMachine.intStateNext := MDC_CmdState.cSTA_InitializeBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="df496ca8-1d96-4d90-b1f0-27a20bf34e06">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CtrlInit();

// get child if
pMotor_CIF := AddChild(p_fbMotor^);

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="e9ee37c9-5352-4572-9d91-c485c4add9d5">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		CASE intCmdState OF
			MDC_CmdState.cCMD_INITIALIZE: 
				getCmdState := 'Initialize';
			MDC_CmdState.cCMD_TURN: 
				getCmdState := 'Turn';
			MDC_CmdState.cCMD_PREPOSITION: 
				getCmdState := 'PrePosition';
		END_CASE;
	ELSE
		// States's
		CASE intCmdState OF
			MDC_CmdState.cSTA_InitializeBusy: 
				getCmdState := 'InitializeBusy';
			MDC_CmdState.cSTA_InPositionBusy: 
				getCmdState := 'InPositionBusy';
			MDC_CmdState.cSTA_InPosition: 
				getCmdState := 'InPosition';
			MDC_CmdState.cSTA_StartTurnBusy: 
				getCmdState := 'StartTurnBusy';
			MDC_CmdState.cSTA_TurnBusy: 
				getCmdState := 'TurnBusy';
			MDC_CmdState.cSTA_TURNDONE: 
				getCmdState := 'TURNDONE';
			MDC_CmdState.cSTA_PREPOSITIONbusy: 
				getCmdState := 'PREPOSITIONbusy';
			MDC_CmdState.cSTA_PREPOSITION: 
				getCmdState := 'PREPOSITION';

			MDC_CmdState.cSUB_STOPbusy: 
				getCmdState := 'STOPbusy';
			MDC_CmdState.cSUB_TURNbusy: 
				getCmdState := 'TURNbusy';
			MDC_CmdState.cSUB_FINDHOLEbusy: 
				getCmdState := 'FINDHOLEbusy';
		END_CASE;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_InitializeBusy" ObjectId="f67ccfc1-89db-43e9-908c-4d508516b44d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bCrossSensorPassed">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="bTableSensorPassed">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_InitializeBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		// Set Speed
		p_fbMotor^.CtrlSIf^.Par.uinSpeed_rpm := SIf.Par.uinPositionSpeed_rpm;
		pMotor_CIF^.Job.intACmd := UMC_CmdState.cCMD_RIGHT;		
		SIf.Cur.eActualTurningDirection := E_TURN_DIRECTION.RIGHT;

		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimInitializationTime_ms);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
		bCrossSensorPassed := FALSE;
		bTableSensorPassed := FALSE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time

			IF (fbSimulationTimer.Q) THEN
				SIf.In.bolCrossPositionSensor.intern := TRUE;
				SIf.In.bolTablePositionSensor.intern := TRUE;				
			END_IF
		END_IF
		
		bCrossSensorPassed := bCrossSensorPassed OR SIf.In.bolCrossPositionSensor.intern;
		bTableSensorPassed := bTableSensorPassed OR SIf.In.bolTablePositionSensor.intern;
	
		IF (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiInitializationTime_ms) THEN
			IF NOT bCrossSensorPassed THEN
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_MDC.CrossSensorTimeout),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
			
			IF NOT bTableSensorPassed THEN
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_MDC.TableSensorTimeout),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
			
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF

		IF SIf.In.bolCrossPositionSensor.intern AND SIf.In.bolTablePositionSensor.intern THEN
			me.StateMachine.intStateNext := MDC_CmdState.cSTA_InPositionBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		p_fbMotor^.CtrlSIf^.Par.uinSpeed_rpm := SIf.Par.uinPositionSpeed_rpm;
		SIf.Cur.uintActualPosition := 0;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_TURNDONE" ObjectId="f6bda1cf-8adf-488f-8895-e7577ff460a3">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_TURNDONE" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
	IF CIf.Job.intACmd = MDC_CmdState.cCMD_TURN THEN
		CIf.Job.intACmd := cCMD_DONE;
	END_IF
	
	IF CIf.Job.intMCmd = MDC_CmdState.cCMD_TURN THEN
		CIf.Job.intMCmd := cCMD_DONE;
	END_IF
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	CASE me.intCmd OF
		MDC_CmdState.cCMD_INITIALIZE:
			me.StateMachine.intStateNext := MDC_CmdState.cSTA_InitializeBusy;
		BASE_PLC.cCMD_RUN:
			me.StateMachine.intStateNext := MDC_CmdState.cSTA_InPositionBusy;
	END_CASE
END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PREPOSITION" ObjectId="f8b867fe-f966-4136-ac0c-7a74ad6f547f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PREPOSITION" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	CIf.Job.intACmd := cCMD_DONE;
	CIf.Job.intMCmd := cCMD_DONE;
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	CASE me.intCmd OF
		MDC_CmdState.cCMD_INITIALIZE:
			me.StateMachine.intStateNext := MDC_CmdState.cSTA_InitializeBusy;
		MDC_CmdState.cCMD_TURN:
			me.StateMachine.intStateNext := MDC_CmdState.cSTA_StartTurnBusy;
		BASE_PLC.cCMD_RUN:
			me.StateMachine.intStateNext := MDC_CmdState.cSTA_InPositionBusy;
	END_CASE
END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="fea0b50b-bdf4-4661-9907-715c3e63b8aa">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    MDC_CmdState.cSTA_InitializeBusy: 
        THIS^.sta_InitializeBusy();
    MDC_CmdState.cSTA_InPositionBusy: 
        THIS^.sta_InPositionBusy();
    MDC_CmdState.cSTA_InPosition: 
        THIS^.sta_InPosition();
    MDC_CmdState.cSTA_StartTurnBusy: 
        THIS^.sta_StartTurnBusy();
    MDC_CmdState.cSTA_TurnBusy: 
        THIS^.sta_TurnBusy();
    MDC_CmdState.cSTA_PREPOSITION: 
        THIS^.sta_PREPOSITION();
    MDC_CmdState.cSTA_PREPOSITIONbusy: 
        THIS^.sta_PREPOSITIONbusy();
    MDC_CmdState.cSTA_TURNDONE: 
        THIS^.sta_TURNDONE();
END_CASE;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="ActualPosition" ObjectId="37b25c62-eaaf-4d3d-a3af-b1549595b49d">
                    <interface>
                      <returnType>
                        <UINT />
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">ActualPosition := SIf.Cur.uintActualPosition;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="Drive" ObjectId="cccd7015-f02b-4b1f-99d2-dad2142f9cb3">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_UMC" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbMotor := Drive;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">Drive := p_fbMotor;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="f55c22f4-5455-4359-9676-c5b5c6df8117">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_MDC" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>caba4f97-8b2b-426d-95b4-6b3a12d61c7c</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_MONITOR" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="diCurrentValue">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="diTargetValue">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="diBand1">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="diBand2">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="udiTimeoutBand1_ms">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiSampleTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="bOutOfBand">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bError">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="udiTimeOutOfBand1_ms">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="udiTimeOutOfBand2_ms">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <actions>
                <action name="resetTime">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.udiTimeOutOfBand1_ms := 0;
THIS^.udiTimeOutOfBand2_ms := 0;</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>f0b1c5c7-a5c5-43fb-a30c-fdac48190dc0</ObjectId>
                    </data>
                  </addData>
                </action>
              </actions>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">bError := FALSE;
bOutOfBand := FALSE;

// Band 1
IF (ABS(diCurrentValue - diTargetValue) &gt; ABS(diBand1)) THEN
	bOutOfBand := TRUE;
	udiTimeOutOfBand1_ms := udiTimeOutOfBand1_ms + udiSampleTime_ms;
	IF (udiTimeOutOfBand1_ms &gt; udiTimeoutBand1_ms) THEN
		bError := TRUE;
	END_IF
ELSE
	udiTimeOutOfBand1_ms := 0;
END_IF

// Band 2
IF (ABS(diCurrentValue - diTargetValue) &gt; ABS(diBand2)) THEN
	bOutOfBand := TRUE;
	udiTimeOutOfBand2_ms := udiTimeOutOfBand2_ms + udiSampleTime_ms;
	IF (udiTimeOutOfBand2_ms &gt; 2*udiSampleTime_ms) THEN
		bError := TRUE;
	END_IF
ELSE
	udiTimeOutOfBand2_ms := 0;
END_IF</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9ba8aa89-3053-4a0a-ba63-b4a5dc74a0cd</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_OVN" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_iStatus">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0 = Busy, 1 = OFF, 2 = BeltOn, 3 = Manual, 4 = Run, 5 = Error, 6 = Bundverschlusserkennung </xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bOff">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Machine off </xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bBeltOn">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Band on </xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bManual">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Manual </xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bRun">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Standart drying process </xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bAckError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Resetting error </xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_adiTemp_dc">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual temperature in deci °C </xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_adiAir_p">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Aactual airflow in % </xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_diSpeed_mm_min">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual belt speed in mm/min </xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_iErrorLevel">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1=Information, 2=Warning, 3=Error </xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_iErrorID">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error ID (e.g. 100=temperature overflow) </xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bDriverConnected">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bDriverError">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_udiDriverErrorID">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="In_uliBarcodeNew_1">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="In_uliBarcodeNew_2">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="In_uiNewElement_1">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="In_uiNewElement_2">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="In_uliBarcodeDelete_1">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="In_uliBarcodeDelete_2">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="In_uiDeleteElement_1">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="In_uiDeleteElement_2">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_OVN" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="lastSifPar">
                    <type>
                      <derived name="T_Ctrl_SIf_OVN_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> this allows to detect parameter changes</xhtml>
                    </documentation>
                  </variable>
                  <variable name="p_fbIBH">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_IBH" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> pointer to function block</xhtml>
                    </documentation>
                  </variable>
                  <variable name="p_fbIBH_CIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="BASE_PLC.T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="afbTempMonitors">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <derived name="FB_MONITOR" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Monitors</xhtml>
                    </documentation>
                  </variable>
                  <variable name="afbAirMonitors">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                        <baseType>
                          <derived name="FB_MONITOR" />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="fbSpeedMonitor">
                    <type>
                      <derived name="FB_MONITOR" />
                    </type>
                  </variable>
                  <variable name="udiTimeInBand">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="fbTracker">
                    <type>
                      <derived name="FB_Tracker" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tracker</xhtml>
                    </documentation>
                  </variable>
                  <variable name="iLastCalledAlarmNr">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error Tracking</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uiNewElementOld_1">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiNewElementOld_2">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiDeleteElementOld_1">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="uiDeleteElementOld_2">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Oven Controller Implementation

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		10.12.2013		BB			Start history
___________________________________________________________________________________________________*)

// check if child pointer valid
IF (me.bolActivate) THEN // cyclic call enabled
	
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
		
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
	
END_IF;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PONBusy" ObjectId="09764ea5-0555-4ab3-bd18-9baa756783b4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bReady">
                          <type>
                            <BOOL />
                          </type>
                          <initialValue>
                            <simpleValue value="FALSE" />
                          </initialValue>
                        </variable>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PONBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Start Driver
		p_fbIBH_CIf^.Job.intACmd := IBH_CmdState.cCMD_CONNECT;
		
		uiNewElementOld_1 := In_uiNewElement_1;
		uiNewElementOld_2 := In_uiNewElement_2;
		uiDeleteElementOld_1 := In_uiDeleteElement_1;
		uiDeleteElementOld_2 := In_uiDeleteElement_2;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------
	
	IF (p_fbIBH_CIf^.Job.intState = cSTA_OFF) THEN
		// Start Driver
		p_fbIBH_CIf^.Job.intACmd := IBH_CmdState.cCMD_CONNECT;
	END_IF
	
	IF THIS^.In_bDriverError THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.ConnectionError),UDINT_TO_DINT(THIS^.In_udiDriverErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		iLastCalledAlarmNr := E_ALM_OVN.ConnectionError;
	END_IF
	
	// State Change Condition
	IF (me.StateMachine.intStateNext &lt;&gt; Base_PLC.cSTA_ERROR) THEN
		IF (THIS^.In_bDriverConnected) THEN
			me.StateMachine.intStateNext := Base_PLC.cSTA_PON;
		END_IF
	END_IF


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="0ea8f62d-75c3-40e2-9ed8-e54946d87e71">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="bOutOfBand">
                          <type>
                            <BOOL />
                          </type>
                          <initialValue>
                            <simpleValue value="FALSE" />
                          </initialValue>
                        </variable>
                        <variable name="bError">
                          <type>
                            <BOOL />
                          </type>
                          <initialValue>
                            <simpleValue value="FALSE" />
                          </initialValue>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		THIS^.lastSifPar := SIf.Par;
		
		// reset monitor timeouts
		fbSpeedMonitor.resetTime();
		FOR uiIdx:=0 TO SIf.Cfg.uiNumberOfModules-1 BY 1 DO
			afbTempMonitors[uiIdx].resetTime();
			afbAirMonitors[uiIdx].resetTime();
		END_FOR
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------
	
	// check if parameters have changed
	IF (TC2_SYSTEM.MEMCMP(pBuf1:=ADR(SIf.Par), pBuf2:=ADR(THIS^.lastSifPar), n:=SIZEOF(SIf.Par)) &lt;&gt; 0) THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.SettingsChanged),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;
	END_IF
	
	IF NOT In_bRun OR NOT (In_iStatus=4 OR In_iStatus=6 OR In_iStatus=5) THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.WrongMode),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
	END_IF
	
	// Update Monitors
	IF (me.StateMachine.intStateNext &lt;&gt; Base_PLC.cSTA_RUNBusy) THEN
		// temperature monitors
		FOR uiIdx:=0 TO SIf.Cfg.uiNumberOfModules-1 BY 1 DO
			afbTempMonitors[uiIdx](	diCurrentValue		:= THIS^.SIf.Cur.adiTemp_dc[uiIdx],
									diTargetValue		:= THIS^.SIf.Par.adiTemp_dc[uiIdx],
									diBand1				:= THIS^.SIf.Par.adiTempBand1_dc[uiIdx],
									diBand2				:= THIS^.SIf.Par.adiTempBand2_dc[uiIdx],
									udiTimeoutBand1_ms	:= THIS^.SIf.Par.audiTempTimeout_ms[uiIdx],
									udiSampleTime_ms	:= me.FUBInfo.udiSample_ms,
									bOutOfBand			=&gt; bOutOfBand,
									bError				=&gt; bError);
			IF (bError = TRUE) THEN
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.TempError),uiIdx,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
			END_IF
		END_FOR
		// airflow monitors
		FOR uiIdx:=0 TO SIf.Cfg.uiNumberOfModules-1 BY 1 DO
			afbAirMonitors[uiIdx](	diCurrentValue		:= THIS^.SIf.Cur.adiAir_p[uiIdx],
									diTargetValue		:= THIS^.SIf.Par.adiAir_p[uiIdx],
									diBand1				:= THIS^.SIf.Par.adiAirBand1_p[uiIdx],
									diBand2				:= THIS^.SIf.Par.adiAirBand2_p[uiIdx],
									udiTimeoutBand1_ms	:= THIS^.SIf.Par.audiAirTimeout_ms[uiIdx],
									udiSampleTime_ms	:= me.FUBInfo.udiSample_ms,
									bOutOfBand			=&gt; bOutOfBand,
									bError				=&gt; bError);
			IF (bError = TRUE) THEN
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.AirError),uiIdx,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
			END_IF
		END_FOR
		// band speed monitor
		fbSpeedMonitor(	diCurrentValue		:= THIS^.SIf.Cur.diSpeed_mm_min,
						diTargetValue		:= THIS^.SIf.Par.diSpeed_mm_min,
						diBand1				:= THIS^.SIf.Par.diSpeedBand1_mm_min,
						diBand2				:= THIS^.SIf.Par.diSpeedBand2_mm_min,
						udiTimeoutBand1_ms	:= THIS^.SIf.Par.udiSpeedTimeout_ms,
						udiSampleTime_ms	:= me.FUBInfo.udiSample_ms,
						bOutOfBand			=&gt; bOutOfBand,
						bError				=&gt; bError);
		IF (bError = TRUE) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.SpeedError),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF
	END_IF
	
	// State Change Condition
	IF (me.StateMachine.intStateNext &lt;&gt; Base_PLC.cSTA_ERROR) THEN
		CASE me.intCmd OF
			// OFF
			Base_PLC.cCMD_OFF:
				me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
			// BELTONLY
			OVN_CmdState.cCMD_BELTONLY:
				me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
		ELSE
			// DEFAULT
			;
		END_CASE
	END_IF


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="2a33c5c2-2929-43b4-98e4-e525d775c03f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CtrlInit();

// add childs
p_fbIBH_CIf := THIS^.AddChild(p_fbIBH^);

// Tracker Init
fbTracker.numberOfModules := SIf.Cfg.uiNumberOfModules;
fbTracker.sampleTime_us := me.FUBInfo.udiSample_us;
fbTracker.moduleLength_mm := SIf.Cfg.diModuleLength_mm;
fbTracker.distanceBeforeOven_mm := SIf.Cfg.diDistanceBeforeOven_mm;	//TODO: BB: This should be the distance from the barcode reader to the begin of the first module of the oven
fbTracker.distanceAfterOven_mm := SIf.Cfg.diDistanceAfterOven_mm;	//TODO: BB: This should be the distance from the barcode reader to the end of the first module of the oven</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="checkParameter" ObjectId="461f61da-a69b-4cdc-91b0-f8573fe2e847">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="checkParameter" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Belt Speed
IF (SIf.Par.diSpeed_mm_min &gt; SIf.Cfg.diMaxSpeed_mm_min) THEN
	pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.ParameterWarning),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	SIf.Par.diSpeed_mm_min := SIf.Cfg.diMaxSpeed_mm_min;
ELSIF (SIf.Par.diSpeed_mm_min &lt; SIf.Cfg.diMinSpeed_mm_min) THEN
	pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.ParameterWarning),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	SIf.Par.diSpeed_mm_min := SIf.Cfg.diMinSpeed_mm_min;
END_IF

// Temperature
FOR uiIdx:=0 TO SIf.Cfg.uiNumberOfModules-1 BY 1 DO
	IF (SIf.Par.adiTemp_dc[uiIdx] &gt; SIf.Cfg.diMaxTemp_dc) THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.ParameterWarning),uiIdx,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		SIf.Par.adiTemp_dc[uiIdx] := SIf.Cfg.diMaxTemp_dc;
	ELSIF (SIf.Par.adiTemp_dc[uiIdx] &lt; SIf.Cfg.diMinTemp_dc) THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.ParameterWarning),uiIdx,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		SIf.Par.adiTemp_dc[uiIdx] := SIf.Cfg.diMinTemp_dc;
	END_IF
END_FOR

// Airflow
FOR uiIdx:=0 TO SIf.Cfg.uiNumberOfModules-1 BY 1 DO
	IF (SIf.Par.adiAir_p[uiIdx] &gt; SIf.Cfg.diMaxAir_p) THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.ParameterWarning),uiIdx,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		SIf.Par.adiAir_p[uiIdx] := SIf.Cfg.diMaxAir_p;
	ELSIF (SIf.Par.adiAir_p[uiIdx] &lt; SIf.Cfg.diMinAir_p) THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.ParameterWarning),uiIdx,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		SIf.Par.adiAir_p[uiIdx] := SIf.Cfg.diMinAir_p;
	END_IF
END_FOR</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="4e39778e-86f6-46f0-a7cb-954ff485b184">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------
	
	IF NOT In_bOff OR NOT (In_iStatus=1 OR In_iStatus=6 OR In_iStatus=5) THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.WrongMode),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
	END_IF
	
	// State Change Condition
	IF (me.StateMachine.intStateNext &lt;&gt; Base_PLC.cSTA_ERROR) THEN
		CASE me.intCmd OF
			// RUN
			Base_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;
			// BELTONLY
			OVN_CmdState.cCMD_BELTONLY:
				me.StateMachine.intStateNext := OVN_CmdState.cSTA_BELTONLYBusy;
		ELSE
			// DEFAULT
			;
		END_CASE
	END_IF


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="634d05b0-aae5-4c56-83e0-8a71e0aadd76">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR uiIdx:=0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[uiIdx].intCmd=cSTA_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR

// Add configuration of own comands
CIf.Job.aCmdList[uiIdx].intCmd := OVN_CmdState.cCMD_BELTONLY;
CIf.Job.aCmdList[uiIdx].strName := 'BELTONLY';
CIf.Job.aCmdList[uiIdx].bolAvailable := TRUE;
uiIdx := uiIdx+1;
CIf.Job.aCmdList[uiIdx].intCmd := Base_PLC.cCMD_RUN;
CIf.Job.aCmdList[uiIdx].strName := 'RUN';
CIf.Job.aCmdList[uiIdx].bolAvailable := TRUE;

// set name of class/typ
CIf.Info.strType := 'FB_OVN';
CIf.Info.strFullName := 'Oven';

// set alarm class
SIf.Alm[E_ALM_OVN.TempError].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.TempError].strText := 'Temperature Error';
SIf.Alm[E_ALM_OVN.AirError].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.AirError].strText := 'Airflow Error';
SIf.Alm[E_ALM_OVN.SpeedError].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.SpeedError].strText := 'Band Speed Error';
SIf.Alm[E_ALM_OVN.TimeoutError].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.TimeoutError].strText := 'Timeout Error on State Change';
SIf.Alm[E_ALM_OVN.ParameterWarning].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_OVN.ParameterWarning].strText := 'Parameter Warning - Parameters got adjusted within the allowed limits';
SIf.Alm[E_ALM_OVN.ConnectionError].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.ConnectionError].strText := 'Connection Error';
SIf.Alm[E_ALM_OVN.WrongMode].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.WrongMode].strText := 'Wrong Mode - Possible Manual Intervention';

SIf.Alm[E_ALM_OVN.Tesoma10000].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10000].strText := 'Tesoma - Overtemperature Power Section';
SIf.Alm[E_ALM_OVN.Tesoma10002].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10002].strText := 'Tesoma - Failure of Active Cooling Unit';
SIf.Alm[E_ALM_OVN.Tesoma10003].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10003].strText := 'Tesoma - Active Cooling Unit not Running';
SIf.Alm[E_ALM_OVN.Tesoma10006].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10006].strText := 'Tesoma - Failure Fuse General';
SIf.Alm[E_ALM_OVN.Tesoma10010].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10010].strText := 'Tesoma - Belt Position Control Sensor Error';
SIf.Alm[E_ALM_OVN.Tesoma10011].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10011].strText := 'Tesoma - Belt Edge Shut Off';
SIf.Alm[E_ALM_OVN.Tesoma10012].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10012].strText := 'Tesoma - Fault Belt Speed';
SIf.Alm[E_ALM_OVN.Tesoma10013].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10013].strText := 'Tesoma - Transport Overload';
SIf.Alm[E_ALM_OVN.Tesoma10014].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10014].strText := 'Tesoma - Belt Control Device Fault';
SIf.Alm[E_ALM_OVN.Tesoma10016].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10016].strText := 'Tesoma - Emergency Stop';
SIf.Alm[E_ALM_OVN.Tesoma10023].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10023].strText := 'Tesoma - Belt Wear Monitor';
SIf.Alm[E_ALM_OVN.Tesoma10024].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10024].strText := 'Tesoma - Control Cabinet Fan';
SIf.Alm[E_ALM_OVN.Tesoma10025].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10025].strText := 'Tesoma - Control Cabinet Temperature too High';
SIf.Alm[E_ALM_OVN.Tesoma10026].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10026].strText := 'Tesoma - Power Supply Failure';
SIf.Alm[E_ALM_OVN.Tesoma10027].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10027].strText := 'Tesoma - Intake Hood Temperature Exceeded';
SIf.Alm[E_ALM_OVN.Tesoma10030].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10030].strText := 'Tesoma - Air Pressure too low';
SIf.Alm[E_ALM_OVN.Tesoma10031].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10031].strText := 'Tesoma - Belt Position Control not Working';
SIf.Alm[E_ALM_OVN.Tesoma10032].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10032].strText := 'Tesoma - Error Cooling Device Control Cabinet';
SIf.Alm[E_ALM_OVN.Tesoma10034].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10034].strText := 'Tesoma - Control Cabinet Cooler and Small Drives Fuse Failure';
SIf.Alm[E_ALM_OVN.Tesoma10x00].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10x00].strText := 'Tesoma - LimitSwitchingOff';
SIf.Alm[E_ALM_OVN.Tesoma10x01].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10x01].strText := 'Tesoma - Overtemperature Safety Temperature Limiter';
SIf.Alm[E_ALM_OVN.Tesoma10x02].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10x02].strText := 'Tesoma - Fuse Triggered';
SIf.Alm[E_ALM_OVN.Tesoma10x03].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10x03].strText := 'Tesoma - Failure Exhaust Air Differential Pressure Sensor';
SIf.Alm[E_ALM_OVN.Tesoma10x07].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10x07].strText := 'Tesoma - Error Frequency Converter';
SIf.Alm[E_ALM_OVN.Tesoma10x13].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10x13].strText := 'Tesoma - Temperature Sensor IR Defective';
SIf.Alm[E_ALM_OVN.Tesoma10x14].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10x14].strText := 'Tesoma - Fault Frame Cooling System Differential Pressure Sensor';
SIf.Alm[E_ALM_OVN.Tesoma10x15].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma10x15].strText := 'Tesoma - Fault Exhaust Air Differential Pressure Sensor';
SIf.Alm[E_ALM_OVN.Tesoma13x00].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.Tesoma13x00].strText := 'Tesoma - Temperature Fault';
SIf.Alm[E_ALM_OVN.TesomaUnknown].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.TesomaUnknown].strText := 'Tesoma - Unknown Error';
SIf.Alm[E_ALM_OVN.HostConnectionLost].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.HostConnectionLost].strText := 'Saber Communication Lost';
SIf.Alm[E_ALM_OVN.SettingsChanged].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_OVN.SettingsChanged].strText := 'Settings Changed';

//*******************************************************************************
// initial values
//*******************************************************************************

// Software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// Configuration
SIf.Cfg.uiNumberOfModules := 4;
SIf.Cfg.diModuleLength_mm := 2000;
SIf.Cfg.diDistanceBeforeOven_mm := 1000;
SIf.Cfg.diDistanceAfterOven_mm := 1000;
SIf.Cfg.diMinAir_p := 40;
SIf.Cfg.diMaxAir_p := 100;
SIf.Cfg.diMaxSpeed_mm_min := 30000;
SIf.Cfg.diMinSpeed_mm_min := 3000;
SIf.Cfg.diMinTemp_dc := 0;
SIf.Cfg.diMaxTemp_dc := 2000;
SIf.Cfg.bAutoContinueAfterConnectionError := FALSE;
SIf.Cfg.bolDataChannelEnable := FALSE;
SIf.Cfg.bIgnoreOffBusyWaitPaper := FALSE;

// Parameter
SIf.Par.diSpeed_mm_min := SIf.Cfg.diMinSpeed_mm_min;
SIf.Par.diSpeedBand1_mm_min := 100;
SIf.Par.diSpeedBand2_mm_min := 200;
SIf.Par.udiSpeedTimeout_ms := 5000;
SIf.Par.udiTimeoutOffBusy_ms := 2000;
SIf.Par.udiTimeoutRunBusyReaction_ms := 2*1000;
SIf.Par.udiTimeoutRunBusyInBand_ms := 1*60*1000;
SIf.Par.udiTimeoutBeltOnlyReaction_ms := 1000;
SIf.Par.udiTimeoutBeltOnlyBusy_ms := 10000;

FOR uiIdx:=0 TO MAX_NUMBER_OF_OVEN_MODULES-1 BY 1 DO
	SIf.Par.adiTemp_dc[uiIdx] := 1000;
	SIf.Par.adiTempBand1_dc[uiIdx] := 30;
	SIf.Par.adiTempBand2_dc[uiIdx] := 60;
	SIf.Par.audiTempTimeout_ms[uiIdx] := 5000;
	SIf.Par.adiAir_p[uiIdx] := SIf.Cfg.diMinAir_p;
	SIf.Par.adiAirBand1_p[uiIdx] := 2;
	SIf.Par.adiAirBand2_p[uiIdx] := 4;
	SIf.Par.audiAirTimeout_ms[uiIdx] := 5000;
END_FOR</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="chooseTesomaErrors" ObjectId="82894b6e-8205-4d89-aa41-938c35174021">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inOutVars>
                        <variable name="bResettable">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inOutVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="chooseTesomaErrors" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">bResettable := FALSE;

CASE THIS^.In_iErrorID OF
	// Tesoma10000
	10000:
		bResettable := TRUE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10000),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10002
	10002:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10002),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10003
	10003:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10003),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10006
	10006:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10006),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10010
	10010:
		bResettable := TRUE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10010),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10011
	10011:
		bResettable := TRUE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10011),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10012
	10012:
		bResettable := TRUE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10012),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10013
	10013:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10013),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10014
	10014:
		bResettable := TRUE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10014),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10016
	10016:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10016),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10023
	10023:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10023),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10024
	10024:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10024),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10025
	10025:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10025),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10026
	10026:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10026),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10027
	10027:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10027),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10030
	10030:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10030),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10031
	10031:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10031),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10032
	10032:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10032),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10034
	10034:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10034),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10x00
	10100, 10200, 10300, 10400, 10500, 10600, 10700, 10800, 10900:
		bResettable := TRUE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10x00),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10x01
	10101, 10201, 10301, 10401, 10501, 10601, 10701, 10801, 10901:
		bResettable := TRUE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10x01),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10x02
	10102, 10202, 10302, 10402, 10502, 10602, 10702, 10802, 10902:
		bResettable := TRUE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10x02),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10x03
	10103, 10203, 10303, 10403, 10503, 10603, 10703, 10803, 10903:
		bResettable := TRUE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10x03),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10x07
	10107, 10207, 10307, 10407, 10507, 10607, 10707, 10807, 10907:
		bResettable := TRUE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10x07),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10x13
	10113, 10213, 10313, 10413, 10513, 10613, 10713, 10813, 10913:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10x13),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10x14
	10114, 10214, 10314, 10414, 10514, 10614, 10714, 10814, 10914:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10x14),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma10x15
	10115, 10215, 10315, 10415, 10515, 10615, 10715, 10815, 10915:
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma10x15),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	// Tesoma13x00
	13100, 13200, 13300, 13400, 13500, 13600, 13700, 13800, 13900:
		bResettable := TRUE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.Tesoma13x00),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
ELSE
	// TesomaUnknown
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.TesomaUnknown),In_iErrorID,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
END_CASE</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="8be44ae0-c6d5-4bb8-8bb6-82295e13fffe">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	
	// Mark all tracked item as trash
	fbTracker.markAllTrash();
	
	// auto continue after Connection Error
	IF (iLastCalledAlarmNr=E_ALM_OVN.ConnectionError AND SIf.Cfg.bAutoContinueAfterConnectionError) THEN
		IF THIS^.In_bDriverConnected THEN
			CIf.Job.bolAlmReset := TRUE;
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.ConnectionError),UDINT_TO_DINT(THIS^.In_udiDriverErrorID),ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
		END_IF
	END_IF
	
	// State Change Condition
	IF (CIf.Job.bolAlmReset = TRUE) THEN
		IF (p_fbIBH_CIf^.Job.intState = cSTA_OFF) THEN
			// Start Driver
			p_fbIBH_CIf^.Job.intACmd := IBH_CmdState.cCMD_CONNECT;
		END_IF
		p_fbIBH^.setAckError();
		me.StateMachine.intStateNext := cSTA_ERRORQuit;
	END_IF


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="90a3e2a7-420f-4d7d-a680-bf47fb55745a">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// cmd's
		CASE intCmdState OF
			OVN_CmdState.cCMD_BELTONLY:
				getCmdState := 'BELTONLY';
		ELSE
			getCmdState := 'Cmd not defined';
		END_CASE;
	ELSE
		// state's
		CASE intCmdState OF
			OVN_CmdState.cSTA_BELTONLY: 
				getCmdState := 'BELTONLY';
			OVN_CmdState.cSTA_BELTONLYbusy: 
				getCmdState := 'BELTONLYbusy';
			OVN_CmdState.cSUB_WAITOFF: 
				getCmdState := 'WAITOFF';
			OVN_CmdState.cSUB_WAITPAPER: 
				getCmdState := 'WAITPAPER';
			OVN_CmdState.cSUB_DONE: 
				getCmdState := 'DONE';
		ELSE
			getCmdState := 'State not defined';
		END_CASE;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="92f4de2c-89b2-4610-a1cf-ca3d87a3484b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="bReady">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="iErrorNumber">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Set Outputs
		p_fbIBH^.setRun();
		p_fbIBH^.setSpeed(In_diSpeed_mm_min := SIf.Par.diSpeed_mm_min);
		p_fbIBH^.setTemp(In_adiTemp_dc := SIf.Par.adiTemp_dc);
		p_fbIBH^.setAirflow(In_adiAir_p := SIf.Par.adiAir_p);
		THIS^.lastSifPar := SIf.Par;
		
		udiTimeInBand := 0;
		
		// delete all tracked items
		fbTracker.deleteAll();
	END_IF
	
// Cyclic action
//--------------------------------------------------------------------------------------
	
	// check if parameters have changed
	IF (TC2_SYSTEM.MEMCMP(pBuf1:=ADR(SIf.Par), pBuf2:=ADR(THIS^.lastSifPar), n:=SIZEOF(SIf.Par)) &lt;&gt; 0) THEN
		p_fbIBH^.setSpeed(In_diSpeed_mm_min := SIf.Par.diSpeed_mm_min);
		p_fbIBH^.setTemp(In_adiTemp_dc := SIf.Par.adiTemp_dc);
		p_fbIBH^.setAirflow(In_adiAir_p := SIf.Par.adiAir_p);
		THIS^.lastSifPar := SIf.Par;
	END_IF
	
	// check timeouts
	IF me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiTimeoutRunBusyReaction_ms THEN
		IF NOT In_bRun OR NOT ((In_iStatus=0) OR (In_iStatus=4) OR (In_iStatus=6)) THEN
			iErrorNumber := 100*me.StateMachine.intState+In_iStatus;
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.TimeoutError),iErrorNumber,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF
	END_IF
	
	// Check if ready
	bReady := TRUE;
	IF NOT In_bRun OR NOT (In_iStatus=4) THEN	// ignoring In_iStatus=6 since it's only temporary
		bReady := FALSE;
	END_IF
	IF (ABS(THIS^.In_diSpeed_mm_min - SIf.Par.diSpeed_mm_min) &gt; ABS(SIf.Par.diSpeedBand1_mm_min)) THEN
		bReady := FALSE;
	END_IF
	FOR iIdx:=0 TO SIf.Cfg.uiNumberOfModules-1 BY 1 DO
		// Temperature
		IF (ABS(THIS^.In_adiTemp_dc[iIdx] - SIf.Par.adiTemp_dc[iIdx]) &gt; ABS(THIS^.SIf.Par.adiTempBand1_dc[iIdx])) THEN
			bReady := FALSE;
		END_IF
		// Airflow
		IF (ABS(THIS^.In_adiAir_p[iIdx] - THIS^.SIf.Par.adiAir_p[iIdx]) &gt; ABS(THIS^.SIf.Par.adiAirBand1_p[iIdx])) THEN
			bReady := FALSE;
		END_IF
	END_FOR
	
	IF bReady THEN
		udiTimeInBand := udiTimeInBand + me.FUBInfo.udiSample_ms;
		IF udiTimeInBand &lt; SIf.Par.udiTimeoutRunBusyInBand_ms THEN
			bReady := FALSE;
		END_IF
	ELSE
		udiTimeInBand := 0;
	END_IF
	
	// State Change Condition
	IF (me.StateMachine.intStateNext &lt;&gt; Base_PLC.cSTA_ERROR) THEN
		CASE me.intCmd OF
			// OFF
			Base_PLC.cCMD_OFF:
				me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
			// BELTONLY
			OVN_CmdState.cCMD_BELTONLY:
				me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
		ELSE
			// DEFAULT
			IF bReady THEN
				me.StateMachine.intStateNext := Base_PLC.cSTA_RUN;
			END_IF
		END_CASE
	END_IF

		
// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="a92240fc-5d33-4a2d-ac8d-c1cc3cb1e285">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="fbOVN">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bResettable">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	// copy number of modules to IBH driver
	p_fbIBH^.getCtrlSIf()^.Cfg.uiNumberOfModules := SIf.Cfg.uiNumberOfModules;
	
	// check parameter from GUI
	THIS^.checkParameter();
	
	// write input values directly to SIf.Cur
	SIf.Cur.diSpeed_mm_min := THIS^.In_diSpeed_mm_min;
	SIf.Cur.adiAir_p := THIS^.In_adiAir_p;
	SIf.Cur.adiTemp_dc := THIS^.In_adiTemp_dc;
	
	// remove old elements from Tracker
	IF In_uiDeleteElement_1&lt;&gt;uiDeleteElementOld_1 THEN
		uiDeleteElementOld_1 := In_uiDeleteElement_1;
		fbTracker.deleteElement(In_uliBarcodeDelete_1, SIf.Cfg.bolDataChannelEnable);
	END_IF
	IF In_uiDeleteElement_2&lt;&gt;uiDeleteElementOld_2 THEN
		uiDeleteElementOld_2 := In_uiDeleteElement_2;
		fbTracker.deleteElement(In_uliBarcodeDelete_2, SIf.Cfg.bolDataChannelEnable);
	END_IF
	
	// update Tracker
	fbTracker.update(In_adiTemp_mc:=In_adiTemp_dc, In_diSpeed_mm_min:=In_diSpeed_mm_min,bolSendToSaber:=SIf.Cfg.bolDataChannelEnable);
	
	// add new elements to Tracker
	IF In_uiNewElement_1&lt;&gt;uiNewElementOld_1 THEN
		uiNewElementOld_1 := In_uiNewElement_1;
		fbTracker.addElement(In_uliBarcodeNew_1);
	END_IF
	IF In_uiNewElement_2&lt;&gt;uiNewElementOld_2 THEN
		uiNewElementOld_2 := In_uiNewElement_2;
		fbTracker.addElement(In_uliBarcodeNew_2);
	END_IF
	
	// check errors when higher than PONBusy
	IF (me.StateMachine.intState&gt;=Base_PLC.cSTA_PON) AND (NOT CIf.SwCfg.bolSimulation) THEN
		
		// go to error if Driver connection is lost
		IF 		NOT THIS^.In_bDriverConnected
			AND	me.StateMachine.intState&lt;&gt;Base_PLC.cSTA_ERROR
			AND	me.StateMachine.intState&lt;&gt;Base_PLC.cSTA_ERRORQuit THEN
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.ConnectionError),UDINT_TO_DINT(THIS^.In_udiDriverErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
				iLastCalledAlarmNr := E_ALM_OVN.ConnectionError;
		END_IF
		
		// check Tesoma Errors, ErrorLevel 1 (Info) and 2 (Warning) don't exist
		IF THIS^.In_iErrorLevel=3 THEN
			chooseTesomaErrors(bResettable);
			IF 		me.StateMachine.intState&lt;&gt;Base_PLC.cSTA_ERROR
				AND	me.StateMachine.intState&lt;&gt;Base_PLC.cSTA_ERRORQuit
				and me.StateMachine.intStateNext&lt;&gt;Base_PLC.cSTA_ERROR THEN
					me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
			END_IF
		END_IF
		
	END_IF
	
END_IF

// ----------------------------------------------------------------------------------
// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState = cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="d8673dce-427e-4f92-84cb-c01c9f1b5157">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	// BELTONLY
    OVN_CmdState.cSTA_BELTONLY: 
        THIS^.sta_BELTONLY();
    OVN_CmdState.cSTA_BELTONLYBusy: 
        THIS^.sta_BELTONLYBusy();
	// RUN
	Base_PLC.cSTA_RUN:
		THIS^.sta_RUN();
	Base_PLC.cSTA_RUNBusy:
		THIS^.sta_RUNBusy();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="da5770fa-bc28-4fb4-bd44-52ca2d422777">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------
	
	// State Change Condition
	IF (me.StateMachine.intStateNext &lt;&gt; Base_PLC.cSTA_ERROR) THEN
		IF me.intCmd&gt;Base_PLC.cCMD_PON THEN
			me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
		END_IF
	END_IF


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="dce80cb8-7c24-4fdf-9f71-c6d24e7d4d05">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bReady">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="iErrorNumber">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="udiCoolDownTime_ms">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		me.SubStateMachine.intState 	:= OVN_CmdState.cSUB_WAITOFF;
		me.SubStateMachine.intStateNext := OVN_CmdState.cSUB_WAITOFF;
		
		// Set Outputs
		p_fbIBH^.setOff();
		
		// mark all tracked items as trash
		fbTracker.markAllTrash();
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------
	
	CASE me.SubStateMachine.intState OF
			// WAITOFF
			// ------------------------------------------------------------------------
			OVN_CmdState.cSUB_WAITOFF:
				IF (In_bOff AND ((In_iStatus=1) OR (In_iStatus=6))) THEN
					me.SubStateMachine.intStateNext := OVN_CmdState.cSUB_WAITPAPER;
				ELSIF (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiTimeoutOffBusy_ms) THEN
					iErrorNumber := 100*me.StateMachine.intState+In_iStatus;
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.TimeoutError),iErrorNumber,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
				END_IF
				
			// WAITPAPER
			// ------------------------------------------------------------------------
			OVN_CmdState.cSUB_WAITPAPER:
				IF NOT In_bOff OR NOT (In_iStatus=1 OR In_iStatus=6 OR In_iStatus=5) THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.WrongMode),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
				END_IF
			
				udiCoolDownTime_ms := DINT_TO_UDINT((SIf.Cfg.uiNumberOfModules*SIf.Cfg.diModuleLength_mm+SIf.Cfg.diDistanceBeforeOven_mm+SIf.Cfg.diDistanceAfterOven_mm)*60*1000/SIf.Par.diSpeed_mm_min);
				IF (me.StateMachine.udiTimeInState_ms&gt;udiCoolDownTime_ms) OR SIf.Cfg.bIgnoreOffBusyWaitPaper THEN
					me.SubStateMachine.intStateNext := OVN_CmdState.cSUB_DONE;
				END_IF
				
			// DONE
			// ------------------------------------------------------------------------
			OVN_CmdState.cSUB_DONE:
				;
	END_CASE
	
	// State Change Condition
	IF (me.StateMachine.intStateNext &lt;&gt; Base_PLC.cSTA_ERROR) THEN
		CASE me.intCmd OF
			// RUN
			Base_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;
			// BELTONLY
			OVN_CmdState.cCMD_BELTONLY:
				me.StateMachine.intStateNext := OVN_CmdState.cSTA_BELTONLYBusy;
		ELSE
			// DEFAULT
			IF (me.SubStateMachine.intState=OVN_CmdState.cSUB_DONE) THEN
				me.StateMachine.intStateNext := Base_PLC.cCMD_OFF;
			END_IF
		END_CASE
	END_IF


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_BELTONLYBusy" ObjectId="e816f287-6e50-426f-8156-39d63c59079d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="bReady">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="iErrorNumber">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_BELTONLYBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Set Outputs
		p_fbIBH^.setBeltOn();
		p_fbIBH^.setSpeed(In_diSpeed_mm_min := SIf.Par.diSpeed_mm_min);
		THIS^.lastSifPar := SIf.Par;
	END_IF
	
	
// Cyclic action
//--------------------------------------------------------------------------------------
	
	// check if parameters have changed
	IF (TC2_SYSTEM.MEMCMP(pBuf1:=ADR(SIf.Par), pBuf2:=ADR(THIS^.lastSifPar), n:=SIZEOF(SIf.Par)) &lt;&gt; 0) THEN
		p_fbIBH^.setSpeed(In_diSpeed_mm_min := SIf.Par.diSpeed_mm_min);
		THIS^.lastSifPar := SIf.Par;
	END_IF
	
	// check timeouts
	IF me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiTimeoutBeltOnlyBusy_ms THEN
		iErrorNumber := 100*me.StateMachine.intState+In_iStatus;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.TimeoutError),iErrorNumber,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
	ELSIF me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiTimeoutBeltOnlyReaction_ms THEN
		IF NOT In_bBeltOn OR NOT ((In_iStatus=2) OR (In_iStatus=6)) THEN
			iErrorNumber := 100*me.StateMachine.intState+In_iStatus;
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.TimeoutError),iErrorNumber,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		END_IF
	END_IF
	
	// Check if ready
	bReady := TRUE;
	IF NOT In_bBeltOn OR NOT ((In_iStatus=2) OR (In_iStatus=6)) THEN
		bReady := FALSE;
	END_IF
	IF (ABS(THIS^.In_diSpeed_mm_min - SIf.Par.diSpeed_mm_min) &gt; ABS(SIf.Par.diSpeedBand1_mm_min)) THEN
		bReady := FALSE;
	END_IF
	
	// State Change Condition
	IF (me.StateMachine.intStateNext &lt;&gt; Base_PLC.cSTA_ERROR) THEN
		CASE me.intCmd OF
			// OFF
			Base_PLC.cCMD_OFF:
				me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
		ELSE
			// DEFAULT
			IF bReady THEN
				me.StateMachine.intStateNext := OVN_CmdState.cSTA_BELTONLY;
			END_IF
		END_CASE
	END_IF


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="e8890661-eb02-49d5-a71a-b91c93c31ffb">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_OVN" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="e9ab53d3-ca72-481e-a944-6fa5721b31b2">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------	
	
	// State Change Condition
	CASE me.StateMachine.intStateHistory OF
		// RUN
		Base_PLC.cSTA_RUN, Base_PLC.cSTA_RUNBusy:
			me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;
		// PON
		Base_PLC.cSTA_PON, Base_PLC.cSTA_PONBusy:
			me.StateMachine.intStateNext := Base_PLC.cSTA_PONBusy;
		// STOP
		Base_PLC.cSTA_STOP, Base_PLC.cSTA_STOPBusy:
			me.StateMachine.intStateNext := Base_PLC.cSTA_STOPBusy;
		// BELTONLY
		OVN_CmdState.cSTA_BELTONLY, OVN_CmdState.cSTA_BELTONLYBusy:
			me.StateMachine.intStateNext := OVN_CmdState.cSTA_BELTONLYBusy;
	ELSE
		// DEFAULT
		me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
	END_CASE


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		
		// Reset iLastCalledAlarmNr
		iLastCalledAlarmNr := E_ALM_OVN.NONE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_BELTONLY" ObjectId="ef13c3e6-1be7-4d47-88b2-2246ce4bd4fa">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_BELTONLY" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation

// Entry action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateLastCycle) THEN
		// state changed since last cycle
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
// Cyclic action
//--------------------------------------------------------------------------------------

	// check if parameters have changed
	IF (TC2_SYSTEM.MEMCMP(pBuf1:=ADR(SIf.Par), pBuf2:=ADR(THIS^.lastSifPar), n:=SIZEOF(SIf.Par)) &lt;&gt; 0) THEN
		me.StateMachine.intStateNext := OVN_CmdState.cSTA_BELTONLYBusy;
	END_IF
	
	IF NOT In_bBeltOn OR NOT (In_iStatus=2 OR In_iStatus=6 OR In_iStatus=5) THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UDINT(E_ALM_OVN.WrongMode),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
	END_IF
	
	// State Change Condition
	IF (me.StateMachine.intStateNext &lt;&gt; Base_PLC.cSTA_ERROR) THEN
		CASE me.intCmd OF
			Base_PLC.cCMD_OFF:
				me.StateMachine.intStateNext := Base_PLC.cSTA_OFFBusy;
		END_CASE
	END_IF


// Exit action
//--------------------------------------------------------------------------------------
	IF (me.StateMachine.intState &lt;&gt; me.StateMachine.intStateNext) THEN
		// state is going to change
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="IBH" ObjectId="0b4480b7-3bde-45c6-abd5-acb8b3ccef8a">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_IBH" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">IBH := p_fbIBH;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbIBH := IBH;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="88e71e60-cf7d-426c-97d7-afaf858362e5">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_OVN" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="DataChannel" ObjectId="e958c2e0-9251-41de-ab54-10e3fb2d939f">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_DataChannelSenderFifo" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">fbTracker.DataChannel := DataChannel;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>d4623e6e-93c7-42a6-a41a-a4db5bbad042</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_Tracker" pouType="functionBlock">
              <interface>
                <localVars>
                  <variable name="fbList">
                    <type>
                      <derived name="FB_DLL" />
                    </type>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/inputassignments" handleUnknown="implementation">
                        <InputAssignments>
                          <InputAssignment>
                            <Name>In_bDoDataWipe</Name>
                            <Value>FALSE</Value>
                          </InputAssignment>
                        </InputAssignments>
                      </data>
                    </addData>
                  </variable>
                  <variable name="udiSampleTime_us">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="uiNumberOfModules">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="diModuleLength_mm">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="diDistanceBeforeOven_mm">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="diDistanceAfterOven_mm">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="pDataChannelFifo">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_DataChannelSenderFifo" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sendData" ObjectId="4efebb13-95b5-4aba-b1a9-720bf96e90a4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="pData">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_Data" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="pItem">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_Oven_DCH" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sendData" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">IF pDataChannelFifo &lt;&gt; NULL THEN
	pItem := __NEW(T_Oven_DCH);

	// prepare temperature values
	FOR uiIdx:=0 TO MAX_NUMBER_OF_OVEN_MODULES-1 BY 1 DO
		IF pData^.diCyclesInModule[uiIdx] &gt; 0 THEN
			pItem^.diTemperature_mc[uiIdx] := pData^.diSumTemp_mc[uiIdx]/pData^.diCyclesInModule[uiIdx];
		ELSE
			pItem^.diTemperature_mc[uiIdx] := 0;
		END_IF
	END_FOR

	pItem^.rBaseInfo.bolItemAvailable := TRUE;
	
	IF pData^.bTrash THEN
		pItem^.rBaseInfo.eHealth := E_ItemHealth.Ovn_Temperature;
	ELSE
		pItem^.rBaseInfo.eHealth := E_ItemHealth.Healthy;
	END_IF
	pItem^.bTrash := pData^.bTrash;
	
	pItem^.udiIdentification := pData^.uliBarcode;

	pDataChannelFifo^.Push(pItem);
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="addElement" ObjectId="52cf92cd-2495-4ab4-a05c-44a99f53dd7b">
                    <interface>
                      <inputVars>
                        <variable name="In_uliBarcode">
                          <type>
                            <ULINT />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="pData">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_Data" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="addElement" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">pData := __NEW(T_Data);
pData^.uliBarcode := In_uliBarcode;
pData^.bTrash := FALSE;
pData^.bBarcodeMissed := FALSE;
pData^.diDistance_um := 0;
FOR uiIdx:=0 TO MAX_NUMBER_OF_OVEN_MODULES-1 BY 1 DO
	pData^.diCyclesInModule[uiIdx] := 0;
	pData^.diSumTemp_mc[uiIdx] := 0;
END_FOR

fbList.addElement(In_uliKey:=In_uliBarcode, In_pData:=pData);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="markAllTrash" ObjectId="75433ff9-8e04-4ae8-9a77-4f6f10973e67">
                    <interface>
                      <localVars>
                        <variable name="pCurrentElement">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_Element" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                        <variable name="pCurrentData">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_Data" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="markAllTrash" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">pCurrentElement := fbList.firstElement();

WHILE (pCurrentElement &lt;&gt; 0) DO
	pCurrentData := pCurrentElement^.pData;
	pCurrentData^.bTrash := TRUE;
	pCurrentElement := pCurrentElement^.pNextElement;
END_WHILE</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="update" ObjectId="8c8fcbc6-4062-4e03-9847-6fed1bc4a810">
                    <interface>
                      <inputVars>
                        <variable name="In_adiTemp_mc">
                          <type>
                            <array>
                              <dimension lower="0" upper="(MAX_NUMBER_OF_OVEN_MODULES - 1)" />
                              <baseType>
                                <DINT />
                              </baseType>
                            </array>
                          </type>
                        </variable>
                        <variable name="In_diSpeed_mm_min">
                          <type>
                            <DINT />
                          </type>
                        </variable>
                        <variable name="bolSendToSaber">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="pCurrentElement">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_Element" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                        <variable name="pCurrentData">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_Data" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                        <variable name="uiIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="update" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">pCurrentElement := fbList.firstElement();

WHILE (pCurrentElement &lt;&gt; 0) DO
	pCurrentData := pCurrentElement^.pData;
	
	// Distance
	pCurrentData^.diDistance_um := pCurrentData^.diDistance_um + In_diSpeed_mm_min*1000/60/1000000*UDINT_TO_DINT(udiSampleTime_us);
	
	IF ( pCurrentData^.diDistance_um &lt; (diDistanceBeforeOven_mm * 1000) ) THEN
		// Before the Oven
		;
	ELSIF (pCurrentData^.diDistance_um &gt; (diDistanceBeforeOven_mm+diDistanceAfterOven_mm+uiNumberOfModules*diModuleLength_mm+1000)*1000) THEN
		// 1m after the Barcode scanners after the Oven
		pCurrentData^.bBarcodeMissed := TRUE;
		deleteElement(uliBarcodeOfElement:=pCurrentData^.uliBarcode,bolSendToSaber:=bolSendToSaber);
	ELSE
		// In the Oven
		FOR uiIdx:=0 TO uiNumberOfModules-1 BY 1 DO
			IF (	(pCurrentData^.diDistance_um &gt;= (diDistanceBeforeOven_mm + uiIdx*diModuleLength_mm)*1000)
				AND (pCurrentData^.diDistance_um &lt; (diDistanceBeforeOven_mm + (uiIdx+1)*diModuleLength_mm)*1000) ) THEN
				pCurrentData^.diCyclesInModule[uiIdx] := pCurrentData^.diCyclesInModule[uiIdx] + 1;
				pCurrentData^.diSumTemp_mc[uiIdx] := pCurrentData^.diSumTemp_mc[uiIdx] + In_adiTemp_mc[uiIdx];
			END_IF
		END_FOR
	END_IF
	
	pCurrentElement := pCurrentElement^.pNextElement;
END_WHILE</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="deleteElement" ObjectId="b56a2b36-9e03-436d-ad14-7fe6b7d0d404">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="uliBarcodeOfElement">
                          <type>
                            <ULINT />
                          </type>
                        </variable>
                        <variable name="bolSendToSaber">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="pDeleteElement">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_Element" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                        <variable name="pData">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_Data" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="deleteElement" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">pDeleteElement := fbList.searchElement(In_uliKey:=uliBarcodeOfElement);

IF (pDeleteElement &lt;&gt; 0) THEN
	
	deleteElement := TRUE;
	pData := fbList.deleteElement(pDeleteElement);

	IF bolSendToSaber THEN
		sendData(pData);
	END_IF

	__DELETE(pData);
ELSE
	deleteElement := FALSE;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="numberOfElements" ObjectId="ce6a1b72-5b90-44e2-bf7a-6a2875d4c130">
                    <interface>
                      <returnType>
                        <UINT />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="numberOfElements" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">numberOfElements := fbList.numberOfElements();</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="deleteAll" ObjectId="f3385cc1-664d-4a82-944b-7bdeaee59d7e">
                    <interface>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="deleteAll" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">fbList.deleteAll();</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="DataChannel" ObjectId="1403fd9f-56e1-42ed-95da-70a74c2bb5cc">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_DataChannelSenderFifo" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">pDataChannelFifo := DataChannel;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="distanceBeforeOven_mm" ObjectId="2c8f7943-1d21-48e0-84ce-66fb488a3922">
                    <interface>
                      <returnType>
                        <DINT />
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">diDistanceBeforeOven_mm := distanceBeforeOven_mm;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">distanceBeforeOven_mm := diDistanceBeforeOven_mm;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="moduleLength_mm" ObjectId="5b897dd5-66ad-4588-b019-065d13a009df">
                    <interface>
                      <returnType>
                        <DINT />
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">moduleLength_mm := diModuleLength_mm;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">diModuleLength_mm := moduleLength_mm;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="numberOfModules" ObjectId="5f36dd4f-071a-4b93-a58e-273e6d7698fd">
                    <interface>
                      <returnType>
                        <UINT />
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">uiNumberOfModules := numberOfModules;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">numberOfModules := uiNumberOfModules;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="sampleTime_us" ObjectId="85efad67-1d40-4c96-b161-6f407e7dfd6a">
                    <interface>
                      <returnType>
                        <UDINT />
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">udiSampleTime_us := sampleTime_us;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">sampleTime_us := udiSampleTime_us;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="distanceAfterOven_mm" ObjectId="a2995d7c-9d54-4531-b82b-349db8aa3c90">
                    <interface>
                      <returnType>
                        <DINT />
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">diDistanceAfterOven_mm := distanceAfterOven_mm;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">distanceAfterOven_mm := diDistanceAfterOven_mm;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9380dd21-cb22-45d5-b08a-410034e7d992</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_PTB" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolBeltEntrySensor">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolBeltExitSensor">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_PTB" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="p_fbMotor">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_UMC" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to function block</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pMotorCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="p_fbPump">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_VPC" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pPumpCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="fbEntrySensorDebounce">
                    <type>
                      <derived name="FB_PRS" />
                    </type>
                  </variable>
                  <variable name="fbExitSensorDebounce">
                    <type>
                      <derived name="FB_PRS" />
                    </type>
                  </variable>
                  <variable name="arMotorDirection">
                    <type>
                      <array>
                        <dimension lower="0" upper="(E_BELT_DIRECTION.MAX_E_BELT_DIRECTION - 1)" />
                        <baseType>
                          <derived name="E_TURN_DIRECTION" />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="fbPositionService">
                    <type>
                      <derived name="FB_PTR" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper Position Service</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiIdCounter">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="fbPaperEntryPEdge">
                    <type>
                      <derived name="TC2_STANDARD.R_TRIG" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper Edge Detectors</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbPaperEntryNEdge">
                    <type>
                      <derived name="TC2_STANDARD.F_TRIG" />
                    </type>
                  </variable>
                  <variable name="fbPaperExitPEdge">
                    <type>
                      <derived name="TC2_STANDARD.R_TRIG" />
                    </type>
                  </variable>
                  <variable name="fbPaperExitNEdge">
                    <type>
                      <derived name="TC2_STANDARD.F_TRIG" />
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <actions>
                <action name="cmd_STOP">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbMotor^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
SetPumpComand(cCMD_RUN);
</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>819cc83c-e1e7-4bf5-aa5b-d201360447d6</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="cmd_OFF">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbMotor^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
SetPumpComand(cCMD_OFF);
</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>c8334735-05ef-47cd-9fa0-dfe9d5663a94</ObjectId>
                    </data>
                  </addData>
                </action>
              </actions>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Vacuum Pump implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		PC			Start history
0.00.2		14.02.2014		AVME/MRU	Cyclic call of fbPositionService added
0.00.3		24.02.2014		AVME/MRU	sta_OFFBusy reworked
0.00.4		02.10.2014		AVME/MRU	Alwaysw reworked for Single_Answer
___________________________________________________________________________________________________*)


SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="0b720a96-2ec8-4c16-9a79-0d2a3f6cb6e5">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	; // always error supervision
	
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF))
		 AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) AND
		(me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy) AND (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF

// -----------------------------------------------------------------------------------
PaperPositionHandling();
// -----------------------------------------------------------------------------------
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STACKPAPER" ObjectId="19072b2b-ec17-4747-8579-06eeb80dd90f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STACKPAPER" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
			BASE_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			PTB_CmdState.cCMD_EJECTPAPER:
				me.StateMachine.intStateNext := PTB_CmdState.cSTA_EJECTPAPERbusy;
			PTB_CmdState.cCMD_STACKPAPER:
				me.StateMachine.intStateNext := PTB_CmdState.cSTA_STACKPAPERbusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="24861e4e-d8f6-4862-a04d-b051d26d7b2e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'Run'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_STOP;
	CIf.Job.aCmdList[iIdx].strName := 'Stop'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := PTB_CmdState.cCMD_EJECTPAPER;
	CIf.Job.aCmdList[iIdx].strName := 'EJECTPAPER'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := PTB_CmdState.cCMD_STACKPAPER;
	CIf.Job.aCmdList[iIdx].strName := 'STACKPAPER'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_PTB';
CIf.Info.strFullName := 'Paper Transport Belt';

// set alarm class
SIf.Alm[E_ALM_PTB.TestAlarm].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_PTB.TestAlarm].strText := 'Baum' ;


//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// configuration
SIf.Cfg.rBeltParam.intBackwardDirection		:= E_TURN_DIRECTION.LEFT;
SIf.Cfg.rBeltParam.intForwardDirection		:= E_TURN_DIRECTION.RIGHT;
SIf.Cfg.bolVacuumPresent					:= TRUE;
SIf.Cfg.eMode								:= E_PTB_MODE.Endless;
SIf.Cfg.rBeltParam.reaRpmDistance_mm		:= 20.3;

// parameter
SIf.Par.intDirection				:= E_BELT_DIRECTION.FORWARD;
SIf.Par.rBeltParam.uinBeltSpeed		:= 412;
SIf.Par.udiDistanceToMove_mm		:= 0;
SIf.Par.udiTimeToMove_ms			:= 0;
SIf.Par.ePaperOrientation			:= E_PTB_PaperDirection.Portrait;
SIf.Par.uinPaperHight_mm			:= 460;
SIf.Par.uinPaperWidth_mm			:= 320;
SIf.Par.uinInputSignalDebounceTime_ms := 50;


fbEntrySensorDebounce.CtrlSIf^.Par.udiDebounceAbsentTime_ms := SIf.Par.uinInputSignalDebounceTime_ms;
fbEntrySensorDebounce.CtrlSIf^.Par.udiDebouncePresentTime_ms := SIf.Par.uinInputSignalDebounceTime_ms;
fbExitSensorDebounce.CtrlSIf^.Par.udiDebounceAbsentTime_ms := SIf.Par.uinInputSignalDebounceTime_ms;
fbExitSensorDebounce.CtrlSIf^.Par.udiDebouncePresentTime_ms := SIf.Par.uinInputSignalDebounceTime_ms;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="26ea456b-0cb5-4170-b2b7-a78754a96706">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    BASE_PLC.cSTA_RUN: 
        THIS^.sta_RUN();
    BASE_PLC.cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
    BASE_PLC.cSTA_STOP: 
        THIS^.sta_STOP();
    BASE_PLC.cSTA_STOPBusy: 
        THIS^.sta_STOPBusy();
	PTB_CmdState.cSTA_EJECTPAPERbusy:
		THIS^.sta_EJECTPAPERbusy();
	PTB_CmdState.cSTA_EJECTPAPER:
		THIS^.sta_EJECTPAPER();
	PTB_CmdState.cSTA_STACKPAPER:
		THIS^.sta_STACKPAPER();
	PTB_CmdState.cSTA_STACKPAPERbusy:
		THIS^.sta_STACKPAPERbusy();
END_CASE;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CheckPumpState" ObjectId="3f33bcc6-db72-4010-bde7-0753d49dc451">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="intState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CheckPumpState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">CheckPumpState := TRUE;

IF SIf.Cfg.bolVacuumPresent THEN
	CheckPumpState := p_fbPump^.CtrlCIf^.Job.intState = intState;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="409cdb91-8201-47a2-83d7-a768f8eb00a6">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		;
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="42c92c40-c6cf-4983-b8df-09a6c8a7222d">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		CASE intCmdState OF
			PTB_CmdState.cCMD_EJECTPAPER: 
				getCmdState := 'EJECTPAPER';
			PTB_CmdState.cCMD_STACKPAPER: 
				getCmdState := 'STACKPAPER';
		END_CASE;
	ELSE
		// States's
		CASE intCmdState OF
			PTB_CmdState.cSTA_EJECTPAPER: 
				getCmdState := 'EJECTPAPER';
			PTB_CmdState.cSTA_EJECTPAPERbusy: 
				getCmdState := 'EJECTPAPERbusy';
			PTB_CmdState.cSTA_STACKPAPER: 
				getCmdState := 'STACKPAPER';
			PTB_CmdState.cSTA_STACKPAPERbusy: 
				getCmdState := 'STACKPAPERbusy';
			PTB_CmdState.cSUB_EMPTYstart: 
				getCmdState := 'EMPTYstart';
			PTB_CmdState.cSUB_EMPTYWAITPAPERbusy: 
				getCmdState := 'EMPTYWAITPAPERbusy';
			PTB_CmdState.cSUB_EMPTYWAITPAPERGONEbusy: 
				getCmdState := 'EMPTYWAITPAPERGONEbusy';
			PTB_CmdState.cSUB_PAPERDISTANCEbusy: 
				getCmdState := 'PAPERDISTANCEbusy';
			PTB_CmdState.cSUB_PAPERDISTANCEstart: 
				getCmdState := 'PAPERDISTANCEstart';
			PTB_CmdState.cSUB_STARTENTRYDRIVE: 
				getCmdState := 'STARTENTRYDRIVE';
			PTB_CmdState.cSUB_STARTENTRYDRIVEbusy: 
				getCmdState := 'STARTENTRYDRIVEbusy';
			PTB_CmdState.cSUB_STARTSTACKDELAY: 
				getCmdState := 'STARTSTACKDELAY';
			PTB_CmdState.cSUB_WAITPAPER: 
				getCmdState := 'WAITPAPER';
			PTB_CmdState.cSUB_PAPERDISTANCESTOPbusy:
				getCmdState := 'PAPERDISTANCESTOPbusy';
		END_CASE;
	END_IF
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="47e90418-7806-4851-a78a-b60ced3a0a24">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		pMotorCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="4a91c7f6-21e9-48e9-b00b-9849e8134182">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory&lt;=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PONBusy;
			ELSIF(me.intCmd=cCMD_OFF) THEN
				me.StateMachine.intStateNext := cSTA_OFFBusy;
			ELSIF(me.intCmd=BASE_PLC.cCMD_RUN) THEN
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="5c3137bb-2fa5-4bf5-9465-4e72bcc46d38">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
//	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.intActualPosition));
;
//	THIS^.Out_intActualPosition := SIf.Out.intActualPosition.map;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="5dfd68b1-32d1-4c5f-aab2-8dcaa084427a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CtrlInit();

pMotorCIf := p_fbMotor^.CtrlCIf;
AddChild(p_fbMotor^);

IF SIf.Cfg.bolVacuumPresent THEN
	pPumpCIf  := p_fbPump^.CtrlCIf;
	AddChild(p_fbPump^);
END_IF

arMotorDirection[E_BELT_DIRECTION.BACKWARD] := SIf.Cfg.rBeltParam.intBackwardDirection;
arMotorDirection[E_BELT_DIRECTION.FORWARD] := SIf.Cfg.rBeltParam.intForwardDirection;

fbPositionService.TimeBase := me.FUBInfo.udiSample_us;
fbPositionService.BeltLength := UDINT_TO_DINT(SIf.Par.udiBeltLength_mm);

CASE SIf.Par.ePaperOrientation OF
	E_PTB_PaperDirection.Portrait:
		fbPositionService.PaperEntryOffset := UINT_TO_INT(SIf.Par.uinPaperHight_mm); 
	E_PTB_PaperDirection.Landscape:
		fbPositionService.PaperEntryOffset := UINT_TO_INT(SIf.Par.uinPaperWidth_mm); 
END_CASE

SIf.Cur.pPositionList := fbPositionService.PositionList;
udiIdCounter := 0;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="PaperPositionHandling" ObjectId="64ea4a68-46f8-44af-a85d-de79b82b7c9e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="PaperPositionHandling" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Paper Tracking Service
// -----------------------------------------------------------------------------------
CASE me.StateMachine.intState OF
	BASE_PLC.cSTA_RUN:
		fbPositionService.In_uinBeltSpeed := sif.Cur.rBeltParam.uinBeltSpeed_mms;
ELSE
	fbPositionService.In_uinBeltSpeed := 0;
END_CASE

IF SIf.In.bolBeltEntrySensorPEdge.intern THEN
	udiIdCounter := udiIdCounter + 1;
	fbPositionService.Push(udiIdCounter);
END_IF

IF SIf.In.bolBeltEntrySensorNEdge.intern THEN
	fbPositionService.EnterComplete();
END_IF

IF SIf.In.bolBeltExitSensorPEdge.intern THEN
	fbPositionService.Pop();
END_IF

// Cyclic call
fbPositionService();
SIf.Cur.uinPaperOnBelt := fbPositionService.PaperOnBelt;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="774612dd-5bce-47d5-be68-6a33e3d085d4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="iDifference">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		// The direction changed
		IF (SIf.Par.intDirection &lt;&gt; SIf.Cur.eActualDirection) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
		END_IF
		
		// The speed changed
		IF (SIf.Par.rBeltParam.uinBeltSpeed &lt;&gt; SIf.Cur.rBeltParam.uinBeltSpeed_mms) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
		END_IF
		
		IF  me.intCmd = BASE_PLC.cCMD_STOP THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
		END_IF

		CASE SIf.Cfg.eMode OF
			E_PTB_MODE.ToDistance, 
			E_PTB_MODE.ToTime :
				IF me.StateMachine.udiTimeInState_ms &gt; SIf.Cur.udiTimeToMove_ms THEN
					me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
				END_IF
			E_PTB_MODE.ToSensor:
				IF (SIf.In.bolBeltExitSensorPEdge.intern) THEN
					me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
				END_IF
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="7c24c153-9cbe-465f-911f-714fc7ad7ecd">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_PTB" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="SetPumpComand" ObjectId="9aefb630-c621-4bf6-8829-228022425f36">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="intComand">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="SetPumpComand" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SetPumpComand := TRUE;

IF SIf.Cfg.bolVacuumPresent THEN
	p_fbPump^.CtrlCIf^.Job.intACmd := intComand;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STACKPAPERbusy" ObjectId="9e2a302b-e055-48fe-8b35-2fae0099c1ef">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STACKPAPERbusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		me.SubStateMachine.intStateNext := PTB_CmdState.cSUB_WAITPAPER;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.SubStateMachine.intState OF
			PTB_CmdState.cSUB_WAITPAPER:
				IF SIf.In.bolBeltEntrySensor.intern THEN
					me.SubStateMachine.intStateNext := PTB_CmdState.cSUB_WAITPAPERGONE;
				ELSE
					CASE me.intCmd OF
						BASE_PLC.cCMD_RUN:
							me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
						BASE_PLC.cCMD_STOP:
							me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
						PTB_CmdState.cCMD_EJECTPAPER:
							me.StateMachine.intStateNext := PTB_CmdState.cSTA_EJECTPAPERbusy;
					END_CASE
				END_IF
			PTB_CmdState.cSUB_WAITPAPERGONE:
				IF NOT SIf.In.bolBeltEntrySensor.intern THEN
					SIf.Cur.uinPaperOnBelt := SIf.Cur.uinPaperOnBelt + 1;
					me.SubStateMachine.intStateNext := PTB_CmdState.cSUB_STARTSTACKDELAY;
				END_IF
			PTB_CmdState.cSUB_STARTSTACKDELAY:
				IF me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiStackDelayTime_ms THEN
					IF SIf.Cur.uinPaperOnBelt &gt;= SIf.Par.uinPaperStackHight THEN
						me.StateMachine.intStateNext := PTB_CmdState.cSTA_EJECTPAPERbusy;
					ELSE
						me.SubStateMachine.intStateNext := PTB_CmdState.cSUB_PAPERDISTANCEstart;
					END_IF
				END_IF
			PTB_CmdState.cSUB_PAPERDISTANCEstart:
				cmd_RUN(sif.Par.rBeltParam.uinStackSpeed);
				me.SubStateMachine.intStateNext := PTB_CmdState.cSUB_PAPERDISTANCEbusy;
			PTB_CmdState.cSUB_PAPERDISTANCEbusy:
				IF me.SubStateMachine.udiTimeInState_ms &gt; SIf.Cur.udiTimeToMove_ms THEN
					cmd_STOP();
					me.SubStateMachine.intStateNext := PTB_CmdState.cSUB_PAPERDISTANCESTOPbusy;
				END_IF
			PTB_CmdState.cSUB_PAPERDISTANCESTOPbusy:
				IF p_fbMotor^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_STOP THEN
					IF SIf.Par.bolAutoEjectAfterStack THEN
						me.StateMachine.intStateNext := PTB_CmdState.cSTA_EJECTPAPERbusy;
					ELSE
						me.StateMachine.intStateNext := PTB_CmdState.cSTA_STACKPAPER;
					END_IF
				END_IF
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
		CIf.Job.intMCmd := BASE_PLC.cCMD_DONE;
		me.SubStateMachine.intState := BASE_PLC.cSTA_INITIALIZED;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOPBusy" ObjectId="9f97b1e6-b4d9-4f8a-b13e-5a19dbc906d7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOPBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		cmd_STOP();
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF p_fbMotor^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_STOP  THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_STOP;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="b801a710-0ce2-41f5-9545-4c56ab4f6a6f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		cmd_OFF();
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Set commandos not only in entry action because of possible errors or manual/auto changes
		cmd_OFF();

		IF p_fbMotor^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_OFF 
		  AND CheckPumpState(BASE_PLC.cSTA_OFF) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="b8546540-4c6e-4461-ba23-06e1835d40da">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		CASE SIf.Cfg.eMode OF
			E_PTB_MODE.Endless,
			E_PTB_MODE.ToDistance,
			E_PTB_MODE.ToTime:
				cmd_RUN(sif.Par.rBeltParam.uinBeltSpeed);
			E_PTB_MODE.ToSensor:
				IF SIf.In.bolBeltExitSensorPEdge.intern THEN
					me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
				ELSE
					cmd_RUN(sif.Par.rBeltParam.uinBeltSpeed);
				END_IF
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (p_fbMotor^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_RUN) 
		  AND (p_fbMotor^.CtrlSIf^.Cur.eDirection = arMotorDirection[SIf.Par.intDirection]) 
		  AND CheckPumpState(BASE_PLC.cSTA_RUN) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
		END_IF

		IF me.intCmd = BASE_PLC.cCMD_STOP THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="b8b49437-1e31-41d6-b74a-fbaa92763dca">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF SIf.Cfg.bolExitSensorDebounceEnable THEN
	fbExitSensorDebounce.In_bolPresent := THIS^.In_bolBeltExitSensor;
	fbExitSensorDebounce();
	SIf.In.bolBeltExitSensor.map := fbExitSensorDebounce.Out_bolPresent;
ELSE
	SIf.In.bolBeltExitSensor.map := THIS^.In_bolBeltExitSensor;
END_IF

IF SIf.Cfg.bolEntrySensorDebounceEnable THEN
	fbEntrySensorDebounce.In_bolPresent := THIS^.In_bolBeltExitSensor;
	fbEntrySensorDebounce();
	SIf.In.bolBeltExitSensor.map := fbEntrySensorDebounce.Out_bolPresent;
ELSE
	SIf.In.bolBeltEntrySensor.map := THIS^.In_bolBeltEntrySensor;
END_IF


// Insert also an edge detection
fbPaperEntryPEdge.CLK := SIf.In.bolBeltEntrySensor.map;
fbPaperEntryPEdge();
SIf.In.bolBeltEntrySensorPEdge.map := fbPaperEntryPEdge.Q;

fbPaperEntryNEdge.CLK := SIf.In.bolBeltEntrySensor.map;
fbPaperEntryNEdge();
SIf.In.bolBeltEntrySensorNEdge.map := fbPaperEntryNEdge.Q;

fbPaperExitPEdge.CLK := SIf.In.bolBeltExitSensor.map;
fbPaperExitPEdge();
SIf.In.bolBeltExitSensorPEdge.map := fbPaperExitPEdge.Q;

fbPaperExitNEdge.CLK := SIf.In.bolBeltExitSensor.map;
fbPaperExitNEdge();
SIf.In.bolBeltExitSensorNEdge.map := fbPaperExitNEdge.Q;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolBeltExitSensor));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolBeltEntrySensor));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolBeltEntrySensorPEdge));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolBeltEntrySensorNEdge));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolBeltExitSensorPEdge));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolBeltExitSensorNEdge));
ELSE
;	//simulation of global IO
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="cmd_RUN" ObjectId="c6b1e64e-e584-437c-a4a7-7cd33dd17e9a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="uinBeltSpeed">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="cmd_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.Cur.eActualDirection := SIf.Par.intDirection;
SIf.Cur.rBeltParam.uinBeltSpeed_rpm := CalculateBeltParameter(
											uinBeltSpeed,
											sif.Cfg.rBeltParam.reaRpmDistance_mm,
											ADR(SIf.Cur.rBeltParam));
CalculateModeParameter();
p_fbMotor^.CtrlSIf^.Par.eRotationDirection 	:= THIS^.arMotorDirection[SIf.Par.intDirection];
p_fbMotor^.CtrlSIf^.Par.uinSpeed_rpm 		:= SIf.Cur.rBeltParam.uinBeltSpeed_rpm;
p_fbMotor^.CtrlCIf^.Job.intACmd :=BASE_PLC.cCMD_RUN;
SetPumpComand(cCMD_RUN);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EJECTPAPERbusy" ObjectId="d282bf75-e7b8-4a04-a81f-ee2e0c595e11">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EJECTPAPERbusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		cmd_RUN(sif.Par.rBeltParam.uinBeltSpeed);
		me.SubStateMachine.intStateNext := PTB_CmdState.cSUB_EMPTYWAITPAPERbusy;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.SubStateMachine.intState OF
			PTB_CmdState.cSUB_EMPTYWAITPAPERbusy:
				IF SIf.In.bolBeltExitSensor.intern THEN
					me.SubStateMachine.intStateNext := PTB_CmdState.cSUB_EMPTYWAITPAPERGONEbusy;
				END_IF
			PTB_CmdState.cSUB_EMPTYWAITPAPERGONEbusy:
				IF NOT SIf.In.bolBeltExitSensor.intern THEN
					SIf.Cur.uinPaperOnBelt := 0;
					cmd_STOP();
					me.SubStateMachine.intStateNext := PTB_CmdState.cSUB_EMPTYWAITDRIVESTOPED;
				END_IF
			PTB_CmdState.cSUB_EMPTYWAITDRIVESTOPED:
				IF (p_fbMotor^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_STOP) THEN
					IF SIf.Par.bolAutoStackAfterEject THEN
						CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
						CIf.Job.intMCmd := BASE_PLC.cCMD_DONE;
						me.StateMachine.intStateNext := PTB_CmdState.cSTA_STACKPAPERbusy;	
					ELSE	
						me.StateMachine.intStateNext := PTB_CmdState.cSTA_EJECTPAPER;	
					END_IF
				END_IF
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		me.SubStateMachine.intState := BASE_PLC.cSTA_INITIALIZED;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="d42c5d4c-ced3-4dfa-b9b6-ca4608b3fa79">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
			BASE_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			PTB_CmdState.cCMD_EJECTPAPER:
				me.StateMachine.intStateNext := PTB_CmdState.cSTA_EJECTPAPERbusy;
			PTB_CmdState.cCMD_STACKPAPER:
				me.StateMachine.intStateNext := PTB_CmdState.cSTA_STACKPAPERbusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EJECTPAPER" ObjectId="e54527ca-6ef1-48c8-b56d-19ad3b944eff">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="iDifference">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EJECTPAPER" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
			BASE_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			PTB_CmdState.cCMD_EJECTPAPER:
				me.StateMachine.intStateNext := PTB_CmdState.cSTA_EJECTPAPERbusy;
			PTB_CmdState.cCMD_STACKPAPER:
				me.StateMachine.intStateNext := PTB_CmdState.cSTA_STACKPAPERbusy;
		END_CASE
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CalculateModeParameter" ObjectId="eb6e816c-b5e9-4952-860f-51553408025b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CalculateModeParameter" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE SIf.Cfg.eMode OF  
	E_PTB_MODE.ToDistance:
		SIf.Cur.udiTimeToMove_ms		:= REAL_TO_UDINT( 1000.0 * UDINT_TO_REAL(SIf.Par.udiDistanceToMove_mm) / UINT_TO_REAL(SIf.Par.rBeltParam.uinBeltSpeed));
		SIf.Cur.udiTimeToMove_ms		:= SIf.Cur.udiTimeToMove_ms + p_fbMotor^.CtrlSIf^.Par.udiMoveStartLatency - p_fbMotor^.CtrlSIf^.Par.udiMoveStopLatency;
		SIf.Cur.udiDistanceToMove_mm	:= SIf.Par.udiDistanceToMove_mm;
	E_PTB_MODE.ToTime:
		SIf.Cur.udiTimeToMove_ms		:= SIf.Par.udiTimeToMove_ms;
		SIf.Cur.udiDistanceToMove_mm	:= SIf.Par.udiTimeToMove_ms * UINT_TO_UDINT(SIf.Par.rBeltParam.uinBeltSpeed) / 1000;
		SIf.Cur.udiTimeToMove_ms		:= SIf.Cur.udiTimeToMove_ms + p_fbMotor^.CtrlSIf^.Par.udiMoveStartLatency - p_fbMotor^.CtrlSIf^.Par.udiMoveStopLatency;
ELSE
	SIf.Cur.udiTimeToMove_ms		:= 0;
	SIf.Cur.udiDistanceToMove_mm	:= 0;
END_CASE
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CalculateBeltParameter" ObjectId="effd9c76-8538-4d81-b642-2c83c3ade187">
                    <interface>
                      <returnType>
                        <UINT />
                      </returnType>
                      <inputVars>
                        <variable name="uinBeltSpeed_mms">
                          <type>
                            <UINT />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Belt speed in mm/sec</xhtml>
                          </documentation>
                        </variable>
                        <variable name="reaRpmDistance">
                          <type>
                            <REAL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> mm/rotation</xhtml>
                          </documentation>
                        </variable>
                        <variable name="pCur">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_Belt_Cur_Base" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CalculateBeltParameter" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">pCur^.uinBeltSpeed_mms := uinBeltSpeed_mms;
// RPM = Speed [mm/sec] / Dispance per Rotation [mm/rpm]
pCur^.uinBeltSpeed_rpm := REAL_TO_UINT(UINT_TO_REAL(uinBeltSpeed_mms) * 60.0 / reaRpmDistance);

CalculateBeltParameter := pCur^.uinBeltSpeed_rpm;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOP" ObjectId="f59e4d1c-889a-435d-b353-ad5f9f25ab5a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOP" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
			BASE_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			PTB_CmdState.cCMD_EJECTPAPER:
				me.StateMachine.intStateNext := PTB_CmdState.cSTA_EJECTPAPERbusy;
			PTB_CmdState.cCMD_STACKPAPER:
				me.StateMachine.intStateNext := PTB_CmdState.cSTA_STACKPAPERbusy;
		END_CASE

		IF    (SIf.Cfg.eMode = E_PTB_MODE.ToSensor) 
		  AND (SIf.In.bolBeltExitSensorNEdge.intern) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="Drive" ObjectId="352ad45d-9d9b-46c4-8cf1-961c8a81f50b">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_UMC" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbMotor := Drive;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">Drive := p_fbMotor;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="81acc2b3-095a-407a-aa96-26f254cf6c26">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_PTB" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="PositionList" ObjectId="b5bc4f9e-a471-4e39-bf7c-b797c6ae5d2f">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_PTR_STRUCT" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="VacuumPump" ObjectId="b6867796-0cd2-4ba6-ab46-c144b77a5ecf">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_VPC" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbPump := VacuumPump;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">VacuumPump := p_fbPump;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>655f278b-e80b-449e-a7e9-7932049a4287</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_PBC" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolPaperAvailableExit">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolPaperAvailableEntry">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolCapacityReached">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolDoublePaperDetection">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolTurnTableMiddleSensor">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolAirPressorOk">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_bolAirOn">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_PBC" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access
 -------------------------------------------------------</xhtml>
                    </documentation>
                  </variable>
                  <variable name="p_fbDeStacker">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PTB" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Sub Controller Pointer
 -------------------------------------------------------</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pDeStackerCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="BASE_PLC.T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="p_fbBelt">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PTB" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pBeltCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="BASE_PLC.T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="m_uinPaperHight_mm">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="460" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Other localy used variables
 -------------------------------------------------------</xhtml>
                    </documentation>
                  </variable>
                  <variable name="m_uinPaperWidth_mm">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="320" />
                    </initialValue>
                  </variable>
                  <variable name="m_intRetry">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="udiBufferEmptyTimer_ms">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="m_eStopReason">
                    <type>
                      <derived name="E_STOPREASON" />
                    </type>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cPAPERPOSITION_TOLERANCE_mm">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="200" />
                    </initialValue>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Destacker/Buffer implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		PC			Start history
0.00.2		05.02.2015		RE			React on StopReleaseItems flag to stop destacking
0.00.3		06.02.2015		RE			Bug fix StopReleaseItems, fixed some comments
___________________________________________________________________________________________________*)


SUPER^();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="03da2f65-5de2-41d5-851a-12978cd42515">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		;
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNbusy" ObjectId="045a7728-ee01-4fff-9106-f4e993712fa4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNbusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	IF (CIf.SwCfg.bolSimulation) THEN
		SIf.In.bolCapacityReached.intern := FALSE;
		SIf.In.bolPaperAvailableEntry.intern := TRUE;
		SIf.In.bolPaperAvailableExit.intern := TRUE;
	END_IF

	SIf.Out.bolAirOn.intern := TRUE;
	
	pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
	pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
	
	// clear alarm
	pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PBC.DoNotReleaseItems),0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	IF SIf.Par.bolAutomaticMode THEN
		SIf.Cur.uinPaperToEjectParameter := 0;
		SIf.Cur.uinPaperToEjectCount := 0;
		me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
	ELSE	
		IF me.intCmd = PBC_CmdState.cCMD_SINGLE THEN
			SIf.Cur.uinPaperToEjectParameter := 1;
			SIf.Cur.uinPaperToEjectCount := 1;
	
			IF NOT SIf.In.bolPaperAvailableExit.intern AND NOT SIf.In.bolPaperAvailableEntry.intern THEN
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PBC.BufferEmpty),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
	
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
		ELSE
			IF me.StateMachine.intStateHistory = Base_PLC.cSTA_OFF THEN
				CIf.Job.intACmd := cCMD_DONE;
				CIf.Job.intMCmd := cCMD_DONE;
				me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			ELSE
				SIf.Cur.uinPaperToEjectParameter := UDINT_TO_UINT(SIf.Par.udiSheetToEject);
				SIf.Cur.uinPaperToEjectCount := UDINT_TO_UINT(SIf.Par.udiSheetToEject);
		
				IF SIf.Par.udiSheetToEject &gt; 0 THEN
					me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
				ELSE
					CIf.Job.intACmd := cCMD_DONE;
					CIf.Job.intMCmd := cCMD_DONE;
					me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
				END_IF
			END_IF
		END_IF
	END_IF
END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="09022cbb-b6ab-4b04-abf3-53db65fe0b13">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="pBccSIf">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_Ctrl_SIf_BCC" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CtrlInit();

pDeStackerCIf 	:= AddChild(p_fbDeStacker^);
pBeltCIf 		:= AddChild(p_fbBelt^);





</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="201d4d88-46b2-49a6-9302-f918d8d340fe">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="pItem">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_IdBase_DCH" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                        <variable name="bResult">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	// check if DeStacker is empty
	IF NOT SIf.In.bolPaperAvailableEntry.intern AND NOT SIf.In.bolPaperAvailableExit.intern THEN
		udiBufferEmptyTimer_ms := udiBufferEmptyTimer_ms + me.FUBInfo.udiSample_ms;
		IF udiBufferEmptyTimer_ms &gt; 3000 THEN
			SIf.Cur.intPaperInBufferCount := 0;
		END_IF
	ELSE
		udiBufferEmptyTimer_ms := 0;
		SIf.Cur.intPaperInBufferCount := -1;
	END_IF

END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF) OR (me.intCmd=BASE_PLC.cCMD_EOFF))
		 AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) AND
		(me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="2368fd86-1499-440e-abaa-806c761a8e17">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		pDeStackerCIf^.Job.intACmd 	:= BASE_PLC.cCMD_STOP;
		//pBeltCIf^.Job.intACmd 		:= BASE_PLC.cCMD_STOP;
		
		// clear alarm
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PBC.DoNotReleaseItems),0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="281acdb2-3332-4f9b-ac77-ae47f75d60ec">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		CASE intCmdState OF
			PBC_CmdState.cCMD_SINGLE: 
				getCmdState := 'SINGLE';
		END_CASE;
	ELSE
		// States's
		CASE intCmdState OF
			PBC_CmdState.cSTA_INITbusy: 
				getCmdState := 'INITbusy';
			PBC_CmdState.cSUB_WAITPAPER: 
				getCmdState := 'WAITPAPER';
			PBC_CmdState.cSUB_EJECTSTARTbusy: 
				getCmdState := 'EJECTSTARTbusy';
			PBC_CmdState.cSUB_EJECTbusy: 
				getCmdState := 'EJECTbusy';

			PBC_CmdState.cSUB_EJECTSTOPbusy: 
				getCmdState := 'EJECTSTOPbusy';
			PBC_CmdState.cSUB_EVALUATEEJECT: 
				getCmdState := 'EVALUATEEJECT';
			PBC_CmdState.cSUB_POSITIONbusy: 
				getCmdState := 'POSITIONbusy';

			PBC_CmdState.cSUB_POSITIONSTARTbusy: 
				getCmdState := 'POSITIONSTARTbusy';
			PBC_CmdState.cSUB_POSITIONSTOPbusy: 
				getCmdState := 'POSITIONSTOPbusy';
			PBC_CmdState.cSUB_READYEJECT: 
				getCmdState := 'READYEJECT';
			PBC_CmdState.cSUB_WAITPAPERGONETABLE: 
				getCmdState := 'WAITPAPERGONETABLE';
			PBC_CmdState.cSUB_POSITIONRETRYDELAY: 
				getCmdState := 'POSITIONRETRYDELAY';
			PBC_CmdState.cSUB_POSITIONRETRYSTOP: 
				getCmdState := 'POSITIONRETRYSTOP';
		END_CASE;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOPbusy" ObjectId="3eaeb462-9a31-435f-aedc-94d0dcbc7e60">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOPbusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
	
	// set alarm
	IF (NOT SIf.Par.bolAutomaticMode) THEN
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PBC.DoNotReleaseItems),0,ADR(SIf.Alm),E_AlmState.SET,CIf.Job.eMe_ActivAlmClass);
	END_IF
	
	IF me.intCmd = Base_PLC.cCMD_STOP THEN
		m_eStopReason := E_STOPREASON.StopByCommand;
	ELSE
		m_eStopReason := E_STOPREASON.StopByManual;
		
		IF SIf.Par.bolStopReleaseItems AND SIf.Cfg.bolEnableSaberStopDeStack THEN
			m_eStopReason := E_STOPREASON.StopBySaber;
		END_IF
	END_IF
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateNext := BASE_PLC.cSTA_STOP;
END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="4cdc6bdc-e61d-44db-827e-89fd5fdd1777">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolAirOn));
	THIS^.Out_bolAirOn := SIf.Out.bolAirOn.map;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="53c5e258-936a-421f-b42d-360632f50539">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="pItem">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_IdBase_DCH" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                        <variable name="bolSaberStopDestack">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
	IF (me.intCmd = BASE_PLC.cCMD_RUN) OR (me.intCmd = PBC_CmdState.cCMD_SINGLE) THEN
		CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
		CIf.Job.intMCmd := BASE_PLC.cCMD_DONE;
	END_IF
	
	SIf.Cur.uinSheetToSheetTime := 0;
	m_intRetry := 0;
	
	IF CIf.SwCfg.bolSimulation THEN
		SIf.In.bolPaperAvailableEntry.intern := TRUE;
		SIf.In.bolDoublePaperDetection.intern := FALSE;	
		SIf.In.bolPaperAvailableExit.intern := TRUE;	
		SIf.In.bolCapacityReached.intern := TRUE;
	END_IF

	me.SubStateMachine.intState 	:= PBC_CmdState.cSUB_POSITIONSTARTbusy;
	me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONSTARTbusy;
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	IF (SIf.In.bolDoublePaperDetection.intern) THEN
		IF SIf.Par.bolEnableDoublePaperDetection THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PBC.DoublePaperError),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;
		ELSE
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PBC.DoublePaperWarning),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		END_IF
	ELSE	
		CASE me.SubStateMachine.intState OF
			// substate Wait paper - wait for the next paper if the buffer was empty
			// ------------------------------------------------------------------------
			PBC_CmdState.cSUB_WAITPAPER:
				IF NOT SIf.In.bolPaperAvailableExit.intern THEN
					IF SIf.In.bolCapacityReached.intern OR SIf.In.bolPaperAvailableEntry.intern THEN
						me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONSTARTbusy;
					END_IF
				ELSE
					me.SubStateMachine.intStateNext := cSUB_EVALUATEEJECT;
				END_IF
				
			// substate PositionStart busy
			// ------------------------------------------------------------------------
			PBC_CmdState.cSUB_POSITIONSTARTbusy:
				IF NOT SIf.In.bolPaperAvailableExit.intern THEN
					SIf.Cur.bolPaperBeforeEjectAvailable := SIf.In.bolCapacityReached.intern OR SIf.In.bolPaperAvailableEntry.intern;
					pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONbusy;
				ELSE
					me.SubStateMachine.intStateNext := cSUB_EVALUATEEJECT;
				END_IF
	
			// substate Position busy
			// ------------------------------------------------------------------------
			PBC_CmdState.cSUB_POSITIONbusy:
				IF me.SubStateMachine.udiTimeInState_ms &lt;= SIf.Par.udiPaperTransportTime THEN
					IF SIf.In.bolPaperAvailableExit.intern THEN
						m_intRetry := 0;
						pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
						me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONSTOPbusy;
					END_IF
				ELSE
					IF SIf.Cur.bolPaperBeforeEjectAvailable OR SIf.In.bolCapacityReached.intern OR SIf.In.bolPaperAvailableEntry.intern THEN
						IF DINT_TO_UDINT(m_intRetry) &lt; SIf.Par.udiPaperInjectRetries THEN
							pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
							m_intRetry := m_intRetry + 1;
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PBC.PaperInjectRetry),m_intRetry,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONRETRYSTOP;	
						ELSE
							m_intRetry := 0;
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PBC.PaperInject),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
						END_IF
					ELSE
						m_intRetry := 0;
						pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
						me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONSTOPbusy;
					END_IF 
				END_IF

				// Simulation
				IF CIf.SwCfg.bolSimulation THEN
					IF (me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiSimPaperTransportTime) AND NOT SIf.In.bolPaperAvailableExit.intern THEN
						SIf.In.bolPaperAvailableExit.intern := TRUE;	
					END_IF
				END_IF
				// -----------------------------------
	
			// Wait that the moto stops
			// ------------------------------------------------------------------------
			PBC_CmdState.cSUB_POSITIONRETRYSTOP:
				IF pDeStackerCIf^.Job.intState = BASE_PLC.cSTA_STOP THEN
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONRETRYDELAY;
				END_IF

			// Stop the motor and way for x ms
			// ------------------------------------------------------------------------
			PBC_CmdState.cSUB_POSITIONRETRYDELAY:
				IF me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiPaperInjectRetryPauseTime_ms THEN
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONSTARTbusy;
				END_IF

			// substate PositionStop busy
			// ------------------------------------------------------------------------
			PBC_CmdState.cSUB_POSITIONSTOPbusy:
				IF pDeStackerCIf^.Job.intState = BASE_PLC.cSTA_STOP THEN
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_EVALUATEEJECT;
				END_IF

			// substate Evaluate Eject
			// ------------------------------------------------------------------------
			PBC_CmdState.cSUB_EVALUATEEJECT:
				bolSaberStopDestack		:= SIf.Par.bolStopReleaseItems AND SIf.Cfg.bolEnableSaberStopDeStack;

				// Eject next paper if there are still paper to edject or endless ejection
				IF (((SIf.Cur.uinPaperToEjectCount &gt; 0) AND NOT SIf.Par.bolAutomaticMode AND NOT bolSaberStopDestack) 
					OR (SIf.Par.bolAutomaticMode AND NOT bolSaberStopDestack)) THEN 
					// Make a delay from sheet to sheet if it is not the first sheet
					IF SIf.In.bolPaperAvailableExit.intern THEN
						IF   ((SIf.Cur.uinSheetToSheetTime &gt; SIf.Par.udiSheetToSheetTime) AND SIf.Par.bolAutomaticMode)
						  OR ((SIf.Cur.uinSheetToSheetTime &gt; SIf.Par.udiManualSheetToSheetTime_ms) AND NOT SIf.Par.bolAutomaticMode)
						  OR ((SIf.Cur.uinPaperToEjectCount = SIf.Cur.uinPaperToEjectParameter) AND NOT SIf.Par.bolAutomaticMode) THEN
							SIf.Cur.uinSheetToSheetTime := 0;
							me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_EJECTSTARTbusy;
						END_IF
					ELSE
						me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_WAITPAPER;
					END_IF
				ELSE
					me.StateMachine.intStateNext := cSTA_STOPBusy;
				END_IF
	
			// substate EjectStart busy
			// ------------------------------------------------------------------------
			PBC_CmdState.cSUB_EJECTSTARTbusy:
				pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
				SIf.Cur.uinPaperToPaperTime_ms := UDINT_TO_UINT((m_uinPaperHight_mm + 100) * 1000 / p_fbDeStacker^.CtrlSIf^.Par.rBeltParam.uinBeltSpeed);
				SIf.Par.udiSimPaperToPaperTransportTime := SIf.Cur.uinPaperToPaperTime_ms / 3; 
				me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_EJECTbusy;
	
			// substate Eject busy
			// ------------------------------------------------------------------------
			PBC_CmdState.cSUB_EJECTbusy:
				IF NOT SIf.In.bolPaperAvailableExit.intern AND NOT SIf.Cfg.bolUseTurnTableSensorForEject THEN
					pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_EJECTSTOPbusy;
				END_IF
	
				IF SIf.In.bolTurnTableMiddleSensor.intern AND SIf.Cfg.bolUseTurnTableSensorForEject THEN
					pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_WAITPAPERGONETABLE;
				END_IF
				
				IF (me.SubStateMachine.udiTimeInState_ms &gt; SIf.Cur.uinPaperToPaperTime_ms) THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PBC.PaperTransport),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
				END_IF

				// Simulation
				IF CIf.SwCfg.bolSimulation THEN
					IF (me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiSimPaperToPaperTransportTime) THEN
						IF SIf.Cfg.bolUseTurnTableSensorForEject THEN
							SIf.In.bolTurnTableMiddleSensor.intern := TRUE;
						ELSE
							SIf.In.bolPaperAvailableExit.intern := FALSE;	
						END_IF	
					END_IF
				END_IF
				// -----------------------------------
	
			// substate Wait Paper Gone Table - Wait until the paper is gone from the turn table
			// ------------------------------------------------------------------------
			PBC_CmdState.cSUB_WAITPAPERGONETABLE:
				IF NOT SIf.In.bolTurnTableMiddleSensor.intern THEN
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_EJECTSTOPbusy;
				END_IF

				// Simulation
				IF CIf.SwCfg.bolSimulation THEN
					IF (me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiSimPaperToPaperTransportTime) THEN
						SIf.In.bolTurnTableMiddleSensor.intern := FALSE;
					END_IF
				END_IF
				// -----------------------------------

	
			// substate EjectStop busy
			// ------------------------------------------------------------------------
			PBC_CmdState.cSUB_EJECTSTOPbusy:
				IF pDeStackerCIf^.Job.intState = BASE_PLC.cSTA_STOP THEN
					IF SIf.Cur.uinPaperToEjectCount &gt; 0 THEN
						SIf.Cur.uinPaperToEjectCount := SIf.Cur.uinPaperToEjectCount - 1;
					END_IF
	
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONSTARTbusy;
				END_IF
		END_CASE
	END_IF
	
	CASE me.SubStateMachine.intState OF
		PBC_CmdState.cSUB_WAITPAPER,
		PBC_CmdState.cSUB_EVALUATEEJECT:
			IF (me.intCmd = BASE_PLC.cCMD_STOP) THEN 
					me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			END_IF
	END_CASE
	
	SIf.Cur.uinSheetToSheetTime := UDINT_TO_UINT(SIf.Cur.uinSheetToSheetTime + me.FUBInfo.udiSample_ms);
END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	me.SubStateMachine.intState 	:= BASE_PLC.cSTA_INITIALIZED;
	me.SubStateMachine.intStateNext := BASE_PLC.cSTA_INITIALIZED;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="565fd178-f8f6-45b6-9fb5-4c8856fdb848">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		SIf.Out.bolAirOn.intern := FALSE;
		
		pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		
		// clear alarm
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PBC.DoNotReleaseItems),0,ADR(SIf.Alm),E_AlmState.CLR,CIf.Job.eMe_ActivAlmClass);
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (pDeStackerCIf^.Job.intState = BASE_PLC.cSTA_OFF)
		  AND (pBeltCIf^.Job.intState = BASE_PLC.cSTA_OFF) 
		  AND (NOT SIf.In.bolAirPressorOk.intern OR (NOT SIf.Cfg.bolGranulatAirPressureUnitAvailable))  THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_INITbusy" ObjectId="57823769-6542-44d2-94a0-1a8974cad10b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_INITbusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	IF (CIf.SwCfg.bolSimulation) THEN
		SIf.In.bolCapacityReached.intern := FALSE;
		SIf.In.bolPaperAvailableEntry.intern := TRUE;
		SIf.In.bolPaperAvailableExit.intern := TRUE;
	END_IF

	SIf.Out.bolAirOn.intern := TRUE;
	m_eStopReason := E_STOPREASON.None;
	
	pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
	pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CountPaper" ObjectId="65d948a4-d5d2-4500-8671-58c37605c544">
                    <interface>
                      <returnType>
                        <UINT />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CountPaper" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="732f0498-951e-474e-9d5f-cb91c7db908a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf.In.bolCapacityReached.map			:= THIS^.In_bolCapacityReached				;
SIf.In.bolPaperAvailableEntry.map		:= THIS^.In_bolPaperAvailableEntry	;
SIf.In.bolPaperAvailableExit.map		:= THIS^.In_bolPaperAvailableExit		;
SIf.In.bolDoublePaperDetection.map		:= NOT THIS^.In_bolDoublePaperDetection		;
SIf.In.bolTurnTableMiddleSensor.map		:= NOT THIS^.In_bolTurnTableMiddleSensor		;
SIf.In.bolAirPressorOk.map				:= THIS^.In_bolAirPressorOk		;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolCapacityReached));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPaperAvailableEntry));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPaperAvailableExit));
	BASE_PLC.getInBolDebounced(CIf.Job.bolIoForce,me.FUBInfo.udiSample_ms, SIf.Par.udiDoublePaperDebounceTime_ms, ADR(SIf.In.bolDoublePaperDetection));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolTurnTableMiddleSensor));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolAirPressorOk));
ELSE
	SIf.In.bolDoublePaperDetection.intern := FALSE;
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="89ef4fe1-8332-42c8-a32b-2f49b4962fbc">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	BASE_PLC.cSTA_RUN:
		THIS^.sta_RUN();
	BASE_PLC.cSTA_RUNBusy:
		THIS^.sta_RUNbusy();
    BASE_PLC.cSTA_STOPBusy: 
        THIS^.sta_STOPbusy();
    BASE_PLC.cSTA_STOP: 
        THIS^.sta_STOP();
	PBC_CmdState.cSTA_INITbusy:
		THIS^.sta_INITbusy();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="934096ed-e0e9-4740-b0df-757e9ba976b8">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory&lt;=BASE_PLC.cSTA_PON) THEN
				me.StateMachine.intStateNext := BASE_PLC.cSTA_PONBusy;
			END_IF;

			CASE me.intCmd OF
				BASE_PLC.cCMD_OFF:
					me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
				cCMD_STOP:
					me.StateMachine.intStateNext := cSTA_STOPBusy;
				PBC_CmdState.cCMD_SINGLE,
				BASE_PLC.cCMD_RUN:
					me.StateMachine.intStateNext := PBC_CmdState.cSTA_INITbusy;
			ELSE
				CASE me.StateMachine.intStateHistory OF
					cSTA_STOP:
						me.StateMachine.intStateNext := cSTA_STOPBusy;
					BASE_PLC.cSTA_RUN:
						me.StateMachine.intStateNext := PBC_CmdState.cSTA_INITbusy;
				ELSE
					me.StateMachine.intStateNext := cSTA_OFFBusy;
				END_CASE
			END_CASE
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="991a4d35-1703-4ba4-b9d3-b5e535ba12dc">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			cCMD_RUN, PBC_CmdState.cCMD_SINGLE : 
				me.StateMachine.intStateNext := cSTA_INITbusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOP" ObjectId="cdd76f16-a5d8-4049-ae0b-d22932690fcf">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOP" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	IF CIf.SwCfg.bolSimulation THEN
		SIf.In.bolPaperAvailableEntry.intern := TRUE;
		SIf.In.bolDoublePaperDetection.intern := FALSE;	
		SIf.In.bolPaperAvailableExit.intern := FALSE;	
		SIf.In.bolCapacityReached.intern := TRUE;
	END_IF
	
	IF me.intCmd = Base_PLC.cCMD_RUN THEN
		CIf.Job.intACmd := Base_PLC.cCMD_DONE;
		CIf.Job.intMCmd := Base_PLC.cCMD_DONE;
	END_IF
	
	me.SubStateMachine.intState 	:= PBC_CmdState.cSUB_POSITIONSTARTbusy;
	me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONSTARTbusy;
END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	CASE me.SubStateMachine.intState OF
		// substate Wait paper - wait for the next paper if the buffer was empty
		// ------------------------------------------------------------------------
		PBC_CmdState.cSUB_WAITPAPER:
			IF SIf.In.bolPaperAvailableExit.intern THEN
				me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_READYEJECT;
			ELSE
				IF SIf.In.bolCapacityReached.intern OR SIf.In.bolPaperAvailableEntry.intern THEN
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONSTARTbusy;
				END_IF
			END_IF
			
		// substate Wait paper - wait for the next paper if the buffer was empty
		// ------------------------------------------------------------------------
		PBC_CmdState.cSUB_POSITIONSTARTbusy:
			IF NOT SIf.In.bolPaperAvailableExit.intern THEN
				SIf.Cur.bolPaperBeforeEjectAvailable := SIf.In.bolCapacityReached.intern OR SIf.In.bolPaperAvailableEntry.intern;
				pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
				me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONbusy;
			ELSE
				me.SubStateMachine.intStateNext := cSUB_READYEJECT;
			END_IF

		// substate Wait paper - wait for the next paper if the buffer was empty
		// ------------------------------------------------------------------------
		PBC_CmdState.cSUB_POSITIONbusy:
			IF me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiPaperTransportTime THEN
				IF SIf.Cur.bolPaperBeforeEjectAvailable OR SIf.In.bolCapacityReached.intern OR SIf.In.bolPaperAvailableEntry.intern THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PBC.PaperTransport),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
				ELSE
					pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONSTOPbusy;
				END_IF 
			ELSE
				IF SIf.In.bolPaperAvailableExit.intern THEN
					pDeStackerCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_POSITIONSTOPbusy;
				END_IF
			END_IF
			
			// Simulation
			IF CIf.SwCfg.bolSimulation THEN
				IF (me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiSimPaperTransportTime) AND NOT SIf.In.bolPaperAvailableExit.intern THEN
					SIf.In.bolPaperAvailableExit.intern := TRUE;	
				END_IF
			END_IF
			// -----------------------------------

		// substate Wait paper - wait for the next paper if the buffer was empty
		// ------------------------------------------------------------------------
		PBC_CmdState.cSUB_POSITIONSTOPbusy:
			IF pDeStackerCIf^.Job.intState = BASE_PLC.cSTA_STOP THEN
				IF SIf.In.bolPaperAvailableExit.intern THEN
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_READYEJECT;
				ELSE
					me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_WAITPAPER;
				END_IF
			END_IF
		PBC_CmdState.cSUB_READYEJECT:
			IF NOT SIf.In.bolPaperAvailableExit.intern THEN
				me.SubStateMachine.intStateNext := PBC_CmdState.cSUB_WAITPAPER;
			END_IF
	END_CASE

	CASE me.SubStateMachine.intState OF
		PBC_CmdState.cSUB_WAITPAPER,
		PBC_CmdState.cSUB_READYEJECT:
			CASE m_eStopReason OF
				E_STOPREASON.None:
				E_STOPREASON.StopByCommand:
					IF (me.intCmd = BASE_PLC.cCMD_RUN) THEN
						me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
					END_IF
				E_STOPREASON.StopByManual,
				E_STOPREASON.StopBySaber:
					IF me.intCmd = PBC_CmdState.cCMD_SINGLE THEN
						me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
					END_IF

					IF (SIf.Par.bolAutomaticMode AND (NOT SIf.Par.bolStopReleaseItems AND SIf.Cfg.bolEnableSaberStopDeStack))
						OR (SIf.Par.bolAutomaticMode AND NOT SIf.Cfg.bolEnableSaberStopDeStack) THEN
						me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
					END_IF

					IF ((me.intCmd = BASE_PLC.cCMD_RUN) AND (NOT SIf.Par.bolStopReleaseItems AND SIf.Cfg.bolEnableSaberStopDeStack))
						OR ((me.intCmd = BASE_PLC.cCMD_RUN) AND NOT SIf.Cfg.bolEnableSaberStopDeStack) THEN
						me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
					END_IF
			END_CASE
	END_CASE
END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	me.SubStateMachine.intState 	:= BASE_PLC.cSTA_INITIALIZED;
	me.SubStateMachine.intStateNext := BASE_PLC.cSTA_INITIALIZED;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="cfdfd1a6-aa05-4b95-85bc-5fe278b4a3e2">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_PBC" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="d6a73665-80ea-4a98-bb13-8baa13b64ead">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'RUN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_STOP;
	CIf.Job.aCmdList[iIdx].strName := 'STOP'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := PBC_CmdState.cCMD_SINGLE;
	CIf.Job.aCmdList[iIdx].strName := 'SINGLE'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_PBC';  
CIf.Info.strFullName := 'Paper Buffer Controller';

// set alarm class
SIf.Alm[E_ALM_PBC.BufferEmpty].eAlmClass := Base_PLC.E_AlmClass.WARNING;
SIf.Alm[E_ALM_PBC.BufferEmpty].strText := 'Buffer is Empty'; 
SIf.Alm[E_ALM_PBC.BufferFull].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_PBC.BufferFull].strText := 'Buffer reached capacity limit';
SIf.Alm[E_ALM_PBC.PaperTransport].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_PBC.PaperTransport].strText := 'Possible Paper Jam';
SIf.Alm[E_ALM_PBC.DoublePaperError].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_PBC.DoublePaperError].strText := 'Double paper detected';
SIf.Alm[E_ALM_PBC.DataChannelBufferFull].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_PBC.DataChannelBufferFull].strText := 'Data Channel buffer is full';
SIf.Alm[E_ALM_PBC.DataChannelSend].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_PBC.DataChannelSend].strText := 'Data Channel item could not be sent';
SIf.Alm[E_ALM_PBC.PaperInject].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_PBC.PaperInject].strText := 'Paper is not transported to the front';
SIf.Alm[E_ALM_PBC.PaperInjectRetry].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_PBC.PaperInjectRetry].strText := 'Paper transport retry';
SIf.Alm[E_ALM_PBC.DoNotReleaseItems].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_PBC.DoNotReleaseItems].strText := 'Currently not releasing items because in manual mode';
SIf.Alm[E_ALM_PBC.DoublePaperWarning].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_PBC.DoublePaperWarning].strText := 'Double paper detected';

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// Configuration
SIf.Cfg.bolUseTurnTableSensorForEject 		:= TRUE;
SIf.Cfg.bolEnableDataChannel		  		:= FALSE;
SIf.Cfg.bolGranulatAirPressureUnitAvailable := FALSE;
SIf.Cfg.bolEnableSaberStopDeStack 			:= TRUE;

// parameter
SIf.Par.bolAutomaticMode := FALSE;
SIf.Par.bolStopReleaseItems := FALSE;
SIf.Par.udiPaperTransportTime := 3000;
SIf.Par.udiSheetToEject := 0;
SIf.Par.udiSheetToSheetTime := 22800;
SIf.Par.udiManualSheetToSheetTime_ms := 22800;
SIf.Par.udiPaperInjectRetryPauseTime_ms := 400;
SIf.Par.udiPaperInjectRetries := 3;
SIf.Par.udiDoublePaperDebounceTime_ms := 500;
SIf.Par.bolEnableDoublePaperDetection := FALSE;
SIf.Par.udiSimPaperTransportTime := SIf.Par.udiPaperTransportTime / 2;
SIf.Par.udiSimPaperToPaperTransportTime := SIf.Par.udiPaperTransportTime / 20;

m_eStopReason := E_STOPREASON.None;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="3e325cfc-23e0-40d2-9668-46ad08a9f188">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_PBC" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="PaperHight" ObjectId="5b1e9d08-5588-406e-972e-db67b6474234">
                    <interface>
                      <returnType>
                        <UINT />
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">PaperHight := m_uinPaperHight_mm;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">m_uinPaperHight_mm := PaperHight;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="DeStacker" ObjectId="a9f76b1c-618f-4237-b30b-6fe739b6b8dc">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_PTB" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">DeStacker := p_fbDeStacker;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbDeStacker := DeStacker;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="PaperWidth" ObjectId="bdbc5d91-7413-4fdb-8d4f-fb269464fa49">
                    <interface>
                      <returnType>
                        <UINT />
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">m_uinPaperWidth_mm := PaperWidth;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">PaperWidth := m_uinPaperWidth_mm;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="Belt" ObjectId="ebfda3d5-863b-4ca7-928a-5ed00cd56382">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_PTB" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">Belt := p_fbBelt;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbBelt := Belt;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5312264e-3525-4429-afd7-4fae8987e766</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_PCE" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolPaperAvailable">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_bolVacuumValveIn">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolVacuumValveOut">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_PCE" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="p_fbMotorIn">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PTB" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to function block</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pMotorInCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="p_fbMotorOut">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PTB" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMotorOutCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <actions>
                <action name="PaperExitValveActive">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.Out.bolVacuumValveIn.intern := FALSE;
SIf.Out.bolVacuumValveOut.intern := TRUE;
</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>8bd2a422-e20f-4594-87f1-a38d2d61bbb7</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="PaperInputValveActive">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.Out.bolVacuumValveIn.intern := TRUE;
SIf.Out.bolVacuumValveOut.intern := FALSE;
</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>c7287faa-248e-404e-8b1f-620edc0ce793</ObjectId>
                    </data>
                  </addData>
                </action>
              </actions>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Vacuum Pump implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		PC			Start history
___________________________________________________________________________________________________*)


SUPER^();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="06e20a87-b11f-46b1-b222-06a5aadf5142">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="iDifference">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		IF SIf.In.bolPaperAvailable.intern THEN
			me.SubStateMachine.intStateNext := PCE_CmdState.cSUB_PAPEREXIT;
		ELSE
			me.SubStateMachine.intStateNext := PCE_CmdState.cSUB_PAPERENTRY;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		CASE me.SubStateMachine.intState OF
			PCE_CmdState.cSUB_PAPERENTRY:
				PaperInputValveActive();
				
				IF SIf.In.bolPaperAvailable.intern THEN
					me.SubStateMachine.intStateNext := PCE_CmdState.cSUB_PAPERENTRYDelay;
				END_IF

				IF me.intCmd = BASE_PLC.cCMD_STOP THEN
					me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
				END_IF
			PCE_CmdState.cSUB_PAPERENTRYDelay:
				IF me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.uinPaperEntryDelayTime_ms THEN
					me.SubStateMachine.intStateNext := PCE_CmdState.cSUB_PAPEREXIT;
				END_IF
			PCE_CmdState.cSUB_PAPEREXIT:
				PaperExitValveActive();

				IF NOT SIf.In.bolPaperAvailable.intern THEN
					me.SubStateMachine.intStateNext := PCE_CmdState.cSUB_PAPERENTRY;
				END_IF
				
				IF me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.uinPaperExitTime_ms THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PCE.PaperSensorError),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
				END_IF
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="0fec2fc7-2d33-449b-952a-564156cf70da">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="23afa553-0fc4-4cd5-8230-8fe04d0a7263">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolVacuumValveIn));
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolVacuumValveOut));

	THIS^.Out_bolVacuumValveIn := SIf.Out.bolVacuumValveIn.map;
	THIS^.Out_bolVacuumValveOut := SIf.Out.bolVacuumValveOut.map;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="387abafe-89c8-47bf-a231-68d7a321f196">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CtrlInit();

pMotorInCIf := p_fbMotorIn^.CtrlCIf;
pMotorOutCIf := p_fbMotorOut^.CtrlCIf;

AddChild(p_fbMotorIn^);
AddChild(p_fbMotorOut^);
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="43b92eab-1a74-4406-b5b6-eee25283ac3c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		p_fbMotorIn^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
		p_fbMotorOut^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="4e86f430-473b-4029-a8d4-bcc12fbbf9ef">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory&lt;=BASE_PLC.cSTA_PON) THEN
				me.StateMachine.intStateNext := BASE_PLC.cSTA_PONBusy;
			END_IF;

			CASE me.intCmd OF
				BASE_PLC.cCMD_OFF:
					me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
				BASE_PLC.cCMD_RUN:
					me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
			ELSE
				CASE me.StateMachine.intStateHistory OF
					BASE_PLC.cSTA_RUN:
						me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
					BASE_PLC.cSTA_OFF:
						me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
					BASE_PLC.cSTA_STOP:
						me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
				END_CASE
			END_CASE
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="514f0bd3-a77d-444f-aa66-ac5421ca0c93">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf.In.bolPaperAvailable.map := THIS^.In_bolPaperAvailable;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPaperAvailable));
ELSE
	;//simulation of global IO
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="68549a43-8f3c-46c0-88e9-4b8b2c11d738">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		p_fbMotorIn^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		p_fbMotorOut^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		SIf.Out.bolVacuumValveIn.intern := FALSE;		
		SIf.Out.bolVacuumValveOut.intern := FALSE;		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF p_fbMotorIn^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_OFF 
		  AND p_fbMotorOut^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_OFF THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="7385f6d9-115b-4a01-a0b2-2988f9a09e5a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF me.intCmd = BASE_PLC.cCMD_RUN THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="93e21abe-e0d0-4102-9a53-8ecf8bcd85b6">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		p_fbMotorIn^.CtrlCIf^.Job.intACmd :=BASE_PLC.cCMD_RUN;
		p_fbMotorOut^.CtrlCIf^.Job.intACmd :=BASE_PLC.cCMD_RUN;
		
		IF SIf.In.bolPaperAvailable.intern THEN
			PaperExitValveActive();
		ELSE
			PaperInputValveActive();
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (p_fbMotorIn^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_RUN) 
		  AND (p_fbMotorOut^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_RUN) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
		END_IF

		IF me.intCmd = BASE_PLC.cCMD_STOP THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOP" ObjectId="a80829eb-cce3-43ab-b021-8c690cb7b935">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOP" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF me.intCmd = BASE_PLC.cCMD_RUN THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="aeb9935e-08bd-483a-ac88-c1417761b0ed">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	; // always error supervision
	
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF) OR (me.intCmd=BASE_PLC.cCMD_EOFF))
		 AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) AND
		(me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="b1ee4999-7c58-4771-8d2e-3c2b426ff35b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    BASE_PLC.cSTA_RUN: 
        THIS^.sta_RUN();
    BASE_PLC.cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
    BASE_PLC.cSTA_STOP: 
        THIS^.sta_STOP();
    BASE_PLC.cSTA_STOPBusy: 
        THIS^.sta_STOPBusy();
END_CASE;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="b591f551-ab59-403b-868a-a874b4abbbc3">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'Run'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_STOP;
	CIf.Job.aCmdList[iIdx].strName := 'Stop'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_PCE';
CIf.Info.strFullName := 'Paper Corner Element';

// set alarm class

SIf.Alm[E_ALM_PCE.PaperSensorError].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_PCE.PaperSensorError].strText := 'Paper detected to long' ;


//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parameter
SIf.Par.uinPaperExitTime_ms			:= 3000;
SIf.Par.uinSimPaperExitTime_ms		:= SIf.Par.uinPaperExitTime_ms / 2;
SIf.Par.uinPaperEntryDelayTime_ms   := 220;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="d7e44b5c-69a6-42a3-8b01-0842a83109a4">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_PCE" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="f1f785fe-f693-44ff-9901-c94758bcbfdd">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		;
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOPBusy" ObjectId="fd0a33b5-de2d-4135-971c-e51fe1c481b0">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOPBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		p_fbMotorIn^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
		p_fbMotorOut^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF p_fbMotorIn^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_STOP 
		  AND p_fbMotorOut^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_STOP  THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_STOP;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="DriveOut" ObjectId="035deb5d-95b3-4262-bc5e-78a89e49ce73">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_PTB" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">DriveOut := p_fbMotorOut;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbMotorOut := DriveOut;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="0bd066fc-5211-4c2e-8575-3afaf461be8b">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_PCE" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="DriveIn" ObjectId="f24a8ae5-3ac7-443a-b59c-2cc3fe23592b">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_PTB" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">DriveIn := p_fbMotorIn;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbMotorIn := DriveIn;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>4fd21a2c-bb8c-40f2-b8bb-db801457e1c0</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_PST" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_uinBarcodeEvent">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="In_ulnBarcode">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="In_bolSensorPaperAtOperatorPos">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolSensorStopperPosition">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolSensorInfeed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolSensorOutfeed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_PST" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="p_fbBelt">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PTB" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper stacker belt</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pBeltCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pBeltSif">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_SIf_PTB" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="bolSensorInfeedOld">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Variables for edge detection</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSensorOutfeedOld">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="uinStackHightOld">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="stBarcodeData">
                    <type>
                      <derived name="T_BCC_Data" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tmp. Barcode reader data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinRetryCounter">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Retry counter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimTimerPaperInfeedStroke">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Simulation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="p_fbPaperStackFifo">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_DataChannelSenderFifo" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Data Channel to saber for paper stack info</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
...

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		23.06.2014		AVME/DSC	Start history
___________________________________________________________________________________________________*)


SUPER^();
</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="02adbe50-8f28-4fec-bdbf-17b6f8690f6e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	// Simulation
	// --------------------------------------------
	IF (CIf.SwCfg.bolSimulation) THEN
		// Simulate a new paper at infeed
		IF (me.StateMachine.intState = Base_PLC.cSTA_RUN) AND (me.SubStateMachine.intState = PST_CmdState.cSUB_WAITNEWPAPERDETECTED) AND (me.StateMachine.intState &lt;&gt; PST_CmdState.cSTA_EJECTbusy) THEN
			IF (udiSimTimerPaperInfeedStroke &gt;= SIf.Par.udiSimTimePaperInfeedStroke_ms) THEN
				SIf.In.bolSensorInfeed.intern:= TRUE;
			END_IF
		ELSE
			udiSimTimerPaperInfeedStroke:= 0;
			SIf.In.bolSensorInfeed.intern:= FALSE;		
		END_IF			
		// Timer handling
		udiSimTimerPaperInfeedStroke:= udiSimTimerPaperInfeedStroke + me.FUBInfo.udiSample_ms;
	ELSE
		udiSimTimerPaperInfeedStroke:= 0;
	END_IF
	
	
	// Single paper infeed counting
	// --------------------------------------------
	// Inc. stack hight with every pos. edge of infeed sensor 
	IF (SIf.In.bolSensorInfeed.intern) AND NOT (bolSensorInfeedOld) THEN
		SIf.Cur.uinStackHight:= SIf.Cur.uinStackHight + 1;
	END_IF
	bolSensorInfeedOld:= SIf.In.bolSensorInfeed.intern;
			
	// Monitoring of special error conditions
	// --------------------------------------------
	
	// If a new paper is detected at the feeding during the ejection -&gt; Alarm!
	IF (me.StateMachine.intState = PST_CmdState.cSTA_EJECTbusy) THEN
		// New paper detected/counted 
		IF (SIf.Cur.uinStackHight &lt;&gt; uinStackHightOld) AND NOT (SIf.Cur.bolStackIncomplete) THEN
			SIf.Cur.bolStackIncomplete:= TRUE;
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_PST.NewPaperDetectedDuringEjecting,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		END_IF	
	END_IF	
	
	// If a new paper is detected at the feeding while barcode reading process -&gt; Alarm!				
	IF (me.StateMachine.intState = Base_PLC.cSTA_RUN) AND (me.SubStateMachine.intState &lt;&gt; PST_CmdState.cSUB_WAITNEWPAPERDETECTED) THEN
		// New paper detected/counted 
		IF (SIf.Cur.uinStackHight &lt;&gt; uinStackHightOld) AND NOT (SIf.Cur.bolStackIncomplete) THEN
			SIf.Cur.bolStackIncomplete:= TRUE;
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_PST.NewPaperDetectedWhileBarcodeReading,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		END_IF
	END_IF
			
END_IF

// ----------------------------------------------------------------------------------
// Always change actions in Base Library
// ----------------------------------------------------------------------------------
// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF

// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF))
		 AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) AND
		(me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy) AND (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="0502dbf8-20f9-4117-9703-ff079cb92cdf">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		CIf.Job.intACmd:= Base_PLC.cCMD_DONE;
		CIf.Job.intMCmd:= Base_PLC.cCMD_DONE;
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		CASE me.intCmd OF
			
			// Command RUN	
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
				
			// Command EJECT	
			PST_CmdState.cCMD_EJECT:
				me.StateMachine.intStateNext := PST_CmdState.cSTA_EJECTbusy;
				
		END_CASE

	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="0c9bebeb-261c-42ce-a825-4fdd856d80d2">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    BASE_PLC.cSTA_RUN: 
        THIS^.sta_RUN();
    BASE_PLC.cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
	PST_CmdState.cSTA_EJECTbusy:
        THIS^.sta_EJECTBusy();
END_CASE;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="25b53e86-9014-49d6-a156-cfd766df56aa">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf.In.bolSensorPaperAtOperatorPos.map := THIS^.In_bolSensorPaperAtOperatorPos;
SIf.In.bolSensorStopperPosition.map := THIS^.In_bolSensorStopperPosition;
SIf.In.bolSensorInfeed.map := THIS^.In_bolSensorInfeed;
SIf.In.bolSensorOutfeed.map := THIS^.In_bolSensorOutfeed;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBolDebounced(CIf.Job.bolIoForce,me.FUBInfo.udiSample_ms, sif.Par.udiPaperAtOpPosDebounceTime_ms,  ADR(SIf.In.bolSensorPaperAtOperatorPos));
	getInBolDebounced(CIf.Job.bolIoForce,me.FUBInfo.udiSample_ms, sif.Par.udiStopperPosDebounceTime_ms,  ADR(SIf.In.bolSensorStopperPosition));	
	getInBolDebounced(CIf.Job.bolIoForce,me.FUBInfo.udiSample_ms, sif.Par.udiSensorOutfeedDebounceTime_ms, ADR(SIf.In.bolSensorOutfeed));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolSensorInfeed));
ELSE
	;//simulation of global IO
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="2819f36e-4401-40c0-a2d2-886f7acb3f3a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="pItemPaperInfo">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_ItemPaperInfo" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	// Initialize sub state machine
	me.SubStateMachine.intState:= PST_CmdState.cSUB_WAITNEWPAPERDETECTED; 
	me.SubStateMachine.intStateNext:= PST_CmdState.cSUB_WAITNEWPAPERDETECTED;	
END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
	
	// -------------------------------------------------------------------------------
	// Sub state machine for reading barcode and make decision for ejecting the stack
	// -------------------------------------------------------------------------------
	CASE me.SubStateMachine.intState OF
	
		// Wait until new paper was detected at stacker infeed position
		PST_CmdState.cSUB_WAITNEWPAPERDETECTED:
		
			// New paper detected/counted 
			IF (SIf.Cur.uinStackHight &lt;&gt; uinStackHightOld) THEN
				uinStackHightOld:= SIf.Cur.uinStackHight;
				
				IF SIf.Cfg.bolEnablePstEjectControl THEN
					me.SubStateMachine.intStateNext := PST_CmdState.cSUB_CHECKEJECTCONDITIONS;
				END_IF
			END_IF
		
			CASE me.intCmd OF
				// Command EJECT	
				PST_CmdState.cCMD_EJECT:
					me.StateMachine.intStateNext := PST_CmdState.cSTA_EJECTbusy;
			END_CASE

		// Check the eject conditions after successful read
		PST_CmdState.cSUB_CHECKEJECTCONDITIONS:
		
			// Check if the stack hight is reached and last barcode ID is right
			IF (SIf.Cur.uinStackHight = SIf.Par.uinStackHight) AND (stBarcodeData.uliBarCode = SIf.Par.uliLastBarCodeInStack) THEN
				// Stack complete!
				// New job can be sent by saber!
//				SIf.Par.uinStackHight:= 0;
				SIf.Par.uliLastBarCodeInStack:= 0;
				// Done -&gt; EJECT stack
				me.SubStateMachine.intStateNext := PST_CmdState.cSUB_DONE;
			ELSE
				// Stack not complete -&gt; wait for next paper
				me.SubStateMachine.intStateNext := PST_CmdState.cSUB_WAITNEWPAPERDETECTED;
			END_IF
		
			// Error conditions
			// -------------------------
			
			// Stack hight is reached but last barcode ID is not right!
			IF (SIf.Cur.uinStackHight = SIf.Par.uinStackHight) AND (stBarcodeData.uliBarCode &lt;&gt; SIf.Par.uliLastBarCodeInStack) THEN				
				SIf.Cur.bolStackIncomplete:= TRUE;
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_PST.StackOkButLastCodeNotRight,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
		
			// Stack hight is not reached but last barcode ID is right!
			IF (SIf.Cur.uinStackHight &lt;&gt; SIf.Par.uinStackHight) AND (stBarcodeData.uliBarCode = SIf.Par.uliLastBarCodeInStack) THEN
				SIf.Cur.bolStackIncomplete:= TRUE;
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_PST.StackNotOkButLastCodeRight,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF

		// All done
		PST_CmdState.cSUB_DONE:
			me.StateMachine.intStateNext := PST_CmdState.cSTA_EJECTbusy;	
			
	END_CASE	

END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="3823c242-0675-4620-ae8e-dedee287a1e5">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		CASE intCmdState OF
			PST_CmdState.cCMD_EJECT:
				getCmdState := 'EJECT';
		END_CASE;
	ELSE
		// States's
		CASE intCmdState OF
			PST_CmdState.cSTA_EJECTbusy: 
				getCmdState := 'EJECTbusy';
			
			// sub states	
			PST_CmdState.cSUB_WAITNEWPAPERDETECTED: 
				getCmdState := 'WAITNEWPAPERDETECTED';	
			PST_CmdState.cSUB_DELAYREADBARCODEBusy: 
				getCmdState := 'DELAYREADBARCODEBusy';	
			PST_CmdState.cSUB_RETRYREADBARCODE: 
				getCmdState := 'RETRYREADBARCODE';	
			PST_CmdState.cSUB_READBARCODEbusy: 
				getCmdState := 'READBARCODEbusy';	
			PST_CmdState.cSUB_CHECKEJECTCONDITIONS: 
				getCmdState := 'CHECKEJECTCONDITIONS';	
			
			PST_CmdState.cSUB_DELAYSTACKEJECTBusy: 
				getCmdState := 'DELAYSTACKEJECTBusy';	
			PST_CmdState.cSUB_MOVEBELTEJECTDIRECTIONBusy: 
				getCmdState := 'MOVEBELTEJECTDIRECTIONBusy';	
			PST_CmdState.cSUB_STOPBELTBusy: 
				getCmdState := 'STOPBELTBusy';	
			PST_CmdState.cSUB_WAITBEFOREMOVINGREVERSE: 
				getCmdState := 'WAITBEFOREMOVINGREVERSE';	
			PST_CmdState.cSUB_MOVEBELTREVERSEBusy: 
				getCmdState := 'MOVEBELTREVERSEBusy';		
										
			PST_CmdState.cSUB_DONE: 
				getCmdState := 'DONE';	
		END_CASE;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="46ae3c8b-2056-4bef-a480-b5afe2859c54">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
		IF (p_fbPaperStackFifo &lt;&gt; TC3_MEMMAN.NULL) THEN
			// Enable data channel
			p_fbPaperStackFifo^.Enable := SIf.Cfg.bolEnableDataChannel;
			// Clear buffer
			p_fbPaperStackFifo^.ClearFifo();
		END_IF
		
		// Childs off
		p_fbBelt^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
	
		// In case of an OFF command or alarm, check if the stack is incomplete. 
		// Only check if min. stack hight of 1 paper is set by saber
		IF ((SIf.Cur.uinStackHight &lt;&gt; SIf.Par.uinStackHight) AND (SIf.Par.uinStackHight &gt;= 1) AND NOT (SIf.Cur.bolStackIncomplete)) OR NOT SIf.In.bolSensorStopperPosition.intern THEN
			// Stack incomplete! Saber has to send an eject command before next RUN.
			SIf.Cur.bolStackIncomplete:= TRUE;
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_PST.StackIncomplete,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		ELSE
			// ... do nothing, normal scenario!		
		END_IF
	
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		IF (p_fbBelt^.CtrlCIf^.Job.intState = BASE_PLC.cSTA_OFF)  THEN 
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
		END_IF	
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EJECTBusy" ObjectId="4881b1de-4f65-48cf-aaa1-07c89ae3b9ba">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EJECTBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		CIf.Job.intACmd:= Base_PLC.cCMD_DONE;
		CIf.Job.intMCmd:= Base_PLC.cCMD_DONE;

		SIf.Cur.bolStackIncomplete:= TRUE;
		
		// Initialize sub state machine
		me.SubStateMachine.intState:= PST_CmdState.cSUB_DELAYSTACKEJECTBusy; 
		me.SubStateMachine.intStateNext:= PST_CmdState.cSUB_DELAYSTACKEJECTBusy;	
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
			
		// ---------------------------------------------------------
		// Sub state machine for handling ejecting the paper stack
		// ---------------------------------------------------------
		CASE me.SubStateMachine.intState OF
		
			// Wait before moving in eject direction
			PST_CmdState.cSUB_DELAYSTACKEJECTBusy:
				// Entry action
				IF (me.SubStateMachine.intState&lt;&gt;me.SubStateMachine.intStateLastCycle) THEN
					me.SubStateMachine.intStateLastCycle := me.SubStateMachine.intState;		
				END_IF
			
				// Wait X time before starting the belt
				IF (me.SubStateMachine.udiTimeInState_ms &gt;= SIf.Par.udiStackEjectDelayTime_ms) THEN
					// Start the belt
					pBeltSif^.Par.intDirection := SIf.Cfg.usiEjectingDirection;
					pBeltSif^.Par.rBeltParam.uinBeltSpeed:= SIf.Par.uinBeltEjectSpeed_mmsec;					
					p_fbBelt^.CIf.Job.intACmd:= cCMD_RUN;
					me.SubStateMachine.intStateNext := PST_CmdState.cSUB_MOVEBELTEJECTDIRECTIONBusy;	
				END_IF
				
			// Belt is moving in eject direction
			PST_CmdState.cSUB_MOVEBELTEJECTDIRECTIONBusy:
				// Entry action
				IF (me.SubStateMachine.intState&lt;&gt;me.SubStateMachine.intStateLastCycle) THEN
					me.SubStateMachine.intStateLastCycle := me.SubStateMachine.intState;		
				END_IF
				
				// Simulation
				// --------------------------------------------
				IF (CIf.SwCfg.bolSimulation) THEN
					// stopper is in down position
					SIf.In.bolSensorStopperPosition.intern:= FALSE;
				END_IF
		
				// Wait until stack ejecting time expired and stopper is in down position
				IF (me.SubStateMachine.udiTimeInState_ms &gt;= SIf.Par.udiStackEjectingTime_ms) AND (NOT SIf.In.bolSensorStopperPosition.intern) THEN
					// Wait until paper stack has left outfeed sensor position
					IF NOT (SIf.In.bolSensorOutfeed.intern) THEN
						// Stop belt
						p_fbBelt^.Cif.Job.intACmd:= cCMD_STOP;
						me.SubStateMachine.intStateNext := PST_CmdState.cSUB_STOPBELTBusy;
					END_IF	
				END_IF
		
			// Wait before moving in reverse direction
			PST_CmdState.cSUB_WAITBEFOREMOVINGREVERSE:
				// Entry action
				IF (me.SubStateMachine.intState&lt;&gt;me.SubStateMachine.intStateLastCycle) THEN
					me.SubStateMachine.intStateLastCycle := me.SubStateMachine.intState;		
				END_IF
				
				// Wait X time before starting the belt in reverse direction
				IF (me.SubStateMachine.udiTimeInState_ms &gt;= SIf.Par.udiBeltReverseDelayTime_ms) THEN
					// Start the belt
					pBeltSif^.Par.intDirection := SIf.Cfg.usiReverseDirection;
					pBeltSif^.Par.rBeltParam.uinBeltSpeed:= SIf.Par.uinBeltReverseSpeed_mmsec;
					p_fbBelt^.Cif.Job.intACmd:= cCMD_RUN;
					me.SubStateMachine.intStateNext := PST_CmdState.cSUB_MOVEBELTREVERSEBusy;	
				END_IF
				
			// Belt is moving in reverse direction
			PST_CmdState.cSUB_MOVEBELTREVERSEBusy:
				// Entry action
				IF (me.SubStateMachine.intState&lt;&gt;me.SubStateMachine.intStateLastCycle) THEN
					me.SubStateMachine.intStateLastCycle := me.SubStateMachine.intState;		
				END_IF
				
				// Simulation
				// --------------------------------------------
				IF (CIf.SwCfg.bolSimulation) THEN
					// stopper is in down position
					SIf.In.bolSensorStopperPosition.intern:= TRUE;
				END_IF
			
				// Wait until stopper is in up position
				IF (SIf.In.bolSensorStopperPosition.intern) THEN
					// Stop belt
					p_fbBelt^.Cif.Job.intACmd:= cCMD_STOP;
					me.SubStateMachine.intStateNext := PST_CmdState.cSUB_STOPBELTBusy;	
				END_IF
					
			// Stop belt busy
			PST_CmdState.cSUB_STOPBELTBusy:
				
				// Wait until belt stopped
				IF (p_fbBelt^.Cif.Job.intState = Base_PLC.cSTA_STOP) THEN
					// Decision dependent last cycle state
					IF (me.SubStateMachine.intStateLastCycle = PST_CmdState.cSUB_MOVEBELTEJECTDIRECTIONBusy) THEN
						// Go on with wait before moving reverse
						me.SubStateMachine.intStateNext := PST_CmdState.cSUB_WAITBEFOREMOVINGREVERSE;
					ELSE	
						// Done
						me.SubStateMachine.intStateNext := PST_CmdState.cSUB_DONE;
					END_IF
				END_IF
				
			// All done
			PST_CmdState.cSUB_DONE:
				// Entry action
				IF (me.SubStateMachine.intState&lt;&gt;me.SubStateMachine.intStateLastCycle) THEN
					me.SubStateMachine.intStateLastCycle := me.SubStateMachine.intState;		
				END_IF

				SIf.Cur.bolStackIncomplete:= FALSE;
				SIf.Par.uinStackHight:= 0;
				// Update counter stacks ejected total
				SIf.Cur.udiNumOfStacksEjectedTotal:= SIf.Cur.udiNumOfStacksEjectedTotal + 1;
				// Back to RUN!
				me.StateMachine.intStateNext := Base_PLC.cSTA_RUNBusy;	
				
		END_CASE	
	
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="73e3e1ff-7e5b-4a2f-be8b-55b712b80a98">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_PST" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="83e3bb31-e4dc-4af4-878f-f9306253a81b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CtrlInit();

pBeltCIf := p_fbBelt^.CtrlCIf;
pBeltSIf := p_fbBelt^.getCtrlSIf();

AddChild(p_fbBelt^);

// Initialize stack buffer
IF (p_fbPaperStackFifo &lt;&gt; TC3_MEMMAN.NULL) THEN
	p_fbPaperStackFifo^.FreeDataPointer := TRUE;
	p_fbPaperStackFifo^.Enable := TRUE;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="b026e36e-9104-4b3f-ac49-5f4acb583f92">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		CIf.Job.intACmd:= Base_PLC.cCMD_DONE;
		CIf.Job.intMCmd:= Base_PLC.cCMD_DONE;
		// Clear stack hight
		SIf.Cur.uinStackHight:= 0;
		uinStackHightOld:= 0;		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		IF SIf.Cur.bolStackIncomplete THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_PST.NeedsEjectCommand,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := PST_CmdState.cSTA_EJECTbusy;
		ELSE
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="cec5de92-8e9c-41e7-97fc-a80349787823">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'RUN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := PST_CmdState.cCMD_EJECT;
	CIf.Job.aCmdList[iIdx].strName := 'EJECT'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_PST';
CIf.Info.strFullName := 'Paper Stacker';

// set alarm class

SIf.Alm[E_ALM_PST.StackIncomplete].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_PST.StackIncomplete].strText := 'Stack incomplete. Stacker was sent to OFF before finishing the job!';
SIf.Alm[E_ALM_PST.NeedsEjectCommand].eAlmClass := Base_PLC.E_AlmClass.WARNING;
SIf.Alm[E_ALM_PST.NeedsEjectCommand].strText := 'Last job was incomplete. Stacker waits for an eject command!';
SIf.Alm[E_ALM_PST.StackOkButLastCodeNotRight].eAlmClass := Base_PLC.E_AlmClass.OFF;
SIf.Alm[E_ALM_PST.StackOkButLastCodeNotRight].strText := 'Stack hight is reached but last barcode ID is not right!';
SIf.Alm[E_ALM_PST.StackNotOkButLastCodeRight].eAlmClass := Base_PLC.E_AlmClass.OFF;
SIf.Alm[E_ALM_PST.StackNotOkButLastCodeRight].strText := 'Stack hight is not reached but last barcode ID is right!';
SIf.Alm[E_ALM_PST.ReadingBarcodeFailedAfterXRetries].eAlmClass := Base_PLC.E_AlmClass.OFF;
SIf.Alm[E_ALM_PST.ReadingBarcodeFailedAfterXRetries].strText := 'Reading barcode failed after X retries!';
SIf.Alm[E_ALM_PST.NewPaperDetectedDuringEjecting].eAlmClass := Base_PLC.E_AlmClass.OFF;
SIf.Alm[E_ALM_PST.NewPaperDetectedDuringEjecting].strText := 'New paper detected during ejecting is in process!';
SIf.Alm[E_ALM_PST.NewPaperDetectedWhileBarcodeReading].eAlmClass := Base_PLC.E_AlmClass.OFF;
SIf.Alm[E_ALM_PST.NewPaperDetectedWhileBarcodeReading].strText := 'New paper detected while barcode reading is in process!';

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// Configuration
SIf.Cfg.bolEnableDataChannel:= FALSE;
SIf.Cfg.uinNumOfRetryRead:= 3;
SIf.Cfg.usiEjectingDirection:= E_BELT_DIRECTION.FORWARD; // Right
SIf.Cfg.usiReverseDirection:= E_BELT_DIRECTION.BACKWARD; // Left
SIf.Cfg.bolEnablePstEjectControl := FALSE;

// parameter
SIf.Par.uinStackHight:= 0;
SIf.Par.uliLastBarCodeInStack:= 0;

SIf.Par.uinBeltReverseSpeed_mmsec:= 250; 
SIf.Par.uinBeltEjectSpeed_mmsec:= 300;
SIf.Par.udiPaperAtOpPosDebounceTime_ms:= 1000;
SIf.Par.udiStopperPosDebounceTime_ms:= 1000;
SIf.Par.udiSensorOutfeedDebounceTime_ms:= 1000;
SIf.Par.udiStackEjectDelayTime_ms:= 1000;
SIf.Par.udiBeltReverseDelayTime_ms:= 1000;
SIf.Par.udiStackEjectingTime_ms:= 4000;
SIf.Par.udiBarcodeReaderTriggerDelayTime_ms:= 1500;
SIf.Par.udiSimTimePaperInfeedStroke_ms:= 5000;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="0c1cfe45-643d-4c44-8edd-0ab32bb0d8ca">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_PST" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="Belt" ObjectId="95ad694d-5961-4efd-baa0-b4236677284f">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_PTB" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">Belt := p_fbBelt;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbBelt := Belt;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="PaperStackSendFifo" ObjectId="d90bdce1-ef31-43d2-a23a-6138aee95c37">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_DataChannelSenderFifo" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbPaperStackFifo := PaperStackSendFifo;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>177fde74-8095-4d5b-83ca-4788bd6cdc14</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_PTS" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bol_PaperAvailable">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bol_PaperAtBeltExit">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_PTS" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="p_fbBelt">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PTB" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to function block</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pBeltCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="BASE_PLC.T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="p_fbMalteser">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MDC" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMalteserCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="BASE_PLC.T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="p_fbRAX">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_RAX" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rotary Axis instead of Malteser</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pRaxCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="BASE_PLC.T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rotary Axis instead of Malteser</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPrePositionBusy">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="intActualPosition">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="intTargetPosition">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="uinPositionToGo">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Position to go to if comand turn is given. 0 = initialization position, 1, 2, 3</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intTurnDirection">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> &lt;0 = Turn left; =0 automatic; &gt;0 turn right</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Destacker/Buffer implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		PC			Start history
0.00.2		24.09.2014		AVME/MRU	Servo instead of MCD added
0.00.3		19.11.2014		AVME/MRU	Changes after Commissioning
0.00.4		12.12.2014		AVME/MRU	Connect Input of HomeSensor
0.00.5		16.12.2014		AVME/MRU	Add long term test
___________________________________________________________________________________________________*)


IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();

		CycleEndDuty();
	END_IF
END_IF;
</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="07fa2a9a-5cf1-4304-820c-dcfd32c717c1">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf.In.bolPaperAvailable.map			:= NOT THIS^.In_bol_PaperAvailable;
SIf.In.bolPaperAtBeltExit.map			:= THIS^.In_bol_PaperAtBeltExit;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPaperAvailable));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPaperAtBeltExit));
ELSE
	SIf.In.bolPaperAvailable.map		:= FALSE;
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPaperAvailable));
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_WaitPaper" ObjectId="0e7414cf-d0dd-4b81-b8be-f72855b24544">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_WaitPaper" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
//		Log Message ---------------------
//		TC2_SYSTEM.ADSLOGSTR(ADSLOG_MSGTYPE_LOG,'%s','sta_WaitPaper');
//		---------------------------------
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		IF ((me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiPaperBarcodeToInputSensorTime) AND (SIf.Cfg.bolEntrySensorAvailable)) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.PaperTransport),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
		END_IF
		
		IF (SIf.In.bolPaperAvailable.intern)  THEN
			IF SIf.Par.udiPaperInTurnDelayTime = 0 THEN
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_TurnPaperBusy;
			ELSE	
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_PaperDelayBusy;
			END_IF
		END_IF
		
		IF (SIf.Par.bolLongTimeTestEnable) THEN							// Long time test of PTS
			me.StateMachine.intStateNext := PTS_CmdState.cSTA_PaperDelayBusy;	
			udiPTS_Counter_Persistent := udiPTS_Counter_Persistent + 1;	// Persistent Counter
		END_IF
		
		CASE me.intCmd OF
			PTS_CmdState.cCMD_STANDBY:
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_InitializeBusy;
			Base_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := Base_PLC.cSTA_STOPBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOPbusy" ObjectId="1e8226ab-a796-4450-b0cc-a69381437714">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOPbusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		//pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
		pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (pBeltCIf^.Job.intState = BASE_PLC.cSTA_OFF) OR (pBeltCIf^.Job.intState = BASE_PLC.cSTA_STOP) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_STOP;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="381a9ccd-3a98-40f6-a6fb-a7765f4ac8c3">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	; // always error supervision
	
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF) OR (me.intCmd=BASE_PLC.cCMD_EOFF))
		 AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) AND
		(me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF

IF SIf.Cfg.bolRaxEnable THEN
	IF pRaxCIf = NULL THEN
		SIf.Cfg.bolRaxEnable := FALSE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.TurnTableConfigMissmatch),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	END_IF
ELSE
	IF pMalteserCIf = NULL THEN
		SIf.Cfg.bolRaxEnable := TRUE;
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.TurnTableConfigMissmatch),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	END_IF
END_IF

SIf.Cur.udiPTS_Counter := udiPTS_Counter_Persistent;		// Update SIf.Cur Variable
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOP" ObjectId="382ba73c-aba8-402d-b897-f2f986d6d285">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOP" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
		CIf.Job.intMCmd := BASE_PLC.cCMD_DONE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="ChangeDistributionModeParameter" ObjectId="3a1c3596-39d4-450d-8741-8f9f36bb6cf5">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="eMode">
                          <type>
                            <derived name="E_PTS_MODE" />
                          </type>
                        </variable>
                        <variable name="uinBeltSpeed">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="uinRotationSpeed">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="ChangeDistributionModeParameter" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.Par.eMode := eMode;
p_fbBelt^.CtrlSIf^.Par.rBeltParam.uinBeltSpeed := uinBeltSpeed;		
IF (SIf.Cfg.bolRaxEnable) THEN
	p_fbRAX^.CtrlSIf^.Par.dinSpeed_0_1deg_s := uinRotationSpeed;
ELSE
	p_fbMalteser^.Drive^.CtrlSIf^.Par.uinSpeed_rpm := uinRotationSpeed;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_TurnPaperBusy" ObjectId="47d5f644-c3ba-4ffc-9f61-ec41e3b5e681">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_TurnPaperBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
//		Log Message ---------------------
//		TC2_SYSTEM.ADSLOGSTR(ADSLOG_MSGTYPE_LOG,'%s','sta_TurnPaperBusy');
//		---------------------------------
		(*p_fbMalteser^.CtrlSIf^.Par.*)intTurnDirection := SIf.Cur.rInOutPosition.eDirection;
		(*p_fbMalteser^.CtrlSIf^.Par.*)uinPositionToGo := SIf.Cur.rInOutPosition.uinOutput;
		
		IF (SIf.Cfg.bolRaxEnable) THEN
			IF (SIf.Cur.rInOutPosition.uinOutput*90*10 = p_fbRAX^.CtrlSIf^.Cur.dinModPosition_0_1deg) THEN
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_WaitPaperGone;
			ELSE	
				p_fbRAX^.CtrlCIf^.Job.intACmd := RAX_CmdState.cCMD_TURN;
				me.SubStateMachine.intState := PTS_CmdState.cSUB_TURNbusy;
				me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNbusy;
			END_IF
		ELSE
			IF SIf.Cur.rInOutPosition.uinOutput = p_fbMalteser^.CtrlSIf^.Cur.uintActualPosition THEN
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_WaitPaperGone;
			ELSE	
				p_fbMalteser^.CtrlCIf^.Job.intACmd := MDC_CmdState.cCMD_TURN;
				me.SubStateMachine.intState := PTS_CmdState.cSUB_TURNbusy;
				me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNbusy;
			END_IF
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		//--------------------------------------------------------------------------------------
		IF (SIf.Cfg.bolRaxEnable) THEN
			// sub state machine for sequence
			CASE me.SubStateMachine.intState OF
				//--------------------------------------------------------------------------------------
				PTS_CmdState.cSUB_TURNbusy:
					IF (p_fbRAX^.CtrlCIf^.Job.intState = RAX_CmdState.cSTA_TURN) THEN
						p_fbRAX^.CtrlCIf^.Job.intACmd := cCMD_STOP;
						me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNDONE;
					END_IF
				//--------------------------------------------------------------------------------------
				PTS_CmdState.cSUB_TURNDONE:
					IF (p_fbRAX^.CtrlCIf^.Job.intState = cStA_Stop) THEN
						me.StateMachine.intStateNext := PTS_CmdState.cSTA_WaitPaperGone;
					END_IF
			END_CASE
		ELSE
			CASE me.SubStateMachine.intState OF
				//--------------------------------------------------------------------------------------
				PTS_CmdState.cSUB_TURNbusy:
					IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_TURNDONE) THEN
						p_fbMalteser^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
						me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNDONE;
					END_IF
				//--------------------------------------------------------------------------------------
				PTS_CmdState.cSUB_TURNDONE:
					IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) THEN
						me.StateMachine.intStateNext := PTS_CmdState.cSTA_WaitPaperGone;
					END_IF
			END_CASE
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="4a4e8c3a-10d7-4566-8587-98d593354e84">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    PTS_CmdState.cSTA_STANDBYBusy: 
        THIS^.sta_STANDBYBusy();
    PTS_CmdState.cSTA_STANDBY: 
        THIS^.sta_STANDBY();
    BASE_PLC.cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
    BASE_PLC.cSTA_RUN: 
        THIS^.sta_RUN();
    BASE_PLC.cSTA_STOPBusy: 
        THIS^.sta_STOPBusy();
    BASE_PLC.cSTA_STOP: 
        THIS^.sta_STOP();
    PTS_CmdState.cSTA_PaperDelayBusy: 
        THIS^.sta_PaperDelayBusy();
    PTS_CmdState.cSTA_TurnPaperBusy: 
        THIS^.sta_TurnPaperBusy();
    PTS_CmdState.cSTA_WaitPaperGone: 
        THIS^.sta_WaitPaperGone();
    PTS_CmdState.cSTA_TurnEmptyBusy: 
        THIS^.sta_TurnEmptyBusy();
    PTS_CmdState.cSTA_InitializeBusy: 
        THIS^.sta_InitializeBusy();
    PTS_CmdState.cSTA_WaitPaper: 
        THIS^.sta_WaitPaper();
    PTS_CmdState.cSTA_GetItemBusy: 
        THIS^.sta_GetItemBusy();
END_CASE;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="4c084565-49f2-4582-83bc-98b4408003f3">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		IF (SIf.Cfg.bolRaxEnable) THEN
			pRaxCIf^.Job.intACmd := cCMD_OFF;
		ELSE
			pMalteserCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		END_IF
		SIf.Cur.iActualDistributionIndex := 0;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (SIf.Cfg.bolRaxEnable) THEN
			IF (pBeltCIf^.Job.intState = BASE_PLC.cSTA_OFF) AND (pRaxCIf^.Job.intState = BASE_PLC.cSTA_OFF) THEN
				me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
			END_IF
		ELSE			
			IF (pBeltCIf^.Job.intState = BASE_PLC.cSTA_OFF) AND (pMalteserCIf^.Job.intState = BASE_PLC.cSTA_OFF) THEN
				me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
			END_IF
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="50e652e7-733a-43d7-a9db-3119c16717fe">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'RUN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_STOP;
	CIf.Job.aCmdList[iIdx].strName := 'STOP'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := PTS_CmdState.cCMD_STANDBY;
	CIf.Job.aCmdList[iIdx].strName := 'STANDBY'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := PTS_CmdState.cCMD_TURN;
	CIf.Job.aCmdList[iIdx].strName := 'TURN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_PTS'; 
CIf.Info.strFullName := 'Paper Turning Station';

// set alarm class
SIf.Alm[E_ALM_PTS.PaperTransport].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_PTS.PaperTransport].strText := 'Possible Paper Jam';
SIf.Alm[E_ALM_PTS.ModeParameter].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_PTS.ModeParameter].strText := 'Wrong Mode Parameter';
SIf.Alm[E_ALM_PTS.TurnTableConfigMissmatch].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_PTS.TurnTableConfigMissmatch].strText := 'Turn Table Type Configuration Missmatch';

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// configuration
SIf.Cfg.bolPositionMalteserEnable := TRUE;

// parameter
SIf.Cfg.bolBarcodeReaderAvailable := FALSE;
SIf.Cfg.aDefaultAutoPos := 0;
SIf.Cfg.aFixPosDef[E_PTS_MODE.FixA].uinInput := 0;
SIf.Cfg.aFixPosDef[E_PTS_MODE.FixA].uinOutput := 1;
SIf.Cfg.aFixPosDef[E_PTS_MODE.FixB].uinInput := 3;
SIf.Cfg.aFixPosDef[E_PTS_MODE.FixB].uinOutput := 2;
SIf.Cfg.aFixPosDef[E_PTS_MODE.FixC].uinInput := 0;
SIf.Cfg.aFixPosDef[E_PTS_MODE.FixC].uinOutput := 0;
SIf.Cfg.aAutoPosDef[0].uinInput := 0;
SIf.Cfg.aAutoPosDef[0].uinOutput := 0;
SIf.Cfg.aAutoPosDef[1].uinInput := 0;
SIf.Cfg.aAutoPosDef[1].uinOutput := 1;
SIf.Cfg.aDistributionPositionDefinition[0] := E_PTS_MODE.FixC; 
SIf.Cfg.aDistributionPositionDefinition[1] := E_PTS_MODE.FixA; 
SIf.Cfg.bolRaxEnable := True;		// Use Servo Axis instead of Malteser 
SIf.Par.eMode := E_PTS_MODE.FixC;
SIf.Par.udiPaperBarcodeToInputSensorTime := 2000;
SIf.Par.udiPaperInTurnDelayTime := 000;
SIf.Par.udiPaperOutTurnDelayTime := 300;
SIf.Par.udiSimPaperBarcodeToInputSensorTime := SIf.Par.udiPaperBarcodeToInputSensorTime / 2;
SIf.Par.bolLongTimeTestEnable := False;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STANDBYBusy" ObjectId="544b3e4d-972a-4d34-a50a-cac645562a34">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STANDBYBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		CASE SIf.Par.eMode OF
			E_PTS_MODE.Automatic:
				uinPositionToGo := SIf.Cfg.aDefaultAutoPos;
			E_PTS_MODE.Distribute:
				uinPositionToGo := SIf.Cfg.aFixPosDef[SIf.Cfg.aDistributionPositionDefinition[SIf.Cur.iActualDistributionIndex]].uinInput;
			ELSE
				uinPositionToGo := SIf.Cfg.aFixPosDef[SIf.Par.eMode].uinInput;
		END_CASE

		// p_fbMalteser^.SetPositionToGo(uinPositionToGo);

		IF (SIf.Cfg.bolRaxEnable) THEN
			IF p_fbRAX^.CtrlSIf^.Cur.dinPosition_0_1Deg &lt;&gt; uinPositionToGo*90*10 THEN
				pRaxCIf^.Job.intACmd := RAX_CmdState.cCMD_TURN;
			END_IF
		ELSE
			IF p_fbMalteser^.ActualPosition &lt;&gt; uinPositionToGo THEN
				pMalteserCIf^.Job.intACmd := MDC_CmdState.cCMD_TURN;
			END_IF
		END_IF
		
		pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_STOP;
		
		me.SubStateMachine.intState 	:= PTS_CmdState.cSUB_TURNbusy;
		me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNbusy;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (SIf.Cfg.bolRaxEnable) THEN
			CASE me.SubStateMachine.intState OF
				PTS_CmdState.cSUB_TURNbusy:
					IF    (p_fbRAX^.CtrlSIf^.Cur.dinPosition_0_1Deg = p_fbRAX^.CtrlSIf^.Par.dinPos_0_1Deg) 
					  AND (  (pRaxCIf^.Job.intState = cSTA_STOP) 
						   OR(pRaxCIf^.Job.intState = cSTA_TURN))THEN 
						pRaxCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
						me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNDONE;
					END_IF
				PTS_CmdState.cSUB_TURNDONE:
					IF (pRaxCIf^.Job.intState = cSTA_STOP) 
					  AND ((pBeltCIf^.Job.intState = BASE_PLC.cSTA_OFF) OR (pBeltCIf^.Job.intState = BASE_PLC.cSTA_STOP)) THEN
						me.StateMachine.intStateNext := PTS_CmdState.cSTA_STANDBY;
					END_IF
			END_CASE
		ELSE
			CASE me.SubStateMachine.intState OF
				PTS_CmdState.cSUB_TURNbusy:
					IF    (p_fbMalteser^.CtrlSIf^.Cur.uintActualPosition = p_fbMalteser^.CtrlSIf^.Par.uinPositionToGo) 
					  AND (  (pMalteserCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) 
						   OR(pMalteserCIf^.Job.intState = MDC_CmdState.cSTA_TURNDONE))THEN 
						pMalteserCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
						me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNDONE;
					END_IF
				PTS_CmdState.cSUB_TURNDONE:
					IF (pMalteserCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) 
					  AND ((pBeltCIf^.Job.intState = BASE_PLC.cSTA_OFF) OR (pBeltCIf^.Job.intState = BASE_PLC.cSTA_STOP)) THEN
						me.StateMachine.intStateNext := PTS_CmdState.cSTA_STANDBY;
					END_IF
			END_CASE	
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STANDBY" ObjectId="6353d14a-33c5-4909-91bf-e4aa5034bf37">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STANDBY" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
		CIf.Job.intMCmd := BASE_PLC.cCMD_DONE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
			BASE_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="6393f466-56a5-442a-a7d6-65b0c2ec1472">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory&lt;=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PONBusy;
			ELSE
				IF me.intCmd &gt;= 0 THEN
					CASE me.intCmd OF
						cCMD_OFF:
							me.StateMachine.intStateNext := cSTA_OFFBusy;
						cCMD_RUN:
							me.StateMachine.intStateNext := cSTA_RUNBusy;
						cCMD_STOP:
							me.StateMachine.intStateNext := cSTA_STOPBusy;
					END_CASE
				ELSE
					CASE me.StateMachine.intStateHistory OF
						cSTA_PaperDelayBusy,cSTA_TurnPaperBusy,
						cSTA_WaitPaperGone,cSTA_EmptyDelayBusy,
						cSTA_TurnEmptyBusy,cSTA_WaitPaper,
						cSTA_RUNBusy, cSTA_RUN:
							me.StateMachine.intStateNext := cSTA_RUNBusy;
					ELSE
						me.StateMachine.intStateNext := cSTA_OFFBusy;
					END_CASE
				END_IF
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_InitializeBusy" ObjectId="6e4022a2-cd39-449a-8c5a-c1e8a06be683">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_InitializeBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		IF (SIf.Cfg.bolRaxEnable) THEN
			pRaxCIf^.Job.intACmd := cCMD_INIT;
		ELSE
			pMalteserCIf^.Job.intACmd := MDC_CmdState.cCMD_INITIALIZE;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (SIf.Cfg.bolRaxEnable) THEN
			IF (pRaxCIf^.Job.intState = cSTA_INIT) THEN
				pRaxCIf^.Job.intACmd := cCMD_STOP;				
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_STANDBYBusy;
			END_IF
		ELSE
			IF (pMalteserCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) THEN
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_STANDBYBusy;
			END_IF
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="735e9e3a-a43c-44ea-a9bf-d652656df3eb">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			BASE_PLC.cCMD_RUN,
			PTS_CmdState.cCMD_STANDBY,
			Base_plc.cCMD_STOP: 
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_InitializeBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="73d92433-8a02-4e03-b79a-2b3880ff02f4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
		CIf.Job.intMCmd := BASE_PLC.cCMD_DONE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		CASE SIf.Par.eMode OF
			E_PTS_MODE.Automatic:
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.ModeParameter),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	(*
				IF SIf.Cfg.bolBarcodeReaderAvailable (* AND BCR has a new barcode read *) THEN
					me.StateMachine.intStateNext := PTS_CmdState.cSTA_GetItemBusy;
				ELSE
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.ModeParameter),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				END_IF
	*)
			E_PTS_MODE.Distribute:
				IF ((NOT SIf.Cfg.bolEntrySensorAvailable) OR (SIf.In.bolPaperAtBeltExit.intern)) THEN
//					SIf.Cur.rInOutPosition := SIf.Cfg.aFixPosDef[SIf.Cfg.aDistributionPositionDefinition[SIf.Cur.iActualDistributionIndex]];
					me.StateMachine.intStateNext := PTS_CmdState.cSTA_WaitPaper;
				END_IF
			ELSE
				IF ((NOT SIf.Cfg.bolEntrySensorAvailable) OR (SIf.In.bolPaperAtBeltExit.intern)) THEN
//					SIf.Cur.rInOutPosition := SIf.Cfg.aFixPosDef[SIf.Par.eMode];
					me.StateMachine.intStateNext := PTS_CmdState.cSTA_WaitPaper;
				END_IF
		END_CASE

		CASE me.intCmd OF
			BASE_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			PTS_CmdState.cCMD_STANDBY:
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_STANDBYBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_WaitPaperGone" ObjectId="795726bb-f351-4be6-9ce9-9ae5e0345bd4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_WaitPaperGone" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		IF (SIf.Cfg.bolRaxEnable) THEN
			p_fbRAX^.CtrlCIf^.Job.intACmd := cCMD_STOP;
		ELSE
			IF (SIf.Cur.rInOutPosition.uinInput &lt;&gt; p_fbMalteser^.CtrlSIf^.Cur.uintActualPosition)
			  AND SIf.Cfg.bolPositionMalteserEnable THEN
				p_fbMalteser^.CtrlSIf^.Par.intTurnDirection := E_TURN_DIRECTION.AUTOMATIC;
				p_fbMalteser^.CtrlSIf^.Par.uinPositionToGo := SIf.Cur.rInOutPosition.uinInput;
				p_fbMalteser^.CtrlCIf^.Job.intACmd := MDC_CmdState.cCMD_PREPOSITION;
			END_IF
		END_IF
		
		me.SubStateMachine.intState := cSTA_WaitPaperGone;
		me.SubStateMachine.intStateNext := cSTA_WaitPaperGone;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		// sub state machine for sequence
		CASE me.SubStateMachine.intState OF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSTA_WaitPaperGone:
				IF NOT SIf.In.bolPaperAvailable.intern THEN
					me.SubStateMachine.intStateNext := cSUB_DELAYbusy;
				END_IF

				IF (me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiPaperBarcodeToInputSensorTime) THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.PaperTransport),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;
				END_IF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSUB_DELAYbusy:
			  	IF SIf.Par.udiPaperOutTurnDelayTime = 0 THEN
					me.StateMachine.intStateNext := PTS_CmdState.cSTA_TurnEmptyBusy;
				ELSE	
					IF (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiPaperOutTurnDelayTime) THEN
						me.StateMachine.intStateNext := PTS_CmdState.cSTA_TurnEmptyBusy;
					END_IF
				END_IF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSUB_PREPOSITIONbusy:
				IF (SIf.Cfg.bolRaxEnable = FALSE) THEN
					IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_PREPOSITION) THEN
						p_fbMalteser^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
						me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_WAIT_DONE;
					END_IF
				END_IF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSUB_WAIT_DONE:
				IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) THEN
					me.SubStateMachine.intStateNext := cSTA_WaitPaperGone;
				END_IF
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="GetItemBusy" ObjectId="8c53f2e8-a595-4aa9-ba8a-6898e80cf5b8">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="GetItemBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CalculateOutputDelay" ObjectId="96c61c3d-d4e9-42a8-a197-d3f0cd07aa0d">
                    <interface>
                      <returnType>
                        <UDINT />
                      </returnType>
                      <inputVars>
                        <variable name="uinBeltSpeed">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="udiInputDelay">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="relBeltSpeed">
                          <type>
                            <LREAL />
                          </type>
                        </variable>
                        <variable name="relInputDelay">
                          <type>
                            <LREAL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Private="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CalculateOutputDelay" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">relBeltSpeed := UINT_TO_REAL(uinBeltSpeed);
relInputDelay := UDINT_TO_LREAL(udiInputDelay);
CalculateOutputDelay := LREAL_TO_UDINT((1000.0*(750.0 - ((relBeltSpeed/1000)*(750.0+relInputDelay))))/relBeltSpeed);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="ac174f0d-5494-411d-927b-dac3867c0b10">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		CASE intCmdState OF
			PTS_CmdState.cCMD_STANDBY: 
				getCmdState := 'cCMD_STANDBY';
			PTS_CmdState.cCMD_TURN: 
				getCmdState := 'cCMD_TURN';
		END_CASE;
	ELSE
		// States's
		CASE intCmdState OF
			PTS_CmdState.cSTA_EmptyDelayBusy: 
				getCmdState := 'cSTA_EmptyDelayBusy';
			PTS_CmdState.cSTA_GetItemBusy: 
				getCmdState := 'cSTA_GetItemBusy';
			PTS_CmdState.cSTA_InitializeBusy: 
				getCmdState := 'cSTA_InitializeBusy';
			PTS_CmdState.cSTA_PaperDelayBusy: 
				getCmdState := 'cSTA_PaperDelayBusy';
			PTS_CmdState.cSTA_STANDBY: 
				getCmdState := 'cSTA_STANDBY';
			PTS_CmdState.cSTA_STANDBYBusy: 
				getCmdState := 'cSTA_STANDBYBusy';
			PTS_CmdState.cSTA_TurnEmptyBusy: 
				getCmdState := 'cSTA_TurnEmptyBusy';
			PTS_CmdState.cSTA_TurnPaperBusy: 
				getCmdState := 'cSTA_TurnPaperBusy';
			PTS_CmdState.cSTA_WaitPaper: 
				getCmdState := 'cSTA_WaitPaper';
			PTS_CmdState.cSTA_WaitPaperGone: 
				getCmdState := 'cSTA_WaitPaperGone';
		END_CASE;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_TurnEmptyBusy" ObjectId="adb0932f-4f2e-4c0e-b38f-44f9e9562984">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_TurnEmptyBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
//		Log Message ---------------------
//		TC2_SYSTEM.ADSLOGSTR(ADSLOG_MSGTYPE_LOG,'%s','sta_TurnEmptyBusy');
//		---------------------------------
		(*p_fbMalteser^.CtrlSIf^.Par.*)intTurnDirection := E_TURN_DIRECTION.AUTOMATIC;
		(*p_fbMalteser^.CtrlSIf^.Par.*)uinPositionToGo := SIf.Cur.rInOutPosition.uinInput;
		
		IF (SIf.Cfg.bolRaxEnable) THEN
			IF SIf.Cur.rInOutPosition.uinInput*90*10 = p_fbRAX^.CtrlSIf^.Cur.dinModPosition_0_1deg THEN
				p_fbRAX^.CtrlCIf^.Job.intACmd := cCMD_STOP;
				me.SubStateMachine.intState := PTS_CmdState.cSUB_WAIT_DONE;
				me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_WAIT_DONE;
			ELSE	
				p_fbRAX^.CtrlCIf^.Job.intACmd := RAX_CmdState.cCMD_TURN;
				me.SubStateMachine.intState := PTS_CmdState.cSUB_TURNbusy;
				me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNbusy;
			END_IF
		ELSE
			IF SIf.Cur.rInOutPosition.uinInput = p_fbMalteser^.CtrlSIf^.Cur.uintActualPosition THEN
				p_fbMalteser^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
				me.SubStateMachine.intState := PTS_CmdState.cSUB_WAIT_DONE;
				me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_WAIT_DONE;
			ELSE	
				p_fbMalteser^.CtrlCIf^.Job.intACmd := MDC_CmdState.cCMD_TURN;
				me.SubStateMachine.intState := PTS_CmdState.cSUB_TURNbusy;
				me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_TURNbusy;
			END_IF
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		//--------------------------------------------------------------------------------------
		// sub state machine for sequence
		IF (SIf.Cfg.bolRaxEnable) THEN
			CASE me.SubStateMachine.intState OF
				//--------------------------------------------------------------------------------------
				PTS_CmdState.cSUB_TURNbusy :
					IF (p_fbRAX^.CtrlCIf^.Job.intState = RAX_CmdState.cSTA_TURN) THEN
						p_fbRAX^.CtrlCIf^.Job.intACmd := cCMD_STOP;
						me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_WAIT_DONE;
					END_IF
				//--------------------------------------------------------------------------------------
				PTS_CmdState.cSUB_WAIT_DONE:
					IF (p_fbRAX^.CtrlCIf^.Job.intState = cSTA_STOP) THEN
						IF SIf.Par.eMode = E_PTS_MODE.Distribute THEN
							SIf.Cur.iActualDistributionIndex := (SIf.Cur.iActualDistributionIndex + 1) MOD PTS_CmdState.cPTS_MAX_DISTRIBUTION;	
						END_IF
	
						me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
					END_IF
				//--------------------------------------------------------------------------------------
			END_CASE
		ELSE			
			CASE me.SubStateMachine.intState OF
				//--------------------------------------------------------------------------------------
				PTS_CmdState.cSUB_TURNbusy :
					IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_TURNDONE) THEN
						p_fbMalteser^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
						me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_WAIT_DONE;
					END_IF
				//--------------------------------------------------------------------------------------
				PTS_CmdState.cSUB_WAIT_DONE:
					IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) THEN
						IF SIf.Par.eMode = E_PTS_MODE.Distribute THEN
							SIf.Cur.iActualDistributionIndex := (SIf.Cur.iActualDistributionIndex + 1) MOD PTS_CmdState.cPTS_MAX_DISTRIBUTION;	
						END_IF
	
						me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
					END_IF
				//--------------------------------------------------------------------------------------
			END_CASE
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="c341110f-826b-44a8-9ae8-49de824fd750">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	;
END_IF

// Write Outputs to Turning Child (Malteser or ServoDrive)
IF (SIf.Cfg.bolRaxEnable) THEN
	// ToDo: p_fbRAX^.CtrlSIf^.Par. intTurnDirection := intTurnDirection;
	p_fbRAX^.CtrlSIf^.Par.dinPos_0_1Deg := uinPositionToGo*90*10;	
ELSE
	p_fbMalteser^.CtrlSIf^.Par.intTurnDirection := intTurnDirection;	// &lt;0 = Turn left; =0 automatic; &gt;0 turn right
	p_fbMalteser^.CtrlSIf^.Par.uinPositionToGo := uinPositionToGo;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="d2d1ecf6-99ed-4416-9979-7a24ac10612a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		;
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PaperDelayBusy" ObjectId="d51453da-bd30-41c5-98b4-ce967a096ea0">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PaperDelayBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
//		Log Message ---------------------
		TC2_SYSTEM.ADSLOGSTR(ADSLOG_MSGTYPE_LOG,'%s','sta_PaperDelayBusy');
//		---------------------------------
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState = me.StateMachine.intStateLastCycle) THEN
		IF (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiPaperInTurnDelayTime) THEN
			me.StateMachine.intStateNext := PTS_CmdState.cSTA_TurnPaperBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="d53d27d0-b437-473d-b721-78d5723d7dbe">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	CASE SIf.Par.eMode OF
		E_PTS_MODE.Automatic:
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.ModeParameter),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
(*
			IF SIf.Cfg.bolBarcodeReaderAvailable (* AND BCR has a new barcode read *) THEN
				me.StateMachine.intStateNext := PTS_CmdState.cSTA_GetItemBusy;
			ELSE
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_PTS.ModeParameter),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
*)
		E_PTS_MODE.Distribute:
			SIf.Cur.rInOutPosition := SIf.Cfg.aFixPosDef[SIf.Cfg.aDistributionPositionDefinition[SIf.Cur.iActualDistributionIndex]];

		ELSE
			SIf.Cur.rInOutPosition := SIf.Cfg.aFixPosDef[SIf.Par.eMode];
	END_CASE

	(*p_fbMalteser^.CtrlSIf^.Par.*)intTurnDirection := E_TURN_DIRECTION.AUTOMATIC;
	(*p_fbMalteser^.CtrlSIf^.Par.*)uinPositionToGo := SIf.Cur.rInOutPosition.uinOutput;

	IF (SIf.Cfg.bolRaxEnable = FALSE) THEN
		IF SIf.Cfg.bolPositionMalteserEnable THEN
			p_fbMalteser^.CtrlCIf^.Job.intACmd := MDC_CmdState.cCMD_PREPOSITION;
	
			me.SubStateMachine.intState := PTS_CmdState.cSUB_PREPOSITIONbusy;
			me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_PREPOSITIONbusy;
		ELSE	
			p_fbMalteser^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
	
			me.SubStateMachine.intState := PTS_CmdState.cSUB_WAIT_DONE;
			me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_WAIT_DONE;
		END_IF
	END_IF
	
	p_fbBelt^.CtrlSIf^.Par.intDirection := E_BELT_DIRECTION.FORWARD;
	pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

	IF (SIf.Cfg.bolRaxEnable) THEN
		me.StateMachine.intStateNext := cSTA_RUN;
	ELSE
		//--------------------------------------------------------------------------------------
		// sub state machine for sequence
		CASE me.SubStateMachine.intState OF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSUB_PREPOSITIONbusy:
				IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_PREPOSITION) THEN
					p_fbMalteser^.CtrlCIf^.Job.intACmd := BASE_PLC.cCMD_RUN;
					me.SubStateMachine.intStateNext := PTS_CmdState.cSUB_WAIT_DONE;
				END_IF
			//--------------------------------------------------------------------------------------
			PTS_CmdState.cSUB_WAIT_DONE:
				IF (p_fbMalteser^.CtrlCIf^.Job.intState = MDC_CmdState.cSTA_InPosition) 
				  AND (pBeltCIf^.Job.intState = BASE_PLC.cSTA_RUN) THEN
		//			SIf.Cur.udiPaperInTurnDelayTime := 150000 / p_fbBelt^.CtrlSIf^.Par.uinBeltSpeed;
		//			SIf.Cur.udiPaperOutTurnDelayTime := CalculateOutputDelay(p_fbBelt^.CtrlSIf^.Par.uinBeltSpeed,SIf.Cur.udiPaperInTurnDelayTime);
					me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
				END_IF
			//--------------------------------------------------------------------------------------
		END_CASE
	END_IF
	
	IF SIf.In.bolPaperAvailable.intern THEN
		me.StateMachine.intStateNext := PTS_CmdState.cSTA_WaitPaper;
	END_IF
END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_GetItemBusy" ObjectId="e5b7da0b-5845-40b2-b836-8ebe250a7e27">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_GetItemBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="e72e0771-1032-4225-a926-fb885add5154">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CtrlInit();

IF (SIf.Cfg.bolRaxEnable) THEN
	THIS^.AddChild(p_fbRAX^);

	pRaxCIf := p_fbRAX^.CtrlCIf;
ELSE
	THIS^.AddChild(p_fbMalteser^);

	pMalteserCIf := p_fbMalteser^.CtrlCIf;
END_IF

THIS^.AddChild(p_fbBelt^);

pBeltCIf := p_fbBelt^.CtrlCIf;

(*
// set parent id
pMalteserCIf^.Info.intParentCtrlId := CIf.Info.intCtrlId;			
pBeltCIf^.Info.intParentCtrlId := CIf.Info.intCtrlId;			

//necessary???
THIS^.CIf.Info.p_aCIf[0] := pMalteserCIf;
THIS^.CIf.Info.p_aCIf[1] := pBeltCIf;
*)</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="f097df25-2b08-4c3f-a239-d39a12bbf963">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// stop child controllers
		pBeltCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		IF (SIf.Cfg.bolRaxEnable) THEN
			pRaxCIf^.Job.intACmd := cCMD_OFF;
		ELSE
			pMalteserCIf^.Job.intACmd := BASE_PLC.cCMD_OFF;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="f666f961-c45f-48a6-aefd-c0f724032b89">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_PTS" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="04d92a51-52d2-4695-9002-096d0ca5376f">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_PTS" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="Belt" ObjectId="5d9153e8-6ba7-4004-9ccd-8bf2bafb85e2">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_PTB" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbBelt := Belt;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">Belt := p_fbBelt;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="Malteser" ObjectId="64e06aa1-5ce3-4995-b01c-f8f723ea0cb3">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_MDC" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbMalteser := Malteser;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">Malteser := p_fbMalteser;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="Servo" ObjectId="8057dbca-8b6a-4a74-aa85-d95637e4a07b">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="FB_MDC" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">Servo := p_fbRAX;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">p_fbRAX := Servo;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ce4721d8-0ee6-4269-bb23-f91a21a98bc0</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_DataSetFifo" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="bOverwrite">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="in">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="iAddSize">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="bOk">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="nCount">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="nLoad">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="out">
                    <type>
                      <array>
                        <dimension lower="0" upper="MAX_DATASET_SIZE" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="pHeader">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="ST_Header" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="arrBuffer">
                    <type>
                      <array>
                        <dimension lower="0" upper="MAX_BUFFER_SIZE" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Buffer memory used by FB_MemRingBuffer function block </xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbBuffer">
                    <type>
                      <derived name="FB_MemRingBuffer" />
                    </type>
                  </variable>
                  <variable name="intLoopRemove">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="intLoopReset">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="MAX_BUFFER_SIZE">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="1000" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <actions>
                <action name="A_Add">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">fbBuffer.A_AddTail( pWrite:= in,
					cbWrite:= INT_TO_UDINT(iAddSize),
					pBuffer:= ADR( arrBuffer ),
					cbBuffer:= SIZEOF( arrBuffer ),
					bOk=&gt; bOk,
					nCount =&gt; nCount );

IF NOT bOk THEN (* overflow ? *)
	IF bOverwrite THEN
		fbBuffer.A_RemoveHead(); (* remove one oldest entry *)
		fbBuffer.A_AddTail( bOk =&gt; bOk, nCount =&gt; nCount );
	END_IF
END_IF

nLoad := (fbBuffer.cbSize * 100) / MAX_BUFFER_SIZE;</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>354f56b0-10da-4f61-968e-e1e0997fba19</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="A_Get">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">fbBuffer.A_GetHead( pRead:= ADR( out ),
					cbRead:= SIZEOF( out ),
					pBuffer:= ADR( arrBuffer ),
					cbBuffer:= SIZEOF( arrBuffer ),
					bOk=&gt; bOk,
					nCount =&gt; nCount );

pHeader := ADR(out);					
					
nLoad := (fbBuffer.cbSize * 100) / MAX_BUFFER_SIZE;</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>528fe388-fbd0-4c9d-9d0b-32ddfc26b84f</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="A_Reset">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">// MEMSET not working!
//MEMSET( ADR( arrBuffer ), 0, SIZEOF( arrBuffer ) ); (* reset (optional) internal buffer *)
FOR intLoopReset:=0 TO SIZEOF(arrBuffer)-1 DO
	arrBuffer[intLoopReset]:= 0;
END_FOR

fbBuffer.A_Reset( 	bOk=&gt; bOk,
					nCount =&gt; nCount );

nLoad := (fbBuffer.cbSize * 100) / MAX_BUFFER_SIZE;</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>aac67239-23f4-4ba1-afd0-7a0070873d9f</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="A_Remove">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">// Clean up package buffer
FOR intLoopRemove:=0 TO SIZEOF(out)-1 DO
	out[intLoopRemove]:= 0;
END_FOR

// Remove data from buffer. Get next package.
fbBuffer.A_RemoveHead( 	pRead:= ADR(out),
						cbRead:= SIZEOF(out),
						pBuffer:= ADR(arrBuffer),
						cbBuffer:= SIZEOF(arrBuffer),
						bOk=&gt; bOk,
						nCount =&gt; nCount );
// Return						
pHeader := ADR(out);

nLoad := (fbBuffer.cbSize * 100) / MAX_BUFFER_SIZE;</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>da30d440-c58f-44b6-892a-ab279b11fd1a</ObjectId>
                    </data>
                  </addData>
                </action>
              </actions>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5f999324-e911-42e2-acc5-05637b7d1f00</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_LookupTable" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="iAddKey">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iAddValue">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iLookupKey">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iLookupValue">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="iCount">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> number of elements in Table</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bOK">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iFoundValue">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iFoundKey">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="aiKeys">
                    <type>
                      <array>
                        <dimension lower="0" upper="MaxLookupSize" />
                        <baseType>
                          <INT />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="aiValues">
                    <type>
                      <array>
                        <dimension lower="0" upper="MaxLookupSize" />
                        <baseType>
                          <INT />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="ii">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="bDone">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <actions>
                <action name="A_Add">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">IF (iAddKey = 0) OR (iCount = MaxLookupSize) THEN
	bOK := 0; 
	RETURN;
END_IF
bDone := 0;

FOR ii := 0 TO MaxLookupSize BY 1 DO // see if key already exists
	IF ( iAddKey = aiKeys[ii] ) THEN // overwrite old element
		aiValues[ii] := iAddValue;
		bOK := 1;
		bDone := 1;
		RETURN;
	END_IF
END_FOR

// add new entry
// find first unused element in table
FOR ii := 0 TO MaxLookupSize BY 1 DO
	IF aiKeys[ii] = 0 THEN
		aiKeys[ii] := iAddKey;
		aiValues[ii] := iAddValue;
		iCount := iCount +1;
		bOK := 1;
		RETURN;
	END_IF
END_FOR
</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>22606354-33aa-4c22-b193-a0302fa25939</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="A_Reset">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FOR ii := 0 TO MaxLookupSize BY 1 DO
	aiKeys[ii] := 0;
	aiValues[ii] := 0;
END_FOR
bOK := 1;</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>996c16b7-de6b-44df-99ed-271654cecfb2</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="A_RemoveKey">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">bOK := 0;

FOR ii := 0 TO MaxLookupSize BY 1 DO
	IF iLookupKey = aiKeys[ii] THEN // found it
		aiKeys[ii] := 0;
		aiValues[ii] := 0;
		bOK := 1;
		RETURN;
	END_IF
END_FOR</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>b0ce0b72-b2d9-458d-aeda-8a478319e177</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="A_LookupByValue">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">// will only find the first key associated with the value
bOK := 0;

FOR ii := 0 TO MaxLookupSize BY 1 DO
	IF iLookupValue = aiValues[ii] THEN // found it
		iFoundKey := aiKeys[ii];
		bOK := 1;
		RETURN;
	END_IF
END_FOR</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>f7fddc35-5eb9-4ed0-8d5c-4fa3208fd6a4</ObjectId>
                    </data>
                  </addData>
                </action>
                <action name="A_LookupByKey">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">bOK := 0;

FOR ii := 0 TO MaxLookupSize BY 1 DO
	IF iLookupKey = aiKeys[ii] THEN // found it
		iFoundValue := aiValues[ii];
		bOK := 1;
		RETURN;
	END_IF
END_FOR</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>fc107e65-f819-47ca-8e16-88c1a5f8000f</ObjectId>
                    </data>
                  </addData>
                </action>
              </actions>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(* 
	This is a very slow lookup table! do not use for big amounts of data
*)</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>222d6a01-f54a-44a2-a504-2cb2e40c6879</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="cycle_Grr" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pGrr">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_GRR" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pGrr^.ctrl.fbGrr.In_bolAutoMode				:= pGrr^.io.In_bolAutoMode;
pGrr^.ctrl.fbGrr.In_bolEoffOrFuseOk			:= pGrr^.io.In_bolEoffOrFuseOk;
pGrr^.ctrl.fbGrr.In_bolMainPressureError	:= pGrr^.io.In_bolMainPressureError;
pGrr^.ctrl.fbGrr.In_bolPowderLowWarning		:= pGrr^.io.In_bolPowderLowWarning;
pGrr^.ctrl.fbGrr.In_bolSystemOk				:= pGrr^.io.In_bolSystemOk;
pGrr^.ctrl.fbGrr.In_intState				:= pGrr^.io.In_intState;
pGrr^.ctrl.fbGrr.In_bolToggleBitGrn			:= pGrr^.io.In_bolToggleBitGrn;
pGrr^.ctrl.fbGrr.In_intMainPressure			:= pGrr^.io.In_intMainPressure;
pGrr^.ctrl.fbGrr();
pGrr^.io.Out_intCommand						:= pGrr^.ctrl.fbGrr.Out_intCommand;
pGrr^.io.Out_intConveyorBelt				:= pGrr^.ctrl.fbGrr.Out_intConveyorBelt;
pGrr^.io.Out_intConveyorVibrator			:= pGrr^.ctrl.fbGrr.Out_intConveyorVibrator;
pGrr^.io.Out_intPowderVibrator				:= pGrr^.ctrl.fbGrr.Out_intPowderVibrator;
pGrr^.io.Out_uinFilterClearingCycleTime_min	:= pGrr^.ctrl.fbGrr.Out_uinFilterClearingCycleTime_min;
pGrr^.io.Out_bolToggleBitGrr				:= pGrr^.ctrl.fbGrr.Out_bolToggleBitGrr;
pGrr^.io.Out_intAnalogValue					:= pGrr^.ctrl.fbGrr.Out_intAnalogValue;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>6622eaea-7002-4bb9-9027-a844e797871b</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="init_Grr" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pGrr">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_GRR" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pCtrlInst">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="fb_CtrlBase" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> instance array of all controller instances</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pCtrlCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> common interface array of all controllers (main use for PLC)</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pGrr^.ctrl.fbGrr.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pGrr^.id.Grr);</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>28c11cc5-75dd-4c5f-9183-c6956d5e8d7a</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="cycle_Jcl" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pJcl">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_JCL" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pJcl^.ctrl.fbJcl_Tcp();

pJcl^.ctrl.fbJcl();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>839d184d-d948-4512-8110-16f2ec46e840</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="init_Jcl" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pJcl">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_JCL" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pCtrlInst">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="fb_CtrlBase" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> instance array of all controller instances</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pCtrlCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> common interface array of all controllers (main use for PLC)</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pJcl^.ctrl.fbJcl_Tcp.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pJcl^.id.Jcl_Tcp);
pJcl^.ctrl.fbJcl.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pJcl^.id.Jcl);
pJcl^.ctrl.fbJcl.TCP := ADR(pJcl^.ctrl.fbJcl_Tcp);</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5bd12865-b25c-4d1a-93af-a72749daa79d</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="cycle_Bch" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pBch">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_BCH" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pBch^.ctrl.fbBch.In_bolSensorTrigScan := pBch^.io.In_bolSensorTrigScan;
pBch^.ctrl.fbBch();
pBch^.ctrl.fbBch_Bcc();
pBch^.ctrl.fbBch_Bcc_Bcd();
pBch^.datachn.rSendData.fbFifo();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>964d7c0c-b99e-4179-8ed6-8486a6ed8032</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="init_Bch" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pBch">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_BCH" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pCtrlInst">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="fb_CtrlBase" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> instance array of all controller instances</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pCtrlCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> common interface array of all controllers (main use for PLC)</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pBch^.datachn.rSendData.fbDataChannel.InitChannel(SIZEOF(pBch^.datachn.rSendData.rDataChannelItem), ADR(pBch^.datachn.rSendData.rDataChannelItem));
pBch^.datachn.rSendData.fbFifo.DataChannel := ADR(pBch^.datachn.rSendData.fbDataChannel);
pBch^.datachn.rSendData.fbFifo.FreeDataPointer := TRUE;
pBch^.datachn.rSendData.fbFifo.Enable := TRUE;

pBch^.ctrl.fbBch_Bcc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pBch^.id.Bch_Bcc); // init and entry fb_instance in global fb pointer array
pBch^.ctrl.fbBch_Bcc.pBCD_SIf_In := pBch^.ctrl.fbBch_Bcc_Bcd.getSIf();
pBch^.ctrl.fbBch.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pBch^.id.Bch); // init and entry fb_instance in global fb pointer array
pBch^.ctrl.fbBch.BarcodeReader := ADR(pBch^.ctrl.fbBch_Bcc);
pBch^.ctrl.fbBch.DataChannel := ADR(pBch^.datachn.rSendData.fbFifo);</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>dc1ae0ea-a78e-4c30-b44d-dae2e7ab3781</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="cycle_Ovn" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pOvn">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_OVN" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pOvn^.ctrl.fbOvn_Ibh();

pOvn^.ctrl.fbOvn.In_iStatus := pOvn^.ctrl.fbOvn_Ibh.Out_iStatus;
pOvn^.ctrl.fbOvn.In_bOff := pOvn^.ctrl.fbOvn_Ibh.Out_bOff;
pOvn^.ctrl.fbOvn.In_bBeltOn := pOvn^.ctrl.fbOvn_Ibh.Out_bBeltOn;
pOvn^.ctrl.fbOvn.In_bManual := pOvn^.ctrl.fbOvn_Ibh.Out_bManual;
pOvn^.ctrl.fbOvn.In_bRun := pOvn^.ctrl.fbOvn_Ibh.Out_bRun;
pOvn^.ctrl.fbOvn.In_bAckError := pOvn^.ctrl.fbOvn_Ibh.Out_bAckError;
pOvn^.ctrl.fbOvn.In_adiTemp_dc := pOvn^.ctrl.fbOvn_Ibh.Out_adiTemp_dc;
pOvn^.ctrl.fbOvn.In_adiAir_p := pOvn^.ctrl.fbOvn_Ibh.Out_adiAir_p;
pOvn^.ctrl.fbOvn.In_diSpeed_mm_min := pOvn^.ctrl.fbOvn_Ibh.Out_diSpeed_mm_min;
pOvn^.ctrl.fbOvn.In_iErrorLevel := pOvn^.ctrl.fbOvn_Ibh.Out_iErrorLevel;
pOvn^.ctrl.fbOvn.In_iErrorID := pOvn^.ctrl.fbOvn_Ibh.Out_iErrorID;
pOvn^.ctrl.fbOvn.In_bDriverConnected := pOvn^.ctrl.fbOvn_Ibh.Out_bDriverConnected;
pOvn^.ctrl.fbOvn.In_bDriverError := pOvn^.ctrl.fbOvn_Ibh.Out_bDriverError;
pOvn^.ctrl.fbOvn.In_udiDriverErrorID := pOvn^.ctrl.fbOvn_Ibh.Out_udiDriverErrorID;

//... := pOvn^.io.In_bolBcrDistributionTrigger;	//TODO
pOvn^.ctrl.fbOvn.In_uliBarcodeNew_1 := pOvn^.io.In_udiBarcode_new_1;
pOvn^.ctrl.fbOvn.In_uliBarcodeNew_2 := pOvn^.io.In_udiBarcode_new_2;
pOvn^.ctrl.fbOvn.In_uiNewElement_1 := pOvn^.io.In_uinNew_element_1;
pOvn^.ctrl.fbOvn.In_uiNewElement_2 := pOvn^.io.In_uinNew_element_2;
pOvn^.ctrl.fbOvn.In_uliBarcodeDelete_1 := pOvn^.io.In_udiBarcode_delete_1;
pOvn^.ctrl.fbOvn.In_uliBarcodeDelete_2 := pOvn^.io.In_udiBarcode_delete_2;
pOvn^.ctrl.fbOvn.In_uiDeleteElement_1 := pOvn^.io.In_uinDelete_element_1;
pOvn^.ctrl.fbOvn.In_uiDeleteElement_2 := pOvn^.io.In_uinDelete_element_2;

pOvn^.ctrl.fbOvn();

//pOvn^.io.Out_uinBcrOvenAEvent := ...;	//TODO
//pOvn^.io.Out_udiBcrOvenACode := ...;	//TODO
//pOvn^.io.Out_uinBcrOvenBEvent := ...;	//TODO
//pOvn^.io.Out_udiBcrOvenBCode := ...;	//TODO

pOvn^.datachn.rSendData.fbFifo();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>07764068-9f3b-402f-b763-d5a9ae0a908c</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="init_Ovn" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pOvn">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_OVN" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pCtrlInst">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="fb_CtrlBase" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> instance array of all controller instances</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pCtrlCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> common interface array of all controllers (main use for PLC)</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pOvn^.datachn.rSendData.fbDataChannel.InitChannel(SIZEOF(pOvn^.datachn.rSendData.rDataChannelItem), ADR(pOvn^.datachn.rSendData.rDataChannelItem));
pOvn^.datachn.rSendData.fbFifo.DataChannel := ADR(pOvn^.datachn.rSendData.fbDataChannel);
pOvn^.datachn.rSendData.fbFifo.FreeDataPointer := TRUE;
pOvn^.datachn.rSendData.fbFifo.Enable := TRUE;

pOvn^.ctrl.fbOvn_Ibh.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pOvn^.id.Ovn_Ibh);
pOvn^.ctrl.fbOvn.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pOvn^.id.Ovn);
pOvn^.ctrl.fbOvn.IBH := ADR(pOvn^.ctrl.fbOvn_Ibh);
pOvn^.ctrl.fbOvn.DataChannel := ADR(pOvn^.datachn.rSendData.fbFifo);</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>75862f38-163f-408d-b463-c830698f3fe4</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="cycle_Pta" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pPta">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PTA" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pPta^.ctrl.fbPta_Umc.In_uinStatus 				:= pPta^.io.In_uinUmc_Status;
pPta^.ctrl.fbPta_Umc.In_intMotorActualSpeed 	:= pPta^.io.In_uinUmc_ActualSpeed;
pPta^.ctrl.fbPta_Umc.In_uinMotorSetSpeed 		:= pPta^.io.In_uinUmc_SetSpeed;
pPta^.ctrl.fbPta_Umc.In_uinIOData				:= pPta^.io.In_uinUmc_IOData1;
pPta^.ctrl.fbPta_Umc.In_uinECATState 			:= pPta^.io.In_uinUmc_ECatState;
pPta^.ctrl.fbPta_Umc.In_strNetId 				:= pPta^.io.In_strUmc_ECatNetId;
pPta^.ctrl.fbPta_Umc.In_uintPort 				:= pPta^.io.In_uinUmc_ECatPort;
pPta^.ctrl.fbPta_Umc();
pPta^.io.Out_uinUmc_SetSpeed 					:= pPta^.ctrl.fbPta_Umc.Out_uinSpeedSetpoint;
pPta^.io.Out_uinUmc_Control 					:= pPta^.ctrl.fbPta_Umc.Out_uinControl;

pPta^.ctrl.fbPta.In_bolBeltEntrySensor		 	:= pPta^.io.In_bolInputSensor;
pPta^.ctrl.fbPta.In_bolBeltExitSensor 			:= pPta^.io.In_bolOutputSensor;
pPta^.ctrl.fbPta();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>46c7fe0b-d881-487c-b6a7-dcf8432446c8</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="init_Pta" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pPta">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PTA" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pCtrlInst">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="fb_CtrlBase" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> instance array of all controller instances</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pCtrlCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> common interface array of all controllers (main use for PLC)</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pPta^.ctrl.fbPta_Umc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPta^.id.Pta_Umc);
pPta^.ctrl.fbPta.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPta^.id.Pta);
pPta^.ctrl.fbPta.Drive := ADR(pPta^.ctrl.fbPta_Umc);

// PTA is a special type of PTB
pPta^.ctrl.fbPta.CtrlSIf^.Cfg.bolVacuumPresent := FALSE;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>c415c1f4-6166-496a-b919-b182ed1f6230</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="cycle_Ptb" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pPtb">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PTB" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pPtb^.ctrl.fbPtb_Umc.In_uinStatus 				:= pPtb^.io.In_uinUmc_Status;
pPtb^.ctrl.fbPtb_Umc.In_intMotorActualSpeed 	:= pPtb^.io.In_uinUmc_ActualSpeed;
pPtb^.ctrl.fbPtb_Umc.In_uinMotorSetSpeed 		:= pPtb^.io.In_uinUmc_SetSpeed;
pPtb^.ctrl.fbPtb_Umc.In_uinIOData				:= pPtb^.io.In_uinUmc_IOData1;
pPtb^.ctrl.fbPtb_Umc.In_uinECATState 			:= pPtb^.io.In_uinUmc_ECatState;
pPtb^.ctrl.fbPtb_Umc.In_strNetId 				:= pPtb^.io.In_strUmc_ECatNetId;
pPtb^.ctrl.fbPtb_Umc.In_uintPort 				:= pPtb^.io.In_uinUmc_ECatPort;
pPtb^.ctrl.fbPtb_Umc();
pPtb^.io.Out_uinUmc_SetSpeed 					:= pPtb^.ctrl.fbPtb_Umc.Out_uinSpeedSetpoint;
pPtb^.io.Out_uinUmc_Control 					:= pPtb^.ctrl.fbPtb_Umc.Out_uinControl;

pPtb^.ctrl.fbPtb_Vpc.In_bolPumpOk 				:= pPtb^.io.In_bolVpc_PumpOk;
pPtb^.ctrl.fbPtb_Vpc.In_bolVacuumOk 			:= pPtb^.io.In_bolVpc_VacuumSensor;
pPtb^.ctrl.fbPtb_Vpc();
pPtb^.io.Out_bolVpc_PumpOn 						:= pPtb^.ctrl.fbPtb_Vpc.Out_bolVaccumPumpOn;

pPtb^.ctrl.fbPtb.In_bolBeltEntrySensor		 	:= pPtb^.io.In_bolInputSensor;
pPtb^.ctrl.fbPtb.In_bolBeltExitSensor 			:= pPtb^.io.In_bolOutputSensor;
pPtb^.ctrl.fbPtb();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3372afe3-7bac-48c1-8590-ff62db918e56</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="init_Ptb" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pPtb">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PTB" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pCtrlInst">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="fb_CtrlBase" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> instance array of all controller instances</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pCtrlCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> common interface array of all controllers (main use for PLC)</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pPtb^.ctrl.fbPtb_Vpc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPtb^.id.Ptb_Vpc);
pPtb^.ctrl.fbPtb_Umc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPtb^.id.Ptb_Umc);
pPtb^.ctrl.fbPtb.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPtb^.id.Ptb);
pPtb^.ctrl.fbPtb.Drive := ADR(pPtb^.ctrl.fbPtb_Umc);
pPtb^.ctrl.fbPtb.VacuumPump := ADR(pPtb^.ctrl.fbPtb_Vpc);</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>8ebadddd-333a-46ba-82c7-eb285cfb0a6a</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="cycle_Pbc" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pPbc">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PBC" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pPbc^.ctrl.fbPbc_PtbDeStacker_Umc.In_uinStatus 				:= pPbc^.io.In_uinPtbDeStacker_Umc_Status;
pPbc^.ctrl.fbPbc_PtbDeStacker_Umc.In_intMotorActualSpeed 	:= pPbc^.io.In_uinPtbDeStacker_Umc_ActualSpeed;
pPbc^.ctrl.fbPbc_PtbDeStacker_Umc.In_uinMotorSetSpeed 		:= pPbc^.io.In_uinPtbDeStacker_Umc_SetSpeed;
pPbc^.ctrl.fbPbc_PtbDeStacker_Umc.In_uinIOData				:= pPbc^.io.In_uinPtbDeStacker_Umc_IOData1;
pPbc^.ctrl.fbPbc_PtbDeStacker_Umc.In_uinECATState 			:= pPbc^.io.In_uinPtbDeStacker_Umc_ECatState;
pPbc^.ctrl.fbPbc_PtbDeStacker_Umc.In_strNetId 				:= pPbc^.io.In_strPtbDeStacker_Umc_ECatNetId;
pPbc^.ctrl.fbPbc_PtbDeStacker_Umc.In_uintPort 				:= pPbc^.io.In_uinPtbDeStacker_Umc_ECatPort;
pPbc^.ctrl.fbPbc_PtbDeStacker_Umc();
pPbc^.io.Out_uinPtbDeStacker_Umc_SetSpeed	 				:= pPbc^.ctrl.fbPbc_PtbDeStacker_Umc.Out_uinSpeedSetpoint;
pPbc^.io.Out_uinPtbDeStacker_Umc_Control 					:= pPbc^.ctrl.fbPbc_PtbDeStacker_Umc.Out_uinControl;

pPbc^.ctrl.fbPbc_PtbDeStacker();

pPbc^.ctrl.fbPbc_PtbBelt_Umc.In_uinStatus 					:= pPbc^.io.In_uinPtbBelt_Umc_Status;
pPbc^.ctrl.fbPbc_PtbBelt_Umc.In_intMotorActualSpeed 		:= pPbc^.io.In_uinPtbBelt_Umc_ActualSpeed;
pPbc^.ctrl.fbPbc_PtbBelt_Umc.In_uinMotorSetSpeed 			:= pPbc^.io.In_uinPtbBelt_Umc_SetSpeed;
pPbc^.ctrl.fbPbc_PtbBelt_Umc.In_uinIOData					:= pPbc^.io.In_uinPtbBelt_Umc_IOData1;
pPbc^.ctrl.fbPbc_PtbBelt_Umc.In_uinECATState 				:= pPbc^.io.In_uinPtbBelt_Umc_ECatState;
pPbc^.ctrl.fbPbc_PtbBelt_Umc.In_strNetId 					:= pPbc^.io.In_strPtbBelt_Umc_ECatNetId;
pPbc^.ctrl.fbPbc_PtbBelt_Umc.In_uintPort 					:= pPbc^.io.In_uinPtbBelt_Umc_ECatPort;
pPbc^.ctrl.fbPbc_PtbBelt_Umc();
pPbc^.io.Out_uinPtbBelt_Umc_SetSpeed 						:= pPbc^.ctrl.fbPbc_PtbBelt_Umc.Out_uinSpeedSetpoint;
pPbc^.io.Out_uinPtbBelt_Umc_Control 						:= pPbc^.ctrl.fbPbc_PtbBelt_Umc.Out_uinControl;

pPbc^.ctrl.fbPbc_PtbBelt_Vpc.In_bolPumpOk 					:= pPbc^.io.In_bolPtbBelt_Vpc_PumpOk;
pPbc^.ctrl.fbPbc_PtbBelt_Vpc.In_bolVacuumOk 				:= pPbc^.io.In_bolPtbBelt_Vpc_VacuumSensor;
pPbc^.ctrl.fbPbc_PtbBelt_Vpc();
pPbc^.io.Out_bolPtbBelt_Vpc_PumpOn 							:= pPbc^.ctrl.fbPbc_PtbBelt_Vpc.Out_bolVaccumPumpOn;

pPbc^.ctrl.fbPbc_PtbBelt();

pPbc^.ctrl.fbPbc.In_bolCapacityReached 						:= pPbc^.io.In_bolInputSensor;
pPbc^.ctrl.fbPbc.In_bolPaperAvailableEntry 					:= pPbc^.io.In_bolCapacitySensor;
pPbc^.ctrl.fbPbc.In_bolPaperAvailableExit 					:= pPbc^.io.In_bolOutputSensor;
pPbc^.ctrl.fbPbc.In_bolDoublePaperDetection 				:= pPbc^.io.In_bolDoublePaperSensor;
pPbc^.ctrl.fbPbc.In_bolTurnTableMiddleSensor 				:= pPbc^.io.In_bolPts_PaperSensor;
pPbc^.ctrl.fbPbc.In_bolAirPressorOk 						:= pPbc^.io.In_bolAirPressureOk;
pPbc^.ctrl.fbPbc();
pPbc^.io.Out_bolAirPressureOn 								:= pPbc^.ctrl.fbPbc.Out_bolAirOn;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>aa8703db-12c3-4ed7-8a3f-79a93208c1d8</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="init_Pbc" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pPbc">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PBC" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pCtrlInst">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="fb_CtrlBase" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> instance array of all controller instances</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pCtrlCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> common interface array of all controllers (main use for PLC)</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pPbc^.ctrl.fbPbc_PtbDeStacker_Umc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPbc^.id.Pbc_PtbDeStacker_Umc); // init and entry fb_instance in global fb pointer array
pPbc^.ctrl.fbPbc_PtbDeStacker.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPbc^.id.Pbc_PtbDeStacker); // init and entry fb_instance in global fb pointer array
pPbc^.ctrl.fbPbc_PtbDeStacker.Drive := ADR(pPbc^.ctrl.fbPbc_PtbDeStacker_Umc);

pPbc^.ctrl.fbPbc_PtbBelt_Umc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPbc^.id.Pbc_PtbBelt_Umc); // init and entry fb_instance in global fb pointer array
pPbc^.ctrl.fbPbc_PtbBelt_Vpc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPbc^.id.Pbc_PtbBelt_Vpc); // init and entry fb_instance in global fb pointer array
pPbc^.ctrl.fbPbc_PtbBelt.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPbc^.id.Pbc_PtbBelt); // init and entry fb_instance in global fb pointer array
pPbc^.ctrl.fbPbc_PtbBelt.Drive := ADR(pPbc^.ctrl.fbPbc_PtbBelt_Umc);
pPbc^.ctrl.fbPbc_PtbBelt.VacuumPump := ADR(pPbc^.ctrl.fbPbc_PtbBelt_Vpc);

pPbc^.ctrl.fbPbc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPbc^.id.Pbc); 		 // init and entry fb_instance in global fb pointer array
pPbc^.ctrl.fbPbc.DeStacker := ADR(pPbc^.ctrl.fbPbc_PtbDeStacker);
pPbc^.ctrl.fbPbc.Belt := ADR(pPbc^.ctrl.fbPbc_PtbBelt);</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a9544bb5-a3f8-471a-9027-9ef21922f1e9</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="cycle_Pce" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pPce">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PCE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pPce^.ctrl.fbPce_PtbIn_Umc.In_uinStatus				:= pPce^.io.In_uinUmcIn_Status;
pPce^.ctrl.fbPce_PtbIn_Umc.In_intMotorActualSpeed	:= pPce^.io.In_uinUmcIn_ActualSpeed;
pPce^.ctrl.fbPce_PtbIn_Umc.In_uinMotorSetSpeed		:= pPce^.io.In_uinUmcIn_SetSpeed;
pPce^.ctrl.fbPce_PtbIn_Umc.In_uinIOData				:= pPce^.io.In_uinUmcIn_IOData1;
pPce^.ctrl.fbPce_PtbIn_Umc.In_uinECATState			:= pPce^.io.In_uinUmcIn_ECatState;
pPce^.ctrl.fbPce_PtbIn_Umc.In_strNetId				:= pPce^.io.In_strUmcIn_ECatNetId;
pPce^.ctrl.fbPce_PtbIn_Umc.In_uintPort				:= pPce^.io.In_uinUmcIn_ECatPort;
pPce^.ctrl.fbPce_PtbIn_Umc();
pPce^.io.Out_uinUmcIn_SetSpeed						:= pPce^.ctrl.fbPce_PtbIn_Umc.Out_uinSpeedSetpoint;
pPce^.io.Out_uinUmcIn_Control						:= pPce^.ctrl.fbPce_PtbIn_Umc.Out_uinControl;

pPce^.ctrl.fbPce_PtbIn_Vpc.In_bolPumpOk				:= pPce^.io.In_bolVpc_PumpOk;
pPce^.ctrl.fbPce_PtbIn_Vpc.In_bolVacuumOk			:= pPce^.io.In_bolVpc_VacuumSensor;
pPce^.ctrl.fbPce_PtbIn_Vpc();
pPce^.io.Out_bolVpc_PumpOn							:= pPce^.ctrl.fbPce_PtbIn_Vpc.Out_bolVaccumPumpOn;

pPce^.ctrl.fbPce_PtbIn.In_bolBeltEntrySensor		:= pPce^.io.In_bolInputSensor;
pPce^.ctrl.fbPce_PtbIn.In_bolBeltExitSensor			:= pPce^.io.In_bolCornerSensor;
pPce^.ctrl.fbPce_PtbIn();

pPce^.ctrl.fbPce_PtbOut_Umc.In_uinStatus			:= pPce^.io.In_uinUmcOut_Status;
pPce^.ctrl.fbPce_PtbOut_Umc.In_intMotorActualSpeed	:= pPce^.io.In_uinUmcOut_ActualSpeed;
pPce^.ctrl.fbPce_PtbOut_Umc.In_uinMotorSetSpeed		:= pPce^.io.In_uinUmcOut_SetSpeed;
pPce^.ctrl.fbPce_PtbOut_Umc.In_uinIOData			:= pPce^.io.In_uinUmcOut_IOData1;
pPce^.ctrl.fbPce_PtbOut_Umc.In_uinECATState			:= pPce^.io.In_uinUmcOut_ECatState;
pPce^.ctrl.fbPce_PtbOut_Umc.In_strNetId				:= pPce^.io.In_strUmcOut_ECatNetId;
pPce^.ctrl.fbPce_PtbOut_Umc.In_uintPort				:= pPce^.io.In_uinUmcOut_ECatPort;
pPce^.ctrl.fbPce_PtbOut_Umc();
pPce^.io.Out_uinUmcOut_SetSpeed						:= pPce^.ctrl.fbPce_PtbOut_Umc.Out_uinSpeedSetpoint;
pPce^.io.Out_uinUmcOut_Control						:= pPce^.ctrl.fbPce_PtbOut_Umc.Out_uinControl;

pPce^.ctrl.fbPce_PtbOut.In_bolBeltEntrySensor		:= pPce^.io.In_bolCornerSensor;
pPce^.ctrl.fbPce_PtbOut.In_bolBeltExitSensor		:= pPce^.io.In_bolOutputSensor;
pPce^.ctrl.fbPce_PtbOut();

pPce^.ctrl.fbPce.In_bolPaperAvailable				:=pPce^.io.In_bolCornerSensor;
pPce^.ctrl.fbPce();
pPce^.io.Out_bolVacuumValveIn						:= pPce^.ctrl.fbPce.Out_bolVacuumValveIn;
pPce^.io.Out_bolVacuumValveOut						:= pPce^.ctrl.fbPce.Out_bolVacuumValveOut;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>6240b20a-42f7-491c-b89e-552a518d787f</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="init_Pce" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pPce">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PCE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pCtrlInst">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="fb_CtrlBase" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> instance array of all controller instances</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pCtrlCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> common interface array of all controllers (main use for PLC)</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pPce^.ctrl.fbPce_PtbIn_Vpc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPce^.id.Pce_PtbIn_Vpc);
pPce^.ctrl.fbPce_PtbIn_Umc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPce^.id.Pce_PtbIn_Umc);
pPce^.ctrl.fbPce_PtbIn.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPce^.id.Pce_PtbIn);
pPce^.ctrl.fbPce_PtbIn.Drive := ADR(pPce^.ctrl.fbPce_PtbIn_Umc);
pPce^.ctrl.fbPce_PtbIn.VacuumPump := ADR(pPce^.ctrl.fbPce_PtbIn_Vpc);

pPce^.ctrl.fbPce_PtbOut_Umc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPce^.id.Pce_PtbOut_Umc);
pPce^.ctrl.fbPce_PtbOut.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPce^.id.Pce_PtbOut);
pPce^.ctrl.fbPce_PtbOut.Drive := ADR(pPce^.ctrl.fbPce_PtbOut_Umc);

pPce^.ctrl.fbPce.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPce^.id.Pce);
pPce^.ctrl.fbPce.DriveIn := ADR(pPce^.ctrl.fbPce_PtbIn);
pPce^.ctrl.fbPce.DriveOut := ADR(pPce^.ctrl.fbPce_PtbOut);</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ab97e4c9-cf53-4c54-b273-aa215f7a464b</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="cycle_Pst" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pPst">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PST" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pPst^.ctrl.fbPst_Ptb_Umc.In_uinStatus 				:= pPst^.io.In_uinPtb_Umc_Status;
pPst^.ctrl.fbPst_Ptb_Umc.In_intMotorActualSpeed 	:= pPst^.io.In_uinPtb_Umc_ActualSpeed;
pPst^.ctrl.fbPst_Ptb_Umc.In_uinMotorSetSpeed 		:= pPst^.io.In_uinPtb_Umc_SetSpeed;
pPst^.ctrl.fbPst_Ptb_Umc.In_uinIOData				:= pPst^.io.In_uinPtb_Umc_IOData1;
pPst^.ctrl.fbPst_Ptb_Umc.In_uinECATState 			:= pPst^.io.In_uinPtb_Umc_ECatState;
pPst^.ctrl.fbPst_Ptb_Umc.In_strNetId 				:= pPst^.io.In_strPtb_Umc_ECatNetId;
pPst^.ctrl.fbPst_Ptb_Umc.In_uintPort 				:= pPst^.io.In_uinPtb_Umc_ECatPort;
pPst^.ctrl.fbPst_Ptb_Umc();
pPst^.io.Out_uinPtb_Umc_SetSpeed 					:= pPst^.ctrl.fbPst_Ptb_Umc.Out_uinSpeedSetpoint;
pPst^.io.Out_uinPtb_Umc_Control 					:= pPst^.ctrl.fbPst_Ptb_Umc.Out_uinControl;

pPst^.ctrl.fbPst_Ptb_Vpc.In_bolPumpOk 				:= pPst^.io.In_bolPtb_Vpc_PumpOk;
pPst^.ctrl.fbPst_Ptb_Vpc.In_bolVacuumOk 			:= pPst^.io.In_bolPtb_Vpc_VacuumSensor;
pPst^.ctrl.fbPst_Ptb_Vpc();
pPst^.io.Out_bolPtb_Vpc_PumpOn 						:= pPst^.ctrl.fbPst_Ptb_Vpc.Out_bolVaccumPumpOn;

pPst^.ctrl.fbPst_Ptb.In_bolBeltEntrySensor		 	:= pPst^.io.In_bolPtb_InputSensor;
pPst^.ctrl.fbPst_Ptb.In_bolBeltExitSensor 			:= pPst^.io.In_bolPtb_OutputSensor;
pPst^.ctrl.fbPst_Ptb();

pPst^.ctrl.fbPst.In_bolSensorPaperAtOperatorPos		:= pPst^.io.In_bolSensorPaperAtOperatorPos;
pPst^.ctrl.fbPst.In_bolSensorStopperPosition		:= pPst^.io.In_bolSensorStopperPosition;
pPst^.ctrl.fbPst.In_bolSensorInfeed					:= pPst^.io.In_bolSensorInfeed;
pPst^.ctrl.fbPst.In_bolSensorOutfeed				:= pPst^.io.In_bolSensorOutfeed;
pPst^.ctrl.fbPst();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>82ffccb5-01a2-4256-bb7a-01afc149eef0</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="init_Pst" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pPst">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PST" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pCtrlInst">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="fb_CtrlBase" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> instance array of all controller instances</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pCtrlCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> common interface array of all controllers (main use for PLC)</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pPst^.ctrl.fbPst_Ptb_Vpc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPst^.id.Pst_Ptb_Vpc);
pPst^.ctrl.fbPst_Ptb_Umc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPst^.id.Pst_Ptb_Umc);
pPst^.ctrl.fbPst_Ptb.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPst^.id.Pst_Ptb);
pPst^.ctrl.fbPst_Ptb.Drive := ADR(pPst^.ctrl.fbPst_Ptb_Umc); // g_a_pCtrlInst[pPst^.id.Pst_Ptb_Umc];
pPst^.ctrl.fbPst_Ptb.VacuumPump := ADR(pPst^.ctrl.fbPst_Ptb_Vpc); // g_a_pCtrlInst[pPst^.id.Pst_Ptb_Vpc];

pPst^.ctrl.fbPst.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPst^.id.Pst);
pPst^.ctrl.fbPst.Belt := ADR(pPst^.ctrl.fbPst_Ptb);; // g_a_pCtrlInst[pPst^.id.Pst_Ptb];</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>557e8472-4797-4608-acef-2cc63da5260f</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="cycle_Pts" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pPts">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PTS" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pPts^.ctrl.fbPts_Ptb_Umc.In_uinStatus 				:= pPts^.io.In_uinPtb_Umc_Status;
pPts^.ctrl.fbPts_Ptb_Umc.In_intMotorActualSpeed		:= pPts^.io.In_uinPtb_Umc_ActualSpeed;
pPts^.ctrl.fbPts_Ptb_Umc.In_uinMotorSetSpeed		:= pPts^.io.In_uinPtb_Umc_SetSpeed;
pPts^.ctrl.fbPts_Ptb_Umc.In_uinIOData				:= pPts^.io.In_uinPtb_Umc_IOData1;
pPts^.ctrl.fbPts_Ptb_Umc.In_uinECATState 			:= pPts^.io.In_uinPtb_Umc_ECatState;
pPts^.ctrl.fbPts_Ptb_Umc.In_strNetId 				:= pPts^.io.In_strPtb_Umc_ECatNetId;
pPts^.ctrl.fbPts_Ptb_Umc.In_uintPort 				:= pPts^.io.In_uinPtb_Umc_ECatPort;
pPts^.ctrl.fbPts_Ptb_Umc();
pPts^.io.Out_uinPtb_Umc_SetSpeed 					:= pPts^.ctrl.fbPts_Ptb_Umc.Out_uinSpeedSetpoint;
pPts^.io.Out_uinPtb_Umc_Control 					:= pPts^.ctrl.fbPts_Ptb_Umc.Out_uinControl;

pPts^.ctrl.fbPts_Ptb_Vpc.In_bolPumpOk 				:= pPts^.io.In_bolPtb_Vpc_PumpOk;
pPts^.ctrl.fbPts_Ptb_Vpc.In_bolVacuumOk 			:= pPts^.io.In_bolPtb_Vpc_VacuumSensor;
pPts^.ctrl.fbPts_Ptb_Vpc();
pPts^.io.Out_bolPtb_Vpc_PumpOn 						:= pPts^.ctrl.fbPts_Ptb_Vpc.Out_bolVaccumPumpOn;

IF (pPts^.ctrl.fbPts.CtrlSIf^.Cfg.bolRaxEnable = FALSE) THEN
	pPts^.ctrl.fbPts_Mdc_Umc.In_uinStatus 				:= pPts^.io.In_uinMdc_Umc_Status;
	pPts^.ctrl.fbPts_Mdc_Umc.In_intMotorActualSpeed		:= pPts^.io.In_uinMdc_Umc_ActualSpeed;
	pPts^.ctrl.fbPts_Mdc_Umc.In_uinMotorSetSpeed 		:= pPts^.io.In_uinMdc_Umc_SetSpeed;
	pPts^.ctrl.fbPts_Mdc_Umc.In_uinIOData				:= pPts^.io.In_uinMdc_Umc_IOData1;
	pPts^.ctrl.fbPts_Mdc_Umc.In_uinECATState 			:= pPts^.io.In_uinMdc_Umc_ECatState;
	pPts^.ctrl.fbPts_Mdc_Umc.In_strNetId 				:= pPts^.io.In_strMdc_Umc_ECatNetId;
	pPts^.ctrl.fbPts_Mdc_Umc.In_uintPort 				:= pPts^.io.In_uinMdc_Umc_ECatPort;
	pPts^.ctrl.fbPts_Mdc_Umc();
	pPts^.io.Out_uinMdc_Umc_SetSpeed 					:= pPts^.ctrl.fbPts_Mdc_Umc.Out_uinSpeedSetpoint;
	pPts^.io.Out_uinMdc_Umc_Control 					:= pPts^.ctrl.fbPts_Mdc_Umc.Out_uinControl;
	
	pPts^.ctrl.fbPts_Mdc.In_bolCrossPositionSensor 		:= pPts^.io.In_bolMdc_CrossPositionSensor;
	pPts^.ctrl.fbPts_Mdc.In_bolTablePositionSensor 		:= pPts^.io.In_bolMdc_TablePositionSensor;
	pPts^.ctrl.fbPts_Mdc();
ELSE
	pPts^.ctrl.fbPts_RAX_POD.In_bolHomeSwitch			:= pPts^.io.In_bolRax_PositionSensor;
	pPts^.ctrl.fbPts_RAX_POD();

	pPts^.ctrl.fbPts_RAX();
END_IF

pPts^.ctrl.fbPts_Ptb();

pPts^.ctrl.fbPts.In_bol_PaperAvailable 				:= pPts^.io.In_bolPaperSensor;
pPts^.ctrl.fbPts();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>37a42ab4-c720-4022-b266-af1a7ee7007b</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="init_Pts" pouType="function">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="pPts">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_PTS" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pCtrlInst">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="fb_CtrlBase" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> instance array of all controller instances</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pCtrlCIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> common interface array of all controllers (main use for PLC)</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pPts^.ctrl.fbPts_Ptb_Vpc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPts^.id.Pts_Ptb_Vpc);
pPts^.ctrl.fbPts_Ptb_Umc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPts^.id.Pts_Ptb_Umc);
pPts^.ctrl.fbPts_Ptb.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPts^.id.Pts_Ptb);
pPts^.ctrl.fbPts_Ptb.Drive := ADR(pPts^.ctrl.fbPts_Ptb_Umc);
pPts^.ctrl.fbPts_Ptb.VacuumPump := ADR(pPts^.ctrl.fbPts_Ptb_Vpc);

pPts^.ctrl.fbPts_Mdc_Umc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPts^.id.Pts_Mdc_Umc);
pPts^.ctrl.fbPts_Mdc.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPts^.id.Pts_Mdc);
pPts^.ctrl.fbPts_Mdc.Drive := ADR(pPts^.ctrl.fbPts_Mdc_Umc);

pPts^.ctrl.fbPts_RAX.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPts^.id.Pts_RAX);
pPts^.ctrl.fbPts_RAX.In_pAD_SIf:= pPts^.ctrl.fbPts_RAX_POD.AD_SIf;	

pPts^.ctrl.fbPts.iniAllCtrlArrays(pCtrlInst,pCtrlCIf,pPts^.id.Pts);
pPts^.ctrl.fbPts.Belt := ADR(pPts^.ctrl.fbPts_Ptb);
pPts^.ctrl.fbPts.Malteser := ADR(pPts^.ctrl.fbPts_Mdc);
pPts^.ctrl.fbPts.Servo := ADR(pPts^.ctrl.fbPts_RAX);</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>c68d0e3f-cd89-413c-85c0-14d5f7780b58</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_OvenSendDch" pouType="functionBlock">
              <interface>
                <localVars>
                  <variable name="m_pOutputData">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Oven_DCH" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Saber Inteface Variables
 -----------------------------------------------------------------</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_DataChannelSendBase</Extends>
                      <Implements>I_DataChannelSend</Implements>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="SendData" ObjectId="8f2f36b4-17d9-4d54-812a-f7b5ad3dc012">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="udiDataSize">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="pData">
                          <type>
                            <pointer>
                              <baseType>
                                <BYTE />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="SendData" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SendData := FALSE;

IF m_eState = E_PlcSaberDHCState.WaitForJob THEN
	IF (udiDataSize &gt; 0 ) AND (pData &lt;&gt; TC3_MEMMAN.NULL) THEN
		TC2_SYSTEM.MEMCPY(destAddr := m_pOutputData, srcAddr := pData, n := udiDataSize);
		m_eState := E_PlcSaberDHCState.SendData;	
		SendData := TRUE;
	END_IF	
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="InitChannel" ObjectId="e7571f08-9c15-46a6-8563-24c0d0c5e721">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="udiDataSize">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="pOutputData">
                          <type>
                            <pointer>
                              <baseType>
                                <BYTE />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="InitChannel" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">InitChannel := FALSE;

IF udiDataSize &gt; 0 THEN
	IF pOutputData &lt;&gt; TC3_MEMMAN.NULL THEN
		m_uinDataSize := udiDataSize;
		m_pOutputData := pOutputData;
		m_eState := E_PlcSaberDHCState.Init;
		InitChannel := TRUE;
	END_IF
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f407cdf0-70d7-483e-bcc5-d160524f1ab6</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/union" handleUnknown="implementation">
            <union name="U_JCL_Message">
              <variable name="Cmd">
                <type>
                  <derived name="T_JCL_Command" />
                </type>
              </variable>
              <variable name="State">
                <type>
                  <derived name="T_JCL_State" />
                </type>
              </variable>
              <variable name="PrintDone">
                <type>
                  <derived name="T_JCL_PrintDone" />
                </type>
              </variable>
              <variable name="ReqCleaning">
                <type>
                  <derived name="T_JCL_RequestCleaning" />
                </type>
              </variable>
              <variable name="AlmMsg">
                <type>
                  <derived name="T_JCL_AlmMsg" />
                </type>
              </variable>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="pack_mode" Value="1" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1119fcd8-70d3-4aab-a99f-59a689bde4c4</ObjectId>
                </data>
              </addData>
            </union>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/libraries" handleUnknown="implementation">
            <Libraries>
              <Library Name="Base_Elements, 0.0.1.58 (Vistaprint)" Namespace="Base_Elements" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Base_PLC, 0.3.5.14 (Vistaprint)" Namespace="Base_PLC" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_EtherCAT, 3.3.5.0 (Beckhoff Automation GmbH)" Namespace="Tc2_EtherCAT" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_MC2, 3.3.9.0 (Beckhoff Automation GmbH)" Namespace="Tc2_MC2" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_S5S7Com, 3.3.0.0 (Beckhoff Automation GmbH)" Namespace="Tc2_S5S7Com" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_Standard, 3.3.0.0 (Beckhoff Automation GmbH)" Namespace="Tc2_Standard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_System, 3.3.9.0 (Beckhoff Automation GmbH)" Namespace="Tc2_System" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_TcpIp, 3.3.2.0 (Beckhoff Automation GmbH)" Namespace="Tc2_TcpIp" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_Utilities, 3.3.10.0 (Beckhoff Automation GmbH)" Namespace="Tc2_Utilities" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false">
                <Parameters>
                  <Parameter Name="NMAXLICENSES" Value="50" />
                </Parameters>
              </Library>
              <Library Name="Tc3_Interfaces, 3.3.0.0 (Beckhoff Automation GmbH)" Namespace="Tc3_Interfaces" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc3_MemMan, 3.3.1.0 (Beckhoff Automation GmbH)" Namespace="Tc3_MemMan" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc3_Module, 3.3.6.0 (Beckhoff Automation GmbH)" Namespace="Tc3_Module" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9ca4c198-5f7b-460e-9c01-d829e63a3734</ObjectId>
                </data>
              </addData>
            </Libraries>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>de59b8a9-6bdb-4305-a846-8503feec1f93</ObjectId>
          </data>
        </addData>
      </resource>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Object Name="BasePpt" ObjectId="de59b8a9-6bdb-4305-a846-8503feec1f93">
          <Object Name="Library Manager" ObjectId="9ca4c198-5f7b-460e-9c01-d829e63a3734" />
          <Folder Name="GVLs">
            <Object Name="Constants" ObjectId="8f2047b0-55bf-4110-99a3-c8cf7e1db3c2" />
          </Folder>
          <Folder Name="POUs">
            <Folder Name="Controller">
              <Folder Name="Driver">
                <Folder Name="IBH (IBH Link)">
                  <Object Name="FB_IBH" ObjectId="b0e34786-1945-4fbf-ba31-18ca8b1b1f1d">
                    <Object Name="sta_OFF" ObjectId="079a83bc-f368-473d-9a58-2d5eacbc7942" />
                    <Object Name="sta_PON" ObjectId="08684d9c-e6b9-47e2-aa66-b28ab5b7c8a7" />
                    <Object Name="CtrlInit" ObjectId="0accaec6-7a10-4d05-90a8-2093259b81bc" />
                    <Object Name="setTemp" ObjectId="12b4e731-abaa-42a5-a1ec-d738ad8ef065" />
                    <Object Name="FB_init" ObjectId="1e98861f-0bc6-4fd1-8c68-a6e91c74e1a0" />
                    <Object Name="sta_CONNECTBusy" ObjectId="21ea10b9-d876-412b-a891-4fb2c3fb3e07" />
                    <Object Name="bitAccess" ObjectId="258f5bd2-1efd-436d-9211-e24d2dd2a567" />
                    <Object Name="sta_READBusy" ObjectId="2cb0706c-9fd7-431b-9abe-33bbdc307e7f" />
                    <Object Name="sta_WRITEBusy" ObjectId="38c336c1-bf31-4e72-aeaa-edfcb54fee24" />
                    <Object Name="sta_WRITE" ObjectId="38f8544c-c647-41db-be4c-f8d9cdd1890a" />
                    <Object Name="sta_DISCONNECT" ObjectId="3ee57a3d-048a-471e-8c35-53387a812277" />
                    <Object Name="setAckError" ObjectId="44553939-dd9d-4573-96eb-714c3f62bf0d" />
                    <Object Name="getCtrlSIf" ObjectId="5d62d1c6-ef1a-4acf-8a92-c1d071f8a399" />
                    <Object Name="setRun" ObjectId="65c28abc-872d-4974-ac52-14b618da33da" />
                    <Object Name="sta_READ" ObjectId="75bf96e5-4d01-4337-b000-089b7dd4522e" />
                    <Object Name="sta_PONBusy" ObjectId="81d2c900-5bf7-4d3b-87af-25331d6880a6" />
                    <Object Name="sta_OFFBusy" ObjectId="9c944823-43df-4c10-babf-48ea7dfe4b42" />
                    <Object Name="CtrlSIf" ObjectId="ac1b81dd-4af3-4d7b-b0e2-b818e149d37c" />
                    <Object Name="StateMachine" ObjectId="b6378721-e5d5-48a1-a704-766c361a5de7" />
                    <Object Name="getCmdState" ObjectId="c3d516d7-ca61-4e12-ab7d-eb014c048419" />
                    <Object Name="setAirflow" ObjectId="cc113977-e485-4cd4-a01e-b812359ebd45" />
                    <Object Name="Always" ObjectId="ce678287-d0c0-4c11-aa96-f26232737c22" />
                    <Object Name="setOff" ObjectId="cf6019e3-6f56-4571-9556-7b2c8be4ce3a" />
                    <Object Name="setSpeed" ObjectId="e1ee721f-99f7-487d-be02-76937e33dab0" />
                    <Object Name="setBeltOn" ObjectId="eb96f45a-ccbb-4b9d-b34a-02806c599568" />
                    <Object Name="sta_CONNECT" ObjectId="ee8c16a5-8b81-47d9-b812-1c3e8e6f51a5" />
                    <Object Name="setStandby" ObjectId="ef93d172-8b44-42a4-9172-7b1faf91f740" />
                    <Object Name="sta_DISCONNECTBusy" ObjectId="f12d780c-aad8-4f99-8cd6-b3f5cc2ebfc1" />
                  </Object>
                  <Object Name="IBH_CmdState" ObjectId="eb94b744-ef37-4bb9-8490-3ce9eadc8ed4" />
                  <Object Name="T_Ctrl_SIf_IBH" ObjectId="9b8b2b04-8aab-48c2-b146-879d3dea3eba" />
                  <Object Name="T_Ctrl_SIf_IBH_Cfg" ObjectId="3ba03782-c7db-4092-abc5-720424700977" />
                  <Object Name="T_Ctrl_SIf_IBH_Cur" ObjectId="491621bb-4870-4bbd-b8aa-17de8d584c9e" />
                  <Object Name="T_Ctrl_SIf_IBH_Par" ObjectId="8cb50149-43c0-4bf3-885b-bef5707ac5cf" />
                </Folder>
                <Folder Name="POD (PLCopen Driver)">
                  <Object Name="E_AmpType" ObjectId="b43074b2-0cf2-4e30-9c36-a19833feca8e" />
                  <Object Name="E_POD_UseHomeSwitch" ObjectId="cfc63ea8-8688-4ab6-9cf1-fb245a660988" />
                  <Object Name="E_ValueType" ObjectId="9db550c9-6d64-4366-9604-6e11beeaedee" />
                  <Object Name="FB_POD" ObjectId="48ed7df6-9b05-464b-ba09-66aaed082b6c">
                    <Object Name="AD_SIf" ObjectId="0107c89c-0665-4da6-ab1e-8a8e22425ce4" />
                    <Object Name="sta_PowerOnBusy" ObjectId="011f25cd-140c-4193-a2ba-9505be63b74e" />
                    <Object Name="sJobReadParameter" ObjectId="1c10f95a-852f-431a-85f7-e253bdbff567" />
                    <Object Name="sta_WaitForJob" ObjectId="1fce520a-3e05-4c62-b860-025b0942b262" />
                    <Object Name="sta_ModMoveBusy" ObjectId="21a7c9be-5961-4f35-969e-689970790486" />
                    <Object Name="sta_PowerOff" ObjectId="237a76e0-1899-4f79-9270-ebe551dd3a3b" />
                    <Object Name="getCmdState" ObjectId="313d5554-e956-47e2-8d43-c84d698c05d2" />
                    <Object Name="sJobReadParameterNC" ObjectId="37aeaf75-c9ba-47db-8e5b-1a766ffdc49a" />
                    <Object Name="sta_QStopBusy" ObjectId="5614d7b2-f83a-4c60-93dc-62f8eba14680" />
                    <Object Name="sta_NegMoveBusy" ObjectId="76c867bf-c27c-4cfb-9b40-249ef6609504" />
                    <Object Name="CycleEndDuty" ObjectId="a5717383-8102-439e-9a85-e1b67dbdcf82" />
                    <Object Name="sta_PosJogBusy" ObjectId="b04edc0b-7649-4df7-ae8d-fd4c1dff9711" />
                    <Object Name="sta_PosMoveBusy" ObjectId="b0c35e41-2d9a-4508-b394-f51655701e1d" />
                    <Object Name="sta_HomeBusy" ObjectId="bbfad2b9-4d4c-4ad0-9062-e5fc555070b3" />
                    <Object Name="CycleStartDuty" ObjectId="cd6138c7-9e91-443a-8acf-b6aa59300a45" />
                    <Object Name="sJobWriteParameterNC" ObjectId="d42fbcb8-87b3-42e8-84a0-6913380bc306" />
                    <Object Name="StateMachine_Service" ObjectId="ddf9d3ac-80a2-4ce9-8b91-c70ff780f3bd" />
                    <Object Name="sta_RelMoveBusy" ObjectId="e1fa452e-4c76-4d9d-93ff-507d9e297524" />
                    <Object Name="sta_StopBusy" ObjectId="e5a8ae44-5543-4998-8aa2-e795cb4cd3b6" />
                    <Object Name="StateMachine" ObjectId="e994bd16-0a6d-4cba-9c38-86d8f9df6463" />
                    <Object Name="sta_NegJogBusy" ObjectId="eba8d1a6-2945-4039-beef-958d84c8e2b3" />
                    <Object Name="sJobWriteParameter" ObjectId="ef9e92ba-f74c-4dbe-a182-01fc5f754d41" />
                    <Object Name="sta_AbsMoveBusy" ObjectId="f338cde0-b095-43a7-b964-e6cdf75f5843" />
                    <Object Name="CtrlInit" ObjectId="fd31d9c7-1fa0-425c-92a3-57a49423f194" />
                    <Object Name="sta_Error" ObjectId="ff8a2d7e-acb2-4511-a798-0dc3f4301ae1" />
                  </Object>
                  <Object Name="POD_Cmd" ObjectId="929106cd-f01b-40f8-aa09-ae2b396b3ed0" />
                  <Object Name="POD_Const" ObjectId="3db20bdd-54f7-4841-b871-6cc1b7237e45" />
                  <Object Name="T_POD" ObjectId="d5023c31-0777-4e70-9274-770f3c9fb1da" />
                  <Object Name="T_POD_Cfg" ObjectId="9a7641d6-234c-4570-9f7a-048ed4fda205" />
                  <Object Name="T_POD_DigitalInputs" ObjectId="7bcbbfd1-81f0-4ff4-aa2d-09f1fdef954e" />
                  <Object Name="T_POD_Error" ObjectId="53170a35-0272-4571-871a-1e44be633ee3" />
                  <Object Name="T_POD_Move" ObjectId="2d2fdfc8-8551-4038-8980-0c2442a9f2d6" />
                  <Object Name="T_POD_Service" ObjectId="88eb688c-fc87-473c-af5b-06a5bd139bf7" />
                  <Object Name="T_POD_StateMachine" ObjectId="f62271a7-5f40-4c24-9dbc-13971324a749" />
                  <Object Name="T_POD_Status" ObjectId="701949fe-00c5-44cf-912e-33db26c1ddf2" />
                  <Object Name="T_POD_StatusWord" ObjectId="e87a1ec7-a1f2-40ac-a515-3e362015acae" />
                </Folder>
                <Folder Name="PTR [Paper Tracker]">
                  <Object Name="E_PTR_Status" ObjectId="bd121ee2-57ce-4674-9873-2a63e8cefad4" />
                  <Object Name="FB_PTR" ObjectId="aadcac38-f5fd-40b3-9942-862d48d96ecb">
                    <Object Name="Push" ObjectId="3bd42fac-05be-4d58-a731-e7926fc5bb2c" />
                    <Object Name="Pop" ObjectId="782b3b04-974f-448f-98e0-75f16bcea2d3" />
                    <Object Name="FB_init" ObjectId="2998101c-1561-4b49-bac3-d73080087d98" />
                    <Object Name="Reset" ObjectId="bb01b83a-0aee-4ce7-b33c-c20369017ed9" />
                    <Object Name="Insert" ObjectId="de40f836-15e6-40ed-bacf-c50f2020fa3b" />
                    <Object Name="EnterComplete" ObjectId="6a2fc8dd-a7b1-441b-837b-5cbf52831705" />
                    <Object Name="TimeBase" ObjectId="d556835c-92d4-4d41-a10e-841f369ce8a1" />
                    <Object Name="PositionList" ObjectId="65035646-2310-45c0-acb9-1e4eedf109aa" />
                    <Object Name="PaperOnBelt" ObjectId="ab4c9734-46a4-4a76-8c9c-28c14fb51474" />
                    <Object Name="PaperEntryOffset" ObjectId="fa805dbb-2846-429a-a1d3-329aeb64010e" />
                    <Object Name="BeltLength" ObjectId="7ab86a98-e878-4580-9b2a-a7a6371ad55d" />
                  </Object>
                  <Object Name="T_PTR_STRUCT" ObjectId="55c53e18-1b57-48a7-bc4a-2f4811c78acc" />
                </Folder>
                <Folder Name="TCP (TCP communication driver)">
                  <Object Name="E_ALM_TCP" ObjectId="8097488a-8c0c-497f-b1bc-2b49aa4c9ff8" />
                  <Object Name="FB_TCP" ObjectId="609a1fce-4485-45bf-bed3-527e862ab814">
                    <Object Name="sta_CONNECT" ObjectId="012444c2-4f4c-4e85-8562-de1e9f46c149" />
                    <Object Name="Always" ObjectId="04443b31-aa81-49ea-8367-9dea755a08ac" />
                    <Object Name="StateMachine" ObjectId="3cb57e38-141e-4dd7-970e-0e4941e75bee" />
                    <Object Name="sta_CLOSE" ObjectId="47f3292b-7439-43f8-81ff-d5483f06761c" />
                    <Object Name="sta_CONNECTBusy" ObjectId="5e77cbec-e67c-4c84-b6f6-7e55aead2e7b" />
                    <Object Name="CtrlSIf" ObjectId="61395e9e-4929-4e3c-b49a-241234675ebf" />
                    <Object Name="ReceiveDataSequence" ObjectId="6223387b-56c6-4f61-b93b-45a4f434992c" />
                    <Object Name="SendDataSequence" ObjectId="7678623a-1051-42f6-b7bd-f6b96cc6e55f" />
                    <Object Name="M_Push" ObjectId="7883c642-dc3f-4d2e-8350-26171b083dbe" />
                    <Object Name="getCtrlSIf" ObjectId="93d2be0a-cef5-4a77-8dd0-13d55ddeeb32" />
                    <Object Name="sta_ERROR" ObjectId="97cd2621-3b4d-46ec-8472-5429b0b9a4c2" />
                    <Object Name="FB_init" ObjectId="9f31c568-7162-437c-8e00-9f15ed125f3e" />
                    <Object Name="sta_CLOSEBusy" ObjectId="a785f369-92e3-4aee-a34d-b351690afae6" />
                    <Object Name="CycleEndDuty" ObjectId="c30c6ca9-5d88-4952-9272-3ecf84574e81" />
                    <Object Name="sta_ERRORQuit" ObjectId="c4893612-b17e-49b2-a4fe-fe76eec50cbf" />
                    <Object Name="getCmdState" ObjectId="ca134720-35a0-4cc7-b397-1701408cae06" />
                    <Object Name="CtrlInit" ObjectId="d3032c55-8d3a-4753-8283-b1aeab934c50" />
                    <Object Name="CycleStartDuty" ObjectId="e5befbef-7a13-4c15-81d6-9234fa61bb5a" />
                    <Object Name="M_Pop" ObjectId="ec84a9f0-340d-48b3-8bd3-8828de31544b" />
                  </Object>
                  <Object Name="ST_Header" ObjectId="afb99a30-6c22-4c5d-93b6-5ebee914fe84" />
                  <Object Name="TCP_CmdState" ObjectId="8ba581ac-1d4c-4590-97d0-e86c92da7085" />
                  <Object Name="TCP_Constants" ObjectId="6c4d2dff-dec3-479f-9300-966f151d9dd1" />
                  <Object Name="T_Ctrl_SIf_TCP" ObjectId="31d6a5c0-0d72-4129-828d-b5b3b77fea5f" />
                  <Object Name="T_Ctrl_SIf_TCP_Cfg" ObjectId="a494adfe-688b-4688-bed7-5420328bb8fc" />
                  <Object Name="T_Ctrl_SIf_TCP_Cur" ObjectId="2ee28923-bec7-4851-a70a-02b3725582e6" />
                  <Object Name="T_Ctrl_SIf_TCP_Par" ObjectId="e07407bd-45b5-40f9-970b-e4fde5b81fbc" />
                </Folder>
              </Folder>
              <Folder Name="Lvl0">
                <Folder Name="GRR (Granulate Remote)">
                  <Object Name="E_ALM_GRR" ObjectId="2ddd3ec5-985c-4274-8386-49a72f6ef000" />
                  <Object Name="FB_GRR" ObjectId="e59aaea5-7c5d-4e22-a01a-aa7ca2d8a38d">
                    <Object Name="sta_OFF" ObjectId="01abf0d9-cea3-434a-9ff2-b96aa3138c02" />
                    <Object Name="StateMachine" ObjectId="0d8f7722-1d1f-4a5e-9267-711c5ab50a30" />
                    <Object Name="Always" ObjectId="3ca0e0d9-d2da-4930-bd5a-734a38a26e0a" />
                    <Object Name="IoOutBridge" ObjectId="53670b8d-47c2-43a7-9bdc-52283635755d" />
                    <Object Name="sta_ERROR" ObjectId="74d2b513-0985-4a05-a74d-8d4e67c5adf4" />
                    <Object Name="CtrlSIf" ObjectId="7a4e8331-ad47-4ba5-b879-cea967c63058" />
                    <Object Name="sta_RUNBusy" ObjectId="9345503d-702c-4a29-8854-949d9b17de96" />
                    <Object Name="IoInBridge" ObjectId="93e78208-4a34-41d7-bf95-5e0ff37fb835" />
                    <Object Name="sta_PON" ObjectId="b65d2b03-ae1a-44e1-b1b8-0d2cfc836112" />
                    <Object Name="sta_RUN" ObjectId="be96e68e-10ee-4bec-8003-10de61798d4d" />
                    <Object Name="sta_ERRORQuit" ObjectId="c1bad505-2d26-4880-8acc-2cfc54839da4" />
                    <Object Name="sta_PONBusy" ObjectId="d09c0836-06ff-4257-9794-36fdc29c9264" />
                    <Object Name="FB_init" ObjectId="d2b04e50-1223-4a10-acbd-066da6e3b25d" />
                    <Object Name="getCtrlSIf" ObjectId="e19a1372-56b7-4fad-b15f-d75fbb96101f" />
                    <Object Name="sta_OFFBusy" ObjectId="f8a302e7-6b01-4806-8faf-6811e11ecba7" />
                  </Object>
                  <Folder Name="helper">
                    <Object Name="cycle_Grr" ObjectId="6622eaea-7002-4bb9-9027-a844e797871b" />
                    <Object Name="init_Grr" ObjectId="28c11cc5-75dd-4c5f-9183-c6956d5e8d7a" />
                    <Object Name="T_GRR" ObjectId="4c52fe16-42bd-438e-8711-f613815f983f" />
                    <Object Name="T_GRR_CTRL" ObjectId="7e0e6bd2-bcf5-4f53-978f-1f970a336a31" />
                    <Object Name="T_GRR_ID" ObjectId="f60abe5f-2361-4659-9b25-9a6949e9a3f5" />
                    <Object Name="T_GRR_IO" ObjectId="e10f9a09-a4b3-49fa-a899-278d341d977b" />
                  </Folder>
                  <Object Name="T_Ctrl_SIf_GRR" ObjectId="ce689142-c101-4ab0-84e2-c32c97551540" />
                  <Object Name="T_Ctrl_SIf_GRR_Cfg" ObjectId="4330c1f4-231e-43ce-bcf1-0e60f4afa87b" />
                  <Object Name="T_Ctrl_SIf_GRR_Cur" ObjectId="870c1da3-b9c3-4c46-8548-558c22626437" />
                  <Object Name="T_Ctrl_SIf_GRR_In" ObjectId="22254ce4-f556-4683-82d2-1ce64b03f1a1" />
                  <Object Name="T_Ctrl_SIf_GRR_Out" ObjectId="00082939-1afc-4599-9f00-17ccfe7e379a" />
                  <Object Name="T_Ctrl_SIf_GRR_Par" ObjectId="acc58138-5a92-4dd5-a90e-bda48795aadd" />
                </Folder>
                <Folder Name="JCL (Jetter Client)">
                  <Object Name="E_ALM_JCL" ObjectId="b853a26a-b5c1-44a1-8eff-dcf7412d0d10" />
                  <Object Name="FB_JCL" ObjectId="653d1efa-6adf-4284-8977-9316a5e2dba4">
                    <Object Name="getCtrlSIf" ObjectId="296d8e44-410f-44e7-8197-7f282e489a38" />
                    <Object Name="cmdSTANDBY" ObjectId="36a43e8f-6bb6-4396-981e-6aec547a8539" />
                    <Object Name="sta_CLEANINGBusy" ObjectId="515bb4f2-62b4-4509-b6d7-9bd12ca30a58" />
                    <Object Name="StateMachine" ObjectId="5308f54e-fe8d-4221-9034-66ae07629cb3" />
                    <Object Name="sta_OFF" ObjectId="556f1e63-60be-4b6b-bf31-c9ae7fe1ee9f" />
                    <Object Name="sta_MANUALMODE" ObjectId="57b21fe2-6d88-4268-b531-a2b3efb37588" />
                    <Object Name="CtrlInit" ObjectId="58a1a65a-6b15-458d-bfde-693fdee9bd47" />
                    <Object Name="cmdOFF" ObjectId="59dfe850-7730-45f1-8cac-9075556df3da" />
                    <Object Name="sta_PONBusy" ObjectId="654f0c39-c043-40ea-8aa5-b5bce8072d53" />
                    <Object Name="CtrlSIf" ObjectId="6abba3ed-3c06-4eaa-81e7-6325df6e6121" />
                    <Object Name="RequestState" ObjectId="6c821a16-9064-48b5-9392-ee72e76d8011" />
                    <Object Name="TCP" ObjectId="6da83431-622b-4c04-b4af-aff27d6d87be" />
                    <Object Name="cmdCALIBRATION" ObjectId="76030ac2-b263-4e17-9080-2aac7f7b88b4" />
                    <Object Name="sta_PON" ObjectId="791ac03d-e850-4050-ae04-95c6b9eb127d" />
                    <Object Name="sta_CALIBRATIONBusy" ObjectId="8a54be7c-6900-4651-bb67-5b804ef8e913" />
                    <Object Name="sta_EOFF" ObjectId="8c5a4ef0-e6c0-44f4-bbef-a93d76be3e6c" />
                    <Object Name="sta_CLEANING" ObjectId="8f09f170-5512-41a3-9c39-bd9116033caf" />
                    <Object Name="checkChildAlmClass" ObjectId="90ddf29a-ca4a-4017-9fc1-27742aa7e5f1" />
                    <Object Name="cmdCLEAN" ObjectId="c1e87bbb-d38a-4493-8c2d-ba54ea97a57f" />
                    <Object Name="Always" ObjectId="c336f897-42f5-4a0b-ae9b-7540dcddc531" />
                    <Object Name="sta_EOFFBusy" ObjectId="c5edad98-30e5-41ef-9adf-477110a900d8" />
                    <Object Name="sta_OFFBusy" ObjectId="c8e413b0-cba2-470b-9102-95d7a8fea93e" />
                    <Object Name="sta_RUNBusy" ObjectId="ca7f9e3f-63f4-4555-b1e8-2b882bfddf30" />
                    <Object Name="sta_STANDBYBusy" ObjectId="d928f2ad-c37d-490e-a6a7-2b24c6411c3b" />
                    <Object Name="sta_CONNECTBusy" ObjectId="d9f12384-1f30-48ca-9331-c1298072043c" />
                    <Object Name="sta_RUN" ObjectId="e00be5f7-dd05-4b46-b2b0-9660f35afb71" />
                    <Object Name="sta_ERROR" ObjectId="e1c312d7-a67c-4057-b56c-13f76f80f10c" />
                    <Object Name="cmdPON" ObjectId="e7846860-4b92-4abf-a39b-2e23b2a42de9" />
                    <Object Name="sta_STANDBY" ObjectId="e992415a-6e20-4037-b48f-d90709c0e0f9" />
                    <Object Name="sta_ERRORQuit" ObjectId="eab34da0-1294-4781-ab7c-e523a624984f" />
                    <Object Name="getCmdState" ObjectId="ecda697d-3315-4078-829a-5c07a7917a21" />
                    <Object Name="cmdRUN" ObjectId="f461cd4d-8c10-4203-b54b-f65d70f699d7" />
                    <Object Name="sta_CALIBRATION" ObjectId="f4c7a7ff-10f9-490e-999b-fe4298d5acb3" />
                    <Object Name="FB_init" ObjectId="f609fb77-8c5d-4bf2-96c1-8df113779cc5" />
                    <Object Name="HandleReceiveData" ObjectId="f9e56544-6ded-4fbe-a304-532bff156f35" />
                    <Object Name="ResetAlarms" ObjectId="fc16c660-044c-4219-9c22-fdf6339ad93d" />
                  </Object>
                  <Folder Name="helper">
                    <Object Name="cycle_Jcl" ObjectId="839d184d-d948-4512-8110-16f2ec46e840" />
                    <Object Name="init_Jcl" ObjectId="5bd12865-b25c-4d1a-93af-a72749daa79d" />
                    <Object Name="T_JCL" ObjectId="deba1ac3-57ec-4a28-9daf-015244a7c190" />
                    <Object Name="T_JCL_CTRL" ObjectId="00930d49-79c5-4a59-ae68-6a1bee28264a" />
                    <Object Name="T_JCL_ID" ObjectId="0276c646-1b20-454f-a9be-07bc04a1c272" />
                    <Object Name="T_JCL_IO" ObjectId="6eee058d-4fb6-4943-b523-089a0511865e" />
                  </Folder>
                  <Object Name="JCL_CmdState" ObjectId="1a691d1b-6c31-4111-bdb1-ac887aba7a5a" />
                  <Object Name="JCL_Constants" ObjectId="3fe6c60f-dddf-454d-ab8f-67efeaf9a481" />
                  <Object Name="T_Ctrl_SIf_JCL" ObjectId="f7e7c82b-01b4-493d-8a9c-45d8ec1b6473" />
                  <Object Name="T_Ctrl_SIf_JCL_Cfg" ObjectId="5e340ff8-de4a-41a4-b959-28c982227007" />
                  <Object Name="T_Ctrl_SIf_JCL_Cur" ObjectId="e7f9926f-b2cb-4263-b3d5-d860868f1b2f" />
                  <Object Name="T_Ctrl_SIf_JCL_Par" ObjectId="8716b657-93ff-492a-961f-37047f3203e1" />
                  <Object Name="T_JCL_AlmMsg" ObjectId="0c07c606-a1b3-444e-807a-b50d491e875b" />
                  <Object Name="T_JCL_Command" ObjectId="0412d4c4-bcfa-4227-b98e-338e8dd9b893" />
                  <Object Name="T_JCL_PrintDone" ObjectId="9f680572-9ccc-48de-a33f-469bfd13c5c9" />
                  <Object Name="T_JCL_RequestCleaning" ObjectId="778e63b8-825d-4183-8461-387e623ae773" />
                  <Object Name="T_JCL_State" ObjectId="55fbdeb3-00cd-4653-a102-3e2bb8aaf928" />
                  <Object Name="U_JCL_Message" ObjectId="1119fcd8-70d3-4aab-a99f-59a689bde4c4" />
                </Folder>
                <Folder Name="RAX(Rotative Axis)">
                  <Object Name="E_ALM_RAX" ObjectId="f14ae739-688e-446b-85ca-a0d9f68ab153" />
                  <Object Name="FB_RAX" ObjectId="1ba66dca-9f6b-4b33-9c14-53cbd4cf9f57">
                    <Object Name="sta_REL_POSBusy" ObjectId="0377a83a-c4f6-40aa-bdd4-82ca60c1426a" />
                    <Object Name="sta_STOPBusy" ObjectId="0a4c90f8-4580-4d2a-8683-1d4842c61e7c" />
                    <Object Name="sta_POSBusy" ObjectId="0e46b232-13b9-44cb-a548-d646006dff62" />
                    <Object Name="FB_init" ObjectId="0e65f7e0-c59f-42a6-bb29-bc8457ae1567" />
                    <Object Name="sta_EOFF" ObjectId="107e77c3-5d0b-4cc9-985d-dcf2cda06cf7" />
                    <Object Name="IoOutBridge" ObjectId="1cb9b272-f8b8-4e66-ae2d-f3347c3e1236" />
                    <Object Name="StateMachine" ObjectId="2c8b1cd8-aeca-423d-b68f-e9b5d4bc3f75" />
                    <Object Name="CtrlSIf" ObjectId="2db2a783-c62d-4fdd-b68b-65450c8c6487" />
                    <Object Name="sta_OFF" ObjectId="35756167-7bf1-4a34-b1ec-d2ee8c95bfa6" />
                    <Object Name="sta_INIT" ObjectId="3da47070-75d7-4ab8-83f6-9bce02760ef2" />
                    <Object Name="sta_POS" ObjectId="3ee8fe20-6b49-472c-a2fc-6ad001bad3fc" />
                    <Object Name="Always" ObjectId="47c447e4-43f3-4434-8ed1-0a3e80ab5fb3" />
                    <Object Name="sta_ERRORQuit" ObjectId="57274842-7936-4cc4-968f-82a39c04981d" />
                    <Object Name="sta_EOFFBusy" ObjectId="59914de7-a7a1-4b41-8a57-f23c67be8e13" />
                    <Object Name="sta_OFFBusy" ObjectId="84353448-f703-49d7-807c-2a68756144ab" />
                    <Object Name="getCmdState" ObjectId="a31f3e24-3d7b-421c-b031-ea538afe6281" />
                    <Object Name="sta_INITBusy" ObjectId="a52477a7-05e3-4787-9f30-7673c625fce7" />
                    <Object Name="sta_JOG_POS" ObjectId="ac865721-f27f-4cb4-919c-6530bb58d836" />
                    <Object Name="sta_JOG_NEG" ObjectId="b3f7d9ff-43aa-42d4-b54c-191b40af9261" />
                    <Object Name="sta_ERROR" ObjectId="c0533c34-4a67-42ac-a5d0-b8a72b291177" />
                    <Object Name="sta_STOP" ObjectId="c17e605b-93ab-4039-9cff-7fc4026629eb" />
                    <Object Name="getDirection" ObjectId="c85ee9df-cc93-49af-8e72-744de0bff247" />
                    <Object Name="sta_REL_POS" ObjectId="d435c19e-9fe7-47a6-ad92-e438bae89375" />
                    <Object Name="sta_Turn" ObjectId="db4ccf37-ea3d-42c3-b3a3-3db100d2d4ee" />
                    <Object Name="sta_TurnBusy" ObjectId="fe6b38c5-6ec5-47f1-b4de-d9a0669e7a42" />
                  </Object>
                  <Object Name="fSetPar" ObjectId="254c1726-95bb-4634-9e35-6b1cde5fd766" />
                  <Object Name="RAX_CmdState" ObjectId="bef9e753-3e0a-4663-94bb-e25ce40d1284" />
                  <Object Name="T_Ctrl_SIf_RAX" ObjectId="5521d3a6-59b5-4873-803a-d230473d6ada" />
                  <Object Name="T_Ctrl_SIf_RAX_Cfg" ObjectId="fabe0b57-7541-495a-a5ef-9ec0831620b7" />
                  <Object Name="T_Ctrl_SIf_RAX_Cur" ObjectId="842fb757-2b8f-4768-ab11-5f7866ab5764" />
                  <Object Name="T_Ctrl_SIf_RAX_Ilk" ObjectId="8ccfee73-1986-406a-8dee-758faea7be09" />
                  <Object Name="T_Ctrl_SIf_RAX_Par" ObjectId="ab33df0c-5c7f-4883-8d83-f3076b888399" />
                </Folder>
              </Folder>
              <Folder Name="Lvl1">
                <Folder Name="BCH (Barcode with DataChannel)">
                  <Object Name="BCH_CmdState" ObjectId="3736a2d1-418b-4cfc-bffd-175ee3c4e6cf" />
                  <Object Name="E_ALM_BCH" ObjectId="df979184-d6d1-4b15-b4fe-88c5aecbe462" />
                  <Object Name="FB_BCH" ObjectId="a692388c-4305-475f-ae8e-9d89dea2875c">
                    <Object Name="getCtrlSIf" ObjectId="059bfe4c-1d9f-4b82-85ff-b701bf32ec9d" />
                    <Object Name="sta_OFFBusy" ObjectId="066e1867-386b-43b1-86aa-1a62e5b87ca5" />
                    <Object Name="getCmdState" ObjectId="106a229c-825d-48ee-b288-b2da97fc5034" />
                    <Object Name="sta_TestSequence" ObjectId="298e2b24-404f-44bf-bd24-f8ef62d0ca59" />
                    <Object Name="CtrlInit" ObjectId="532527d0-c678-4587-a80f-56f9e0762432" />
                    <Object Name="BarcodeReader" ObjectId="5331155f-5172-4619-aefd-236a4be06b42" />
                    <Object Name="sta_OFF" ObjectId="571c222c-8fc7-4b9c-b4f1-594f806c4a0c" />
                    <Object Name="DataChannel" ObjectId="70ea4189-18d2-4bf2-9c05-1e47a31f413a" />
                    <Object Name="FB_init" ObjectId="7a19cfd8-0df5-4789-9802-e740c4de89fc" />
                    <Object Name="Always" ObjectId="8a4ccd7c-9661-4c75-bb2e-e32fdc0f2ee0" />
                    <Object Name="CtrlSIf" ObjectId="96aea3a2-a2b1-4983-a565-a3260914589b" />
                    <Object Name="StateMachine" ObjectId="987d2d63-fa5c-4fac-9ed3-6e19abb4e578" />
                    <Object Name="sta_RUN" ObjectId="afcf114c-08eb-48a0-8413-11ccb8967cf5" />
                    <Object Name="sta_ERROR" ObjectId="dae2e508-4fbf-467c-aaaf-bc0034a3438a" />
                    <Object Name="sta_ERRORQuit" ObjectId="e01dbd7b-2b28-4435-9a3a-97cb1f6d2ac0" />
                    <Object Name="sub_BarcodeReading" ObjectId="e7906fc3-ca38-4b54-a38a-29d8239d4989" />
                    <Object Name="IoInBridge" ObjectId="f3be96ce-5b92-4429-8a5c-a03481bf0983" />
                    <Object Name="sta_RUNBusy" ObjectId="f5999d3e-aed9-4d7e-bfbb-45181535c06b" />
                  </Object>
                  <Folder Name="helper">
                    <Object Name="cycle_Bch" ObjectId="964d7c0c-b99e-4179-8ed6-8486a6ed8032" />
                    <Object Name="init_Bch" ObjectId="dc1ae0ea-a78e-4c30-b44d-dae2e7ab3781" />
                    <Object Name="T_BCH" ObjectId="0c998de9-8cc7-4a56-ba39-b614c627e184" />
                    <Object Name="T_BCH_CTRL" ObjectId="3a096a84-2bad-4e20-8736-1d2ea8669c0c" />
                    <Object Name="T_BCH_DATACHN" ObjectId="cdfb3a61-5ebe-4a8e-b70d-5940300d81b7" />
                    <Object Name="T_BCH_ID" ObjectId="4c3c8207-4514-47ab-82e4-c7142d181686" />
                    <Object Name="T_BCH_IO" ObjectId="3cfb8697-5a9e-49e1-8d52-caa6bddf5c1b" />
                  </Folder>
                  <Object Name="T_Ctrl_SIf_BCH" ObjectId="dd8fa73a-c430-4a93-9432-3e9673ae6f25" />
                  <Object Name="T_Ctrl_SIf_BCH_Cfg" ObjectId="ac3e6021-ef1c-4b6a-ad74-2fede8d8c180" />
                  <Object Name="T_Ctrl_SIf_BCH_Cur" ObjectId="042403e0-8860-409f-a7fe-d647b455cfc1" />
                  <Object Name="T_Ctrl_SIf_BCH_In" ObjectId="d8ce5cc2-b751-40ad-9ec4-5bb2f22438b8" />
                  <Object Name="T_Ctrl_SIf_BCH_Par" ObjectId="fbd68351-195b-4387-bad7-5fe83db55493" />
                </Folder>
                <Folder Name="MDC [Malteser Drive Controller]">
                  <Object Name="E_ALM_MDC" ObjectId="265c68b8-2228-4913-a717-3c27b920f949" />
                  <Object Name="FB_MDC" ObjectId="caba4f97-8b2b-426d-95b4-6b3a12d61c7c">
                    <Object Name="FB_init" ObjectId="06b79ec6-0420-451b-9e43-ff78d67d9b45" />
                    <Object Name="Always" ObjectId="07f39eb2-ed36-4fb5-b1c9-2c6e2047c899" />
                    <Object Name="sta_PREPOSITIONbusy" ObjectId="0a756157-e369-43b7-980d-ce5376ee5939" />
                    <Object Name="sta_StartTurnBusy" ObjectId="0b7a5a6f-a052-4d75-bece-e8cd4f8f2b1e" />
                    <Object Name="sta_ERROR" ObjectId="14f18958-7ce3-452a-be2a-23fbae64e135" />
                    <Object Name="SetPositionToGo" ObjectId="288c345b-c408-445a-b778-aa4878202e04" />
                    <Object Name="ActualPosition" ObjectId="37b25c62-eaaf-4d3d-a3af-b1549595b49d" />
                    <Object Name="IncrementPosition" ObjectId="3d60a3ff-3196-4c1d-a783-63224888d106" />
                    <Object Name="GetTurningDirection" ObjectId="448116ec-067f-4a4a-aa15-1cf64676dce3" />
                    <Object Name="sta_TurnBusy" ObjectId="7cbd8d5e-f43d-46b2-b435-8d2e205dbbdf" />
                    <Object Name="sta_PON" ObjectId="870bd253-b05d-4e39-9dca-47dd6109ef1f" />
                    <Object Name="IoInBridge" ObjectId="87e20e42-50e8-41c7-a97a-0c01bc682c83" />
                    <Object Name="sta_OFFBusy" ObjectId="8d8b328d-dc07-43e2-ac84-ce6c09cbbac8" />
                    <Object Name="IoOutBridge" ObjectId="8f0d5e14-4c61-4a7f-a73d-5a11076e3bac" />
                    <Object Name="sta_InPositionBusy" ObjectId="988cd228-4892-4b69-9f98-49da6800f2b9" />
                    <Object Name="getCtrlSIf" ObjectId="bcf7a119-b9c3-451f-a4f1-583f2b4865a3" />
                    <Object Name="sta_OFF" ObjectId="be44a038-54cd-43f4-bf1e-a4b9428ea3f2" />
                    <Object Name="sta_ERRORQuit" ObjectId="c0f1c325-edf6-4b5d-a093-a6e6d51bba4a" />
                    <Object Name="sta_InPosition" ObjectId="c773541f-2782-4a90-8a4a-29754a6ec314" />
                    <Object Name="Drive" ObjectId="cccd7015-f02b-4b1f-99d2-dad2142f9cb3" />
                    <Object Name="CtrlInit" ObjectId="df496ca8-1d96-4d90-b1f0-27a20bf34e06" />
                    <Object Name="getCmdState" ObjectId="e9ee37c9-5352-4572-9d91-c485c4add9d5" />
                    <Object Name="CtrlSIf" ObjectId="f55c22f4-5455-4359-9676-c5b5c6df8117" />
                    <Object Name="sta_InitializeBusy" ObjectId="f67ccfc1-89db-43e9-908c-4d508516b44d" />
                    <Object Name="sta_TURNDONE" ObjectId="f6bda1cf-8adf-488f-8895-e7577ff460a3" />
                    <Object Name="sta_PREPOSITION" ObjectId="f8b867fe-f966-4136-ac0c-7a74ad6f547f" />
                    <Object Name="StateMachine" ObjectId="fea0b50b-bdf4-4661-9907-715c3e63b8aa" />
                  </Object>
                  <Object Name="MDC_CmdState" ObjectId="ce9b6325-0b31-44cd-ab82-396a62a84748" />
                  <Object Name="T_Ctrl_SIf_MDC" ObjectId="24ef33f5-653d-436e-81fa-f62f00134044" />
                  <Object Name="T_Ctrl_SIf_MDC_Cfg" ObjectId="3c735f76-f9d2-46b9-a76b-5ea61faad805" />
                  <Object Name="T_Ctrl_SIf_MDC_Cur" ObjectId="73e32c06-5b45-4a3d-9598-fa275da77885" />
                  <Object Name="T_Ctrl_SIf_MDC_Ilk" ObjectId="c54be6d4-af5e-4bf7-bcd9-68e6d5f94c74" />
                  <Object Name="T_Ctrl_SIf_MDC_In" ObjectId="4b44b648-8342-492d-b0b2-0216489fcc46" />
                  <Object Name="T_Ctrl_SIf_MDC_Out" ObjectId="c4313761-6a1a-480b-966e-8c90882a4b19" />
                  <Object Name="T_Ctrl_SIf_MDC_Par" ObjectId="3f17a291-9641-4669-89b7-f74a33ea6b8f" />
                </Folder>
                <Folder Name="OVN (Oven)">
                  <Object Name="E_ALM_OVN" ObjectId="3b539a88-dc59-486c-9a4f-d59657f9b921" />
                  <Object Name="FB_MONITOR" ObjectId="9ba8aa89-3053-4a0a-ba63-b4a5dc74a0cd">
                    <Object Name="resetTime" ObjectId="f0b1c5c7-a5c5-43fb-a30c-fdac48190dc0" />
                  </Object>
                  <Object Name="FB_OVN" ObjectId="d4623e6e-93c7-42a6-a41a-a4db5bbad042">
                    <Object Name="sta_PONBusy" ObjectId="09764ea5-0555-4ab3-bd18-9baa756783b4" />
                    <Object Name="IBH" ObjectId="0b4480b7-3bde-45c6-abd5-acb8b3ccef8a" />
                    <Object Name="sta_RUN" ObjectId="0ea8f62d-75c3-40e2-9ed8-e54946d87e71" />
                    <Object Name="CtrlInit" ObjectId="2a33c5c2-2929-43b4-98e4-e525d775c03f" />
                    <Object Name="checkParameter" ObjectId="461f61da-a69b-4cdc-91b0-f8573fe2e847" />
                    <Object Name="sta_OFF" ObjectId="4e39778e-86f6-46f0-a7cb-954ff485b184" />
                    <Object Name="FB_init" ObjectId="634d05b0-aae5-4c56-83e0-8a71e0aadd76" />
                    <Object Name="chooseTesomaErrors" ObjectId="82894b6e-8205-4d89-aa41-938c35174021" />
                    <Object Name="CtrlSIf" ObjectId="88e71e60-cf7d-426c-97d7-afaf858362e5" />
                    <Object Name="sta_ERROR" ObjectId="8be44ae0-c6d5-4bb8-8bb6-82295e13fffe" />
                    <Object Name="getCmdState" ObjectId="90a3e2a7-420f-4d7d-a680-bf47fb55745a" />
                    <Object Name="sta_RUNBusy" ObjectId="92f4de2c-89b2-4610-a1cf-ca3d87a3484b" />
                    <Object Name="Always" ObjectId="a92240fc-5d33-4a2d-ac8d-c1cc3cb1e285" />
                    <Object Name="StateMachine" ObjectId="d8673dce-427e-4f92-84cb-c01c9f1b5157" />
                    <Object Name="sta_PON" ObjectId="da5770fa-bc28-4fb4-bd44-52ca2d422777" />
                    <Object Name="sta_OFFBusy" ObjectId="dce80cb8-7c24-4fdf-9f71-c6d24e7d4d05" />
                    <Object Name="sta_BELTONLYBusy" ObjectId="e816f287-6e50-426f-8156-39d63c59079d" />
                    <Object Name="getCtrlSIf" ObjectId="e8890661-eb02-49d5-a71a-b91c93c31ffb" />
                    <Object Name="DataChannel" ObjectId="e958c2e0-9251-41de-ab54-10e3fb2d939f" />
                    <Object Name="sta_ERRORQuit" ObjectId="e9ab53d3-ca72-481e-a944-6fa5721b31b2" />
                    <Object Name="sta_BELTONLY" ObjectId="ef13c3e6-1be7-4d47-88b2-2246ce4bd4fa" />
                  </Object>
                  <Object Name="FB_Tracker" ObjectId="9380dd21-cb22-45d5-b08a-410034e7d992">
                    <Object Name="DataChannel" ObjectId="1403fd9f-56e1-42ed-95da-70a74c2bb5cc" />
                    <Object Name="distanceBeforeOven_mm" ObjectId="2c8f7943-1d21-48e0-84ce-66fb488a3922" />
                    <Object Name="sendData" ObjectId="4efebb13-95b5-4aba-b1a9-720bf96e90a4" />
                    <Object Name="addElement" ObjectId="52cf92cd-2495-4ab4-a05c-44a99f53dd7b" />
                    <Object Name="moduleLength_mm" ObjectId="5b897dd5-66ad-4588-b019-065d13a009df" />
                    <Object Name="numberOfModules" ObjectId="5f36dd4f-071a-4b93-a58e-273e6d7698fd" />
                    <Object Name="markAllTrash" ObjectId="75433ff9-8e04-4ae8-9a77-4f6f10973e67" />
                    <Object Name="sampleTime_us" ObjectId="85efad67-1d40-4c96-b161-6f407e7dfd6a" />
                    <Object Name="update" ObjectId="8c8fcbc6-4062-4e03-9847-6fed1bc4a810" />
                    <Object Name="distanceAfterOven_mm" ObjectId="a2995d7c-9d54-4531-b82b-349db8aa3c90" />
                    <Object Name="deleteElement" ObjectId="b56a2b36-9e03-436d-ad14-7fe6b7d0d404" />
                    <Object Name="numberOfElements" ObjectId="ce6a1b72-5b90-44e2-bf7a-6a2875d4c130" />
                    <Object Name="deleteAll" ObjectId="f3385cc1-664d-4a82-944b-7bdeaee59d7e" />
                  </Object>
                  <Folder Name="helper">
                    <Object Name="cycle_Ovn" ObjectId="07764068-9f3b-402f-b763-d5a9ae0a908c" />
                    <Object Name="init_Ovn" ObjectId="75862f38-163f-408d-b463-c830698f3fe4" />
                    <Object Name="T_OVN" ObjectId="e2d02fca-0bf5-461e-a652-5b67acf96dd4" />
                    <Object Name="T_OVN_CTRL" ObjectId="9ee4547e-ada7-4d19-afdd-b747fbc3fca5" />
                    <Object Name="T_OVN_DATACHN" ObjectId="f6dc13cd-c756-4b2a-b9d7-54dd1ff18b02" />
                    <Object Name="T_OVN_ID" ObjectId="ad6af004-2ef8-4e5f-b2a2-2050ad62b949" />
                    <Object Name="T_OVN_IO" ObjectId="d4e76a40-f511-4403-89cf-c0997e08e560" />
                  </Folder>
                  <Object Name="OVN_CmdState" ObjectId="ccca8449-98a5-48f9-9794-5a85756397ca" />
                  <Object Name="T_Ctrl_SIf_OVN" ObjectId="5bf0abf7-2f41-4968-9406-e6e481a8bebb" />
                  <Object Name="T_Ctrl_SIf_OVN_Cfg" ObjectId="087adcd4-9d88-4f62-8f11-c7111b108210" />
                  <Object Name="T_Ctrl_SIf_OVN_Cur" ObjectId="a5033932-e555-4948-b0ec-251ba9021f8d" />
                  <Object Name="T_Ctrl_SIf_OVN_In" ObjectId="67a93611-1f65-415f-960c-36c29f43e034" />
                  <Object Name="T_Ctrl_SIf_OVN_Out" ObjectId="43b0d37f-f93b-4271-b079-fc0585919514" />
                  <Object Name="T_Ctrl_SIf_OVN_Par" ObjectId="8b0526c2-c659-4685-a2db-21c1fba552d3" />
                  <Object Name="T_Data" ObjectId="f62c5f74-b049-4b44-a986-c74c61704aa9" />
                </Folder>
                <Folder Name="PTA [Paper Transport Alignment]">
                  <Folder Name="helper">
                    <Object Name="cycle_Pta" ObjectId="46c7fe0b-d881-487c-b6a7-dcf8432446c8" />
                    <Object Name="init_Pta" ObjectId="c415c1f4-6166-496a-b919-b182ed1f6230" />
                    <Object Name="T_PTA" ObjectId="f2451757-fafd-4b5d-aa63-ca15aaf0f3d8" />
                    <Object Name="T_PTA_CTRL" ObjectId="60c434a5-805d-46de-b3c5-3464f5565dce" />
                    <Object Name="T_PTA_ID" ObjectId="cec582b0-1df7-40b8-8c89-848144478305" />
                    <Object Name="T_PTA_IO" ObjectId="19da3a1e-982a-47c2-b345-9bf78e8c390c" />
                  </Folder>
                </Folder>
                <Folder Name="PTB [Paper Transport Belt]">
                  <Folder Name="BeltParameterFunction">
                    <Object Name="T_Belt_Cfg_Base" ObjectId="5adf9fcb-2704-4517-830f-b2f55cd045a3" />
                    <Object Name="T_Belt_Cur_Base" ObjectId="916d4012-4226-46b5-953f-331c4b61242c" />
                    <Object Name="T_Belt_Par_Base" ObjectId="0590959c-6c2c-4435-bdeb-4dc84d44bdbc" />
                  </Folder>
                  <Object Name="E_ALM_PTB" ObjectId="185a2a6c-bbe5-44eb-8928-25bb7caef71f" />
                  <Object Name="E_BELT_DIRECTION" ObjectId="b603305a-71be-4f2e-8ca7-abf199e3bb49" />
                  <Object Name="E_PTB_MODE" ObjectId="1284c56f-f9a2-43f5-b638-407dabecb4aa" />
                  <Object Name="E_PTB_PaperDirection" ObjectId="8ef89328-ac0a-4a49-9941-36bd4879573d" />
                  <Object Name="FB_PTB" ObjectId="655f278b-e80b-449e-a7e9-7932049a4287">
                    <Object Name="Always" ObjectId="0b720a96-2ec8-4c16-9a79-0d2a3f6cb6e5" />
                    <Object Name="sta_STACKPAPER" ObjectId="19072b2b-ec17-4747-8579-06eeb80dd90f" />
                    <Object Name="FB_init" ObjectId="24861e4e-d8f6-4862-a04d-b051d26d7b2e" />
                    <Object Name="StateMachine" ObjectId="26ea456b-0cb5-4170-b2b7-a78754a96706" />
                    <Object Name="Drive" ObjectId="352ad45d-9d9b-46c4-8cf1-961c8a81f50b" />
                    <Object Name="CheckPumpState" ObjectId="3f33bcc6-db72-4010-bde7-0753d49dc451" />
                    <Object Name="sta_PON" ObjectId="409cdb91-8201-47a2-83d7-a768f8eb00a6" />
                    <Object Name="getCmdState" ObjectId="42c92c40-c6cf-4983-b8df-09a6c8a7222d" />
                    <Object Name="sta_ERROR" ObjectId="47e90418-7806-4851-a78a-b60ced3a0a24" />
                    <Object Name="sta_ERRORQuit" ObjectId="4a91c7f6-21e9-48e9-b00b-9849e8134182" />
                    <Object Name="IoOutBridge" ObjectId="5c3137bb-2fa5-4bf5-9465-4e72bcc46d38" />
                    <Object Name="CtrlInit" ObjectId="5dfd68b1-32d1-4c5f-aab2-8dcaa084427a" />
                    <Object Name="PaperPositionHandling" ObjectId="64ea4a68-46f8-44af-a85d-de79b82b7c9e" />
                    <Object Name="sta_RUN" ObjectId="774612dd-5bce-47d5-be68-6a33e3d085d4" />
                    <Object Name="getCtrlSIf" ObjectId="7c24c153-9cbe-465f-911f-714fc7ad7ecd" />
                    <Object Name="cmd_STOP" ObjectId="819cc83c-e1e7-4bf5-aa5b-d201360447d6" />
                    <Object Name="CtrlSIf" ObjectId="81acc2b3-095a-407a-aa96-26f254cf6c26" />
                    <Object Name="SetPumpComand" ObjectId="9aefb630-c621-4bf6-8829-228022425f36" />
                    <Object Name="sta_STACKPAPERbusy" ObjectId="9e2a302b-e055-48fe-8b35-2fae0099c1ef" />
                    <Object Name="sta_STOPBusy" ObjectId="9f97b1e6-b4d9-4f8a-b13e-5a19dbc906d7" />
                    <Object Name="PositionList" ObjectId="b5bc4f9e-a471-4e39-bf7c-b797c6ae5d2f" />
                    <Object Name="VacuumPump" ObjectId="b6867796-0cd2-4ba6-ab46-c144b77a5ecf" />
                    <Object Name="sta_OFFBusy" ObjectId="b801a710-0ce2-41f5-9545-4c56ab4f6a6f" />
                    <Object Name="sta_RUNBusy" ObjectId="b8546540-4c6e-4461-ba23-06e1835d40da" />
                    <Object Name="IoInBridge" ObjectId="b8b49437-1e31-41d6-b74a-fbaa92763dca" />
                    <Object Name="cmd_RUN" ObjectId="c6b1e64e-e584-437c-a4a7-7cd33dd17e9a" />
                    <Object Name="cmd_OFF" ObjectId="c8334735-05ef-47cd-9fa0-dfe9d5663a94" />
                    <Object Name="sta_EJECTPAPERbusy" ObjectId="d282bf75-e7b8-4a04-a81f-ee2e0c595e11" />
                    <Object Name="sta_OFF" ObjectId="d42c5d4c-ced3-4dfa-b9b6-ca4608b3fa79" />
                    <Object Name="sta_EJECTPAPER" ObjectId="e54527ca-6ef1-48c8-b56d-19ad3b944eff" />
                    <Object Name="CalculateModeParameter" ObjectId="eb6e816c-b5e9-4952-860f-51553408025b" />
                    <Object Name="CalculateBeltParameter" ObjectId="effd9c76-8538-4d81-b642-2c83c3ade187" />
                    <Object Name="sta_STOP" ObjectId="f59e4d1c-889a-435d-b353-ad5f9f25ab5a" />
                  </Object>
                  <Folder Name="helper">
                    <Object Name="cycle_Ptb" ObjectId="3372afe3-7bac-48c1-8590-ff62db918e56" />
                    <Object Name="init_Ptb" ObjectId="8ebadddd-333a-46ba-82c7-eb285cfb0a6a" />
                    <Object Name="T_PTB" ObjectId="444e9078-f870-425c-9778-05cd77ea2afa" />
                    <Object Name="T_PTB_CTRL" ObjectId="730e6765-7006-4ad3-a3cd-be9016d6d61d" />
                    <Object Name="T_PTB_ID" ObjectId="b6b64924-2b7f-4a75-b49c-31a7e637c20c" />
                    <Object Name="T_PTB_IO" ObjectId="e18177eb-a229-4348-81bc-3ab051c328a0" />
                  </Folder>
                  <Object Name="PTB_CmdState" ObjectId="e7b636e1-aebb-42f0-8717-00e458c92dab" />
                  <Object Name="T_Ctrl_SIf_PTB" ObjectId="46332720-5139-4d93-9171-0144ee593238" />
                  <Object Name="T_Ctrl_SIf_PTB_Cfg" ObjectId="dd1e60ba-e7ac-4ad1-83d3-60eba5efedbb" />
                  <Object Name="T_Ctrl_SIf_PTB_Cur" ObjectId="6e53685b-14be-4f8a-843e-c1ae423586af" />
                  <Object Name="T_Ctrl_SIf_PTB_Ilk" ObjectId="0ded9bee-50c8-4a7f-9608-f455fef7ada8" />
                  <Object Name="T_Ctrl_SIf_PTB_In" ObjectId="40ce6afc-0c1c-4af6-9b47-b37c063e97ce" />
                  <Object Name="T_Ctrl_SIf_PTB_Out" ObjectId="b4cc2c79-6395-4fc8-942b-c4e9cbe496b9" />
                  <Object Name="T_Ctrl_SIf_PTB_Par" ObjectId="830ba7d5-f8ef-488f-9c51-926ee240ce52" />
                </Folder>
              </Folder>
              <Folder Name="Lvl2">
                <Folder Name="PBC [Paper Buffer Controller]">
                  <Object Name="E_ALM_PBC" ObjectId="07d753a4-ed3a-4205-b9d0-b6dd9e83f452" />
                  <Object Name="E_STOPREASON" ObjectId="265c92cb-f90d-4512-b400-7fc9bf762399" />
                  <Object Name="FB_PBC" ObjectId="5312264e-3525-4429-afd7-4fae8987e766">
                    <Object Name="sta_PON" ObjectId="03da2f65-5de2-41d5-851a-12978cd42515" />
                    <Object Name="sta_RUNbusy" ObjectId="045a7728-ee01-4fff-9106-f4e993712fa4" />
                    <Object Name="CtrlInit" ObjectId="09022cbb-b6ab-4b04-abf3-53db65fe0b13" />
                    <Object Name="Always" ObjectId="201d4d88-46b2-49a6-9302-f918d8d340fe" />
                    <Object Name="sta_ERROR" ObjectId="2368fd86-1499-440e-abaa-806c761a8e17" />
                    <Object Name="getCmdState" ObjectId="281acdb2-3332-4f9b-ac77-ae47f75d60ec" />
                    <Object Name="CtrlSIf" ObjectId="3e325cfc-23e0-40d2-9668-46ad08a9f188" />
                    <Object Name="sta_STOPbusy" ObjectId="3eaeb462-9a31-435f-aedc-94d0dcbc7e60" />
                    <Object Name="IoOutBridge" ObjectId="4cdc6bdc-e61d-44db-827e-89fd5fdd1777" />
                    <Object Name="sta_RUN" ObjectId="53c5e258-936a-421f-b42d-360632f50539" />
                    <Object Name="sta_OFFBusy" ObjectId="565fd178-f8f6-45b6-9fb5-4c8856fdb848" />
                    <Object Name="sta_INITbusy" ObjectId="57823769-6542-44d2-94a0-1a8974cad10b" />
                    <Object Name="PaperHight" ObjectId="5b1e9d08-5588-406e-972e-db67b6474234" />
                    <Object Name="CountPaper" ObjectId="65d948a4-d5d2-4500-8671-58c37605c544" />
                    <Object Name="IoInBridge" ObjectId="732f0498-951e-474e-9d5f-cb91c7db908a" />
                    <Object Name="StateMachine" ObjectId="89ef4fe1-8332-42c8-a32b-2f49b4962fbc" />
                    <Object Name="sta_ERRORQuit" ObjectId="934096ed-e0e9-4740-b0df-757e9ba976b8" />
                    <Object Name="sta_OFF" ObjectId="991a4d35-1703-4ba4-b9d3-b5e535ba12dc" />
                    <Object Name="DeStacker" ObjectId="a9f76b1c-618f-4237-b30b-6fe739b6b8dc" />
                    <Object Name="PaperWidth" ObjectId="bdbc5d91-7413-4fdb-8d4f-fb269464fa49" />
                    <Object Name="sta_STOP" ObjectId="cdd76f16-a5d8-4049-ae0b-d22932690fcf" />
                    <Object Name="getCtrlSIf" ObjectId="cfdfd1a6-aa05-4b95-85bc-5fe278b4a3e2" />
                    <Object Name="FB_init" ObjectId="d6a73665-80ea-4a98-bb13-8baa13b64ead" />
                    <Object Name="Belt" ObjectId="ebfda3d5-863b-4ca7-928a-5ed00cd56382" />
                  </Object>
                  <Folder Name="helper">
                    <Object Name="cycle_Pbc" ObjectId="aa8703db-12c3-4ed7-8a3f-79a93208c1d8" />
                    <Object Name="init_Pbc" ObjectId="a9544bb5-a3f8-471a-9027-9ef21922f1e9" />
                    <Object Name="T_PBC" ObjectId="2ec7650c-9a5e-4ce0-ad44-a11a81359129" />
                    <Object Name="T_PBC_CTRL" ObjectId="5a45d332-ebf9-483d-9ed4-a8db9fdb70b1" />
                    <Object Name="T_PBC_ID" ObjectId="caa203cc-72be-4259-b87b-9c5be7015c95" />
                    <Object Name="T_PBC_IO" ObjectId="23cea475-9ef2-4eda-a290-b979cc2bc72f" />
                  </Folder>
                  <Object Name="PBC_CmdState" ObjectId="c08a46b0-45e8-438d-90f8-78fc66cf873f" />
                  <Object Name="T_Ctrl_SIf_PBC" ObjectId="ec7fa547-4b97-4a81-a84e-af3a1a3b2ea5" />
                  <Object Name="T_Ctrl_SIf_PBC_Cfg" ObjectId="898a4ff4-029d-4277-980e-032befe8200a" />
                  <Object Name="T_Ctrl_SIf_PBC_Cur" ObjectId="9faea2e0-08f9-4ee9-a829-9d131687df57" />
                  <Object Name="T_Ctrl_SIf_PBC_Ilk" ObjectId="305f2183-23bb-4fcb-8728-10d231338f4e" />
                  <Object Name="T_Ctrl_SIf_PBC_In" ObjectId="ccd0b3ac-c62e-4c7a-af02-b6f61ed750b0" />
                  <Object Name="T_Ctrl_SIf_PBC_Out" ObjectId="00798edf-83bd-49d2-b6e8-f8dc571b390b" />
                  <Object Name="T_Ctrl_SIf_PBC_Par" ObjectId="fa046228-65a0-4450-b90b-4fd6cf3f02e9" />
                </Folder>
                <Folder Name="PCE [Paper Belt Corner Element]">
                  <Object Name="E_ALM_PCE" ObjectId="5ddaf1ba-728a-4f0a-889a-3ef0d5ba47f0" />
                  <Object Name="FB_PCE" ObjectId="4fd21a2c-bb8c-40f2-b8bb-db801457e1c0">
                    <Object Name="DriveOut" ObjectId="035deb5d-95b3-4262-bc5e-78a89e49ce73" />
                    <Object Name="sta_RUN" ObjectId="06e20a87-b11f-46b1-b222-06a5aadf5142" />
                    <Object Name="CtrlSIf" ObjectId="0bd066fc-5211-4c2e-8575-3afaf461be8b" />
                    <Object Name="getCmdState" ObjectId="0fec2fc7-2d33-449b-952a-564156cf70da" />
                    <Object Name="IoOutBridge" ObjectId="23afa553-0fc4-4cd5-8230-8fe04d0a7263" />
                    <Object Name="CtrlInit" ObjectId="387abafe-89c8-47bf-a231-68d7a321f196" />
                    <Object Name="sta_ERROR" ObjectId="43b92eab-1a74-4406-b5b6-eee25283ac3c" />
                    <Object Name="sta_ERRORQuit" ObjectId="4e86f430-473b-4029-a8d4-bcc12fbbf9ef" />
                    <Object Name="IoInBridge" ObjectId="514f0bd3-a77d-444f-aa66-ac5421ca0c93" />
                    <Object Name="sta_OFFBusy" ObjectId="68549a43-8f3c-46c0-88e9-4b8b2c11d738" />
                    <Object Name="sta_OFF" ObjectId="7385f6d9-115b-4a01-a0b2-2988f9a09e5a" />
                    <Object Name="PaperExitValveActive" ObjectId="8bd2a422-e20f-4594-87f1-a38d2d61bbb7" />
                    <Object Name="sta_RUNBusy" ObjectId="93e21abe-e0d0-4102-9a53-8ecf8bcd85b6" />
                    <Object Name="sta_STOP" ObjectId="a80829eb-cce3-43ab-b021-8c690cb7b935" />
                    <Object Name="Always" ObjectId="aeb9935e-08bd-483a-ac88-c1417761b0ed" />
                    <Object Name="StateMachine" ObjectId="b1ee4999-7c58-4771-8d2e-3c2b426ff35b" />
                    <Object Name="FB_init" ObjectId="b591f551-ab59-403b-868a-a874b4abbbc3" />
                    <Object Name="PaperInputValveActive" ObjectId="c7287faa-248e-404e-8b1f-620edc0ce793" />
                    <Object Name="getCtrlSIf" ObjectId="d7e44b5c-69a6-42a3-8b01-0842a83109a4" />
                    <Object Name="sta_PON" ObjectId="f1f785fe-f693-44ff-9901-c94758bcbfdd" />
                    <Object Name="DriveIn" ObjectId="f24a8ae5-3ac7-443a-b59c-2cc3fe23592b" />
                    <Object Name="sta_STOPBusy" ObjectId="fd0a33b5-de2d-4135-971c-e51fe1c481b0" />
                  </Object>
                  <Folder Name="helper">
                    <Object Name="cycle_Pce" ObjectId="6240b20a-42f7-491c-b89e-552a518d787f" />
                    <Object Name="init_Pce" ObjectId="ab97e4c9-cf53-4c54-b273-aa215f7a464b" />
                    <Object Name="T_PCE" ObjectId="fbf96a47-db7e-4d62-b6bd-22e5b5bdbc89" />
                    <Object Name="T_PCE_CTRL" ObjectId="b04df3cb-698e-4867-b5a0-1e6d152bafc1" />
                    <Object Name="T_PCE_ID" ObjectId="9e1ef860-94a8-4ae4-8cb7-e5c4bae42b6a" />
                    <Object Name="T_PCE_IO" ObjectId="f932e0f7-afae-4414-8668-cb7a9d70f073" />
                  </Folder>
                  <Object Name="PCE_CmdState" ObjectId="127775c7-3828-4250-a22d-7441adfe5b37" />
                  <Object Name="T_Ctrl_SIf_PCE" ObjectId="a6425465-7eae-4e76-b9e1-9e6eebac9a88" />
                  <Object Name="T_Ctrl_SIf_PCE_Cfg" ObjectId="37000d34-edca-4045-8234-1a4fa51301ad" />
                  <Object Name="T_Ctrl_SIf_PCE_Cur" ObjectId="ffeb56dd-85a2-4f3a-8090-d4d72ad72f39" />
                  <Object Name="T_Ctrl_SIf_PCE_Ilk" ObjectId="97768c26-913d-4406-97bc-435c622ef50d" />
                  <Object Name="T_Ctrl_SIf_PCE_In" ObjectId="3f7e443f-fe1a-49ef-a7c2-1378ec4f91df" />
                  <Object Name="T_Ctrl_SIf_PCE_Out" ObjectId="c46c4003-67b0-4ecd-a6ee-be311bc3de12" />
                  <Object Name="T_Ctrl_SIf_PCE_Par" ObjectId="642efffb-d99e-47f2-ac1a-efe88c7c75d4" />
                </Folder>
                <Folder Name="PST [Paper Stacker]">
                  <Object Name="E_ALM_PST" ObjectId="fb8f115b-73dc-4c4d-9e3b-d73e166ea250" />
                  <Object Name="FB_PST" ObjectId="177fde74-8095-4d5b-83ca-4788bd6cdc14">
                    <Object Name="Always" ObjectId="02adbe50-8f28-4fec-bdbf-17b6f8690f6e" />
                    <Object Name="sta_OFF" ObjectId="0502dbf8-20f9-4117-9703-ff079cb92cdf" />
                    <Object Name="CtrlSIf" ObjectId="0c1cfe45-643d-4c44-8edd-0ab32bb0d8ca" />
                    <Object Name="StateMachine" ObjectId="0c9bebeb-261c-42ce-a825-4fdd856d80d2" />
                    <Object Name="IoInBridge" ObjectId="25b53e86-9014-49d6-a156-cfd766df56aa" />
                    <Object Name="sta_RUN" ObjectId="2819f36e-4401-40c0-a2d2-886f7acb3f3a" />
                    <Object Name="getCmdState" ObjectId="3823c242-0675-4620-ae8e-dedee287a1e5" />
                    <Object Name="sta_OFFBusy" ObjectId="46ae3c8b-2056-4bef-a480-b5afe2859c54" />
                    <Object Name="sta_EJECTBusy" ObjectId="4881b1de-4f65-48cf-aaa1-07c89ae3b9ba" />
                    <Object Name="getCtrlSIf" ObjectId="73e3e1ff-7e5b-4a2f-be8b-55b712b80a98" />
                    <Object Name="CtrlInit" ObjectId="83e3bb31-e4dc-4af4-878f-f9306253a81b" />
                    <Object Name="Belt" ObjectId="95ad694d-5961-4efd-baa0-b4236677284f" />
                    <Object Name="sta_RUNBusy" ObjectId="b026e36e-9104-4b3f-ac49-5f4acb583f92" />
                    <Object Name="FB_init" ObjectId="cec5de92-8e9c-41e7-97fc-a80349787823" />
                    <Object Name="PaperStackSendFifo" ObjectId="d90bdce1-ef31-43d2-a23a-6138aee95c37" />
                  </Object>
                  <Folder Name="helper">
                    <Object Name="cycle_Pst" ObjectId="82ffccb5-01a2-4256-bb7a-01afc149eef0" />
                    <Object Name="init_Pst" ObjectId="557e8472-4797-4608-acef-2cc63da5260f" />
                    <Object Name="T_PST" ObjectId="ead61f37-9743-4b3a-9be3-ef92b97bdaba" />
                    <Object Name="T_PST_CTRL" ObjectId="01636854-f3a0-43cb-92ed-a3ddc238745c" />
                    <Object Name="T_PST_ID" ObjectId="925a0024-5e53-4722-97c6-35607704151d" />
                    <Object Name="T_PST_IO" ObjectId="4e76754d-836d-43a4-9fa3-cf4cac853ea4" />
                  </Folder>
                  <Object Name="PST_CmdState" ObjectId="05beb03a-4925-449e-af03-b1583d0d4fe6" />
                  <Object Name="T_Ctrl_SIf_PST" ObjectId="58d0739e-4a8a-4029-ba5b-a0cf536771b3" />
                  <Object Name="T_Ctrl_SIf_PST_Cfg" ObjectId="adcb3961-b87b-45f2-8018-1789940ada6d" />
                  <Object Name="T_Ctrl_SIf_PST_Cur" ObjectId="fa22d38c-c5cf-4392-a225-50007f420a94" />
                  <Object Name="T_Ctrl_SIf_PST_In" ObjectId="a204f6a2-6124-4daa-acde-65724e33b865" />
                  <Object Name="T_Ctrl_SIf_PST_Par" ObjectId="dc629613-ceee-4bb0-9fbd-07d1b49f7bd2" />
                  <Object Name="T_ItemPaperInfo" ObjectId="ca9b333e-3027-40f6-af2e-a7ff12c0e406" />
                </Folder>
                <Folder Name="PTS [Paper Turning Station]">
                  <Object Name="E_ALM_PTS" ObjectId="054d011f-4a84-48e4-ba08-1819064b2746" />
                  <Object Name="E_PTS_MODE" ObjectId="5529f173-ee9b-4396-96fd-ab6e360061ad" />
                  <Object Name="FB_PTS" ObjectId="ce4721d8-0ee6-4269-bb23-f91a21a98bc0">
                    <Object Name="CtrlSIf" ObjectId="04d92a51-52d2-4695-9002-096d0ca5376f" />
                    <Object Name="IoInBridge" ObjectId="07fa2a9a-5cf1-4304-820c-dcfd32c717c1" />
                    <Object Name="sta_WaitPaper" ObjectId="0e7414cf-d0dd-4b81-b8be-f72855b24544" />
                    <Object Name="sta_STOPbusy" ObjectId="1e8226ab-a796-4450-b0cc-a69381437714" />
                    <Object Name="Always" ObjectId="381a9ccd-3a98-40f6-a6fb-a7765f4ac8c3" />
                    <Object Name="sta_STOP" ObjectId="382ba73c-aba8-402d-b897-f2f986d6d285" />
                    <Object Name="ChangeDistributionModeParameter" ObjectId="3a1c3596-39d4-450d-8741-8f9f36bb6cf5" />
                    <Object Name="sta_TurnPaperBusy" ObjectId="47d5f644-c3ba-4ffc-9f61-ec41e3b5e681" />
                    <Object Name="StateMachine" ObjectId="4a4e8c3a-10d7-4566-8587-98d593354e84" />
                    <Object Name="sta_OFFBusy" ObjectId="4c084565-49f2-4582-83bc-98b4408003f3" />
                    <Object Name="FB_init" ObjectId="50e652e7-733a-43d7-a9db-3119c16717fe" />
                    <Object Name="sta_STANDBYBusy" ObjectId="544b3e4d-972a-4d34-a50a-cac645562a34" />
                    <Object Name="Belt" ObjectId="5d9153e8-6ba7-4004-9ccd-8bf2bafb85e2" />
                    <Object Name="sta_STANDBY" ObjectId="6353d14a-33c5-4909-91bf-e4aa5034bf37" />
                    <Object Name="sta_ERRORQuit" ObjectId="6393f466-56a5-442a-a7d6-65b0c2ec1472" />
                    <Object Name="Malteser" ObjectId="64e06aa1-5ce3-4995-b01c-f8f723ea0cb3" />
                    <Object Name="sta_InitializeBusy" ObjectId="6e4022a2-cd39-449a-8c5a-c1e8a06be683" />
                    <Object Name="sta_OFF" ObjectId="735e9e3a-a43c-44ea-a9bf-d652656df3eb" />
                    <Object Name="sta_RUN" ObjectId="73d92433-8a02-4e03-b79a-2b3880ff02f4" />
                    <Object Name="sta_WaitPaperGone" ObjectId="795726bb-f351-4be6-9ce9-9ae5e0345bd4" />
                    <Object Name="Servo" ObjectId="8057dbca-8b6a-4a74-aa85-d95637e4a07b" />
                    <Object Name="GetItemBusy" ObjectId="8c53f2e8-a595-4aa9-ba8a-6898e80cf5b8" />
                    <Object Name="CalculateOutputDelay" ObjectId="96c61c3d-d4e9-42a8-a197-d3f0cd07aa0d" />
                    <Object Name="getCmdState" ObjectId="ac174f0d-5494-411d-927b-dac3867c0b10" />
                    <Object Name="sta_TurnEmptyBusy" ObjectId="adb0932f-4f2e-4c0e-b38f-44f9e9562984" />
                    <Object Name="IoOutBridge" ObjectId="c341110f-826b-44a8-9ae8-49de824fd750" />
                    <Object Name="sta_PON" ObjectId="d2d1ecf6-99ed-4416-9979-7a24ac10612a" />
                    <Object Name="sta_PaperDelayBusy" ObjectId="d51453da-bd30-41c5-98b4-ce967a096ea0" />
                    <Object Name="sta_RUNBusy" ObjectId="d53d27d0-b437-473d-b721-78d5723d7dbe" />
                    <Object Name="sta_GetItemBusy" ObjectId="e5b7da0b-5845-40b2-b836-8ebe250a7e27" />
                    <Object Name="CtrlInit" ObjectId="e72e0771-1032-4225-a926-fb885add5154" />
                    <Object Name="sta_ERROR" ObjectId="f097df25-2b08-4c3f-a239-d39a12bbf963" />
                    <Object Name="getCtrlSIf" ObjectId="f666f961-c45f-48a6-aefd-c0f724032b89" />
                  </Object>
                  <Folder Name="helper">
                    <Object Name="cycle_Pts" ObjectId="37a42ab4-c720-4022-b266-af1a7ee7007b" />
                    <Object Name="init_Pts" ObjectId="c68d0e3f-cd89-413c-85c0-14d5f7780b58" />
                    <Object Name="T_PTS" ObjectId="be7806cb-f5cc-490e-a410-394ce19bae4a" />
                    <Object Name="T_PTS_CTRL" ObjectId="908260a1-8597-4043-8962-82955516248a" />
                    <Object Name="T_PTS_ID" ObjectId="dcb242cc-f298-470a-9b98-0ee1351b7af7" />
                    <Object Name="T_PTS_IO" ObjectId="2ba2100c-0020-49d9-9f6f-98123c511758" />
                  </Folder>
                  <Object Name="PTS_CmdState" ObjectId="6f02a571-a11c-453b-8545-bf1aa9f00e5c" />
                  <Object Name="PTS_Persistent" ObjectId="18d443ac-1752-4703-a1fc-e06e8a33cc0d" />
                  <Object Name="T_Ctrl_SIf_PTS" ObjectId="ec82b7b2-5c33-4c81-b389-b677fb3ce4ff" />
                  <Object Name="T_Ctrl_SIf_PTS_Cfg" ObjectId="283cb9b3-dba3-4af6-a60f-c02506c0ae38" />
                  <Object Name="T_Ctrl_SIf_PTS_Cur" ObjectId="cb2af5e4-07b8-4ef2-b905-517e2466c72c" />
                  <Object Name="T_Ctrl_SIf_PTS_Ilk" ObjectId="2a38859f-d5f9-4289-98ef-01ec4024bce0" />
                  <Object Name="T_Ctrl_SIf_PTS_In" ObjectId="1123bdf5-203e-4098-8049-39dfb154f05c" />
                  <Object Name="T_Ctrl_SIf_PTS_Out" ObjectId="5dc8a1c3-ae78-4f0e-b7df-342fcfbaa401" />
                  <Object Name="T_Ctrl_SIf_PTS_Par" ObjectId="d3d69ab2-dec5-4d23-80df-1ab7408232e0" />
                  <Object Name="T_PTS_InOutPositions" ObjectId="5e53d583-ca37-4fa7-b1a5-bfa9770f9cf1" />
                </Folder>
              </Folder>
              <Folder Name="Utility">
                <Folder Name="Data Channel">
                  <Folder Name="OvenMessage">
                    <Object Name="FB_OvenSendDch" ObjectId="f407cdf0-70d7-483e-bcc5-d160524f1ab6">
                      <Object Name="SendData" ObjectId="8f2f36b4-17d9-4d54-812a-f7b5ad3dc012" />
                      <Object Name="InitChannel" ObjectId="e7571f08-9c15-46a6-8563-24c0d0c5e721" />
                    </Object>
                    <Object Name="OvenConst" ObjectId="72d8bda2-44e8-476b-a778-767834ec8549" />
                    <Object Name="T_OvenSendData" ObjectId="670bb272-b6c2-4851-a355-d8baafe795f9" />
                    <Object Name="T_Oven_DCH" ObjectId="0c9a714c-88fd-4826-aaac-f9394c0ee232" />
                  </Folder>
                </Folder>
                <Folder Name="FiFo">
                  <Object Name="FB_DataSetFifo" ObjectId="5f999324-e911-42e2-acc5-05637b7d1f00">
                    <Object Name="A_Add" ObjectId="354f56b0-10da-4f61-968e-e1e0997fba19" />
                    <Object Name="A_Get" ObjectId="528fe388-fbd0-4c9d-9d0b-32ddfc26b84f" />
                    <Object Name="A_Reset" ObjectId="aac67239-23f4-4ba1-afd0-7a0070873d9f" />
                    <Object Name="A_Remove" ObjectId="da30d440-c58f-44b6-892a-ab279b11fd1a" />
                  </Object>
                </Folder>
                <Folder Name="LookupTable">
                  <Object Name="FB_LookupTable" ObjectId="222d6a01-f54a-44a2-a504-2cb2e40c6879">
                    <Object Name="A_Add" ObjectId="22606354-33aa-4c22-b193-a0302fa25939" />
                    <Object Name="A_Reset" ObjectId="996c16b7-de6b-44df-99ed-271654cecfb2" />
                    <Object Name="A_RemoveKey" ObjectId="b0ce0b72-b2d9-458d-aeda-8a478319e177" />
                    <Object Name="A_LookupByValue" ObjectId="f7fddc35-5eb9-4ed0-8d5c-4fa3208fd6a4" />
                    <Object Name="A_LookupByKey" ObjectId="fc107e65-f819-47ca-8e16-88c1a5f8000f" />
                  </Object>
                  <Object Name="LUT_Constants" ObjectId="af67a2b8-ca5f-44b6-8761-347846921ecc" />
                </Folder>
              </Folder>
            </Folder>
          </Folder>
          <Folder Name="Version">
            <Object Name="Global_Version" ObjectId="65f5faa8-bba9-40c8-9847-35a5c8d56eac" />
          </Folder>
        </Object>
      </ProjectStructure>
    </data>
  </addData>
</project>